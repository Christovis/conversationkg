      I've fixed the mismatched tags in dom-to-xsd.xsl and committed it to the  CVS.  Sorry to let that one slip by.  I introduced that bug this weekend and  it should not affect the snapshot that Shane is working on.    I would not touch your configuration right now.  Shane is trying to track  down issues with Xalan-J 2.2 and Ant.  Both appear to be marching to another  release in just a few days and it would be lovely if Ant 1.5 bundled Xalan-J  2.2 and worked out of the box to produce the test suite.        

      I've just run dom1-html.jar with a modified versions of Xerces-J (patches attached).  Quite a few tests failed since supporting test files were missing, specifically collection.xml, frame.xml, frameset.xml, and iframe.xml (the HTML versions are also missing).      I haven't investigated the other failures.  They may or may not be problems with the tests.    D:\domts\2001\DOM-Test-Suite\build>java -cp dom1-html.jar junit.textui.TestRunne  r org.w3c.domts.level1.html.TestXercesime: 451.869  There were 49 errors:  1) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection01(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection01.runTest(HTMLCollection01.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  2) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection02(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection02.runTest(HTMLCollection02.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  3) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection03(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection03.runTest(HTMLCollection03.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  4) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection04(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection04.runTest(HTMLCollection04.j  ava:72)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  5) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection05(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection05.runTest(HTMLCollection05.j  ava:62)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  6) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection06(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection06.runTest(HTMLCollection06.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  7) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection07(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection07.runTest(HTMLCollection07.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  8) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection08(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection08.runTest(HTMLCollection08.j  ava:64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  9) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection09(org.w3c.do  mts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection09.runTest(HTMLCollection09.j  ava:63)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  10) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection10(org.w3c.d  omts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection10.runTest(HTMLCollection10.j  ava:66)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  11) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection11(org.w3c.d  omts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection11.runTest(HTMLCollection11.j  ava:66)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  12) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLCollection12(org.w3c.d  omts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\collection.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLCollection12.runTest(HTMLCollection12.j  ava:66)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  13) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFormElement01(org.w3c.  domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLFormElement01.runTest(HTMLFormElement01  .java:83)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  14) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement01(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement01.runTest(HTMLFrameElement  01.java:62)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  15) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement02(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement02.runTest(HTMLFrameElement  02.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  16) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement03(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement03.runTest(HTMLFrameElement  03.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  17) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement04(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement04.runTest(HTMLFrameElement  04.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  18) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement05(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement05.runTest(HTMLFrameElement  05.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  19) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement06(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement06.runTest(HTMLFrameElement  06.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  20) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement07(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement07.runTest(HTMLFrameElement  07.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  21) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameElement08(org.w3c  .domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frame.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameElement08.runTest(HTMLFrameElement  08.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  22) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameSetElement01(org.  w3c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frameset.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameSetElement01.runTest(HTMLFrameSetE  lement01.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  23) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLFrameSetElement02(org.  w3c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\frameset.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLFrameSetElement02.runTest(HTMLFrameSetE  lement02.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  24) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement01(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement01.runTest(HTMLIFrameEleme  nt01.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  25) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement02(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement02.runTest(HTMLIFrameEleme  nt02.java:62)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  26) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement03(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement03.runTest(HTMLIFrameEleme  nt03.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  27) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement04(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement04.runTest(HTMLIFrameEleme  nt04.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  28) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement05(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement05.runTest(HTMLIFrameEleme  nt05.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  29) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement06(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement06.runTest(HTMLIFrameEleme  nt06.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  30) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement07(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement07.runTest(HTMLIFrameEleme  nt07.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  31) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement08(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement08.runTest(HTMLIFrameEleme  nt08.java:61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  32) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement09(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement09.runTest(HTMLIFrameEleme  nt09.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  33) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLIFrameElement10(org.w3  c.domts.JUnitTestCaseAdapter)  java.io.FileNotFoundException: D:\domts\2001\DOM-Test-Suite\build\tests\level1\h  tml\files\iframe.xml (The system cannot find the path specified)          at org.w3c.domts.XercesHTMLDocumentBuilderFactory.load(XercesHTMLDocumen  tBuilderFactory.java:205)          at org.w3c.domts.DOMTest.load(DOMTest.java:113)          at org.w3c.domts.level1.html.HTMLIFrameElement10.runTest(HTMLIFrameEleme  nt10.java:60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  34) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLMapElement01(org.w3c.d  omts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLMapElement01.runTest(HTMLMapElement01.j  ava:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  35) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLSelectElement08(org.w3  c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLSelectElement08.runTest(HTMLSelectEleme  nt08.java:96)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  36) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement01(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.NullPointerException          at org.w3c.domts.level1.html.HTMLTableElement01.runTest(HTMLTableElement  01.java:84)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  37) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement03(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.NullPointerException          at org.w3c.domts.level1.html.HTMLTableElement03.runTest(HTMLTableElement  03.java:84)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  38) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement05(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.NullPointerException          at org.w3c.domts.level1.html.HTMLTableElement05.runTest(HTMLTableElement  05.java:84)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  39) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement25(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLTableCaptionElementImpl          at org.w3c.domts.level1.html.HTMLTableElement25.runTest(HTMLTableElement  25.java:70)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  40) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement28(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.NullPointerException          at org.w3c.domts.level1.html.HTMLTableElement28.runTest(HTMLTableElement  28.java:72)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  41) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement29(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableElement29.runTest(HTMLTableElement  29.java:74)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  42) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement30(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLTableElementImpl          at org.w3c.domts.level1.html.HTMLTableElement30.runTest(HTMLTableElement  30.java:72)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  43) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement31(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableElement31.runTest(HTMLTableElement  31.java:75)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  44) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement32(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLTableElementImpl          at org.w3c.domts.level1.html.HTMLTableElement32.runTest(HTMLTableElement  32.java:67)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  45) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement33(org.w3c  .domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLTableElementImpl          at org.w3c.domts.level1.html.HTMLTableElement33.runTest(HTMLTableElement  33.java:66)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  46) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableRowElement11(org.  w3c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableRowElement11.runTest(HTMLTableRowE  lement11.java:78)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  47) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableRowElement12(org.  w3c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableRowElement12.runTest(HTMLTableRowE  lement12.java:77)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  48) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableRowElement13(org.  w3c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableRowElement13.runTest(HTMLTableRowE  lement13.java:76)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  49) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableRowElement14(org.  w3c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.html.dom.HTMLCollectionImpl          at org.w3c.domts.level1.html.HTMLTableRowElement14.runTest(HTMLTableRowE  lement14.java:76)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  There were 40 failures:  1) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLAppletElement05(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: codeBaseLink e  xpected:<xw2k.sdct.itl.nist.gov/brady/dom/files/> but was:<//xw2k.sdct.itl.nist.  gov/brady/dom/files/>          at org.w3c.domts.JUnitTestCaseAdapter.assertURIEquals(JUnitTestCaseAdapt  er.java:285)          at org.w3c.domts.DOMTestCase.assertURIEquals(DOMTestCase.java:254)          at org.w3c.domts.level1.html.HTMLAppletElement05.runTest(HTMLAppletEleme  nt05.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  2) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLAppletElement07(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: hspaceLink exp  ected:<0> but was:<6>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLAppletElement07.runTest(HTMLAppletEleme  nt07.java:83)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  3) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLAreaElement05(org.w3c.d  omts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: noHrefLink expec  ted:<false> but was:<true>          at org.w3c.domts.JUnitTestCaseAdapter.assertFalse(JUnitTestCaseAdapter.j  ava:71)          at org.w3c.domts.DOMTestCase.assertFalse(DOMTestCase.java:162)          at org.w3c.domts.level1.html.HTMLAreaElement05.runTest(HTMLAreaElement05  .java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  4) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument02(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: referrerLink expect  ed:<> but was:<null>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLDocument02.runTest(HTMLDocument02.java:  62)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  5) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument03(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: domainLink expected  :<> but was:<null>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLDocument03.runTest(HTMLDocument03.java:  62)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  6) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument04(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: URLLink          at org.w3c.domts.JUnitTestCaseAdapter.assertURIEquals(JUnitTestCaseAdapt  er.java:245)          at org.w3c.domts.DOMTestCase.assertURIEquals(DOMTestCase.java:254)          at org.w3c.domts.level1.html.HTMLDocument04.runTest(HTMLDocument04.java:  61)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  7) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument07(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: lengthLink expected  :<1> but was:<0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLDocument07.runTest(HTMLDocument07.java:  63)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  8) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument08(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: lengthLink expected  :<2> but was:<0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLDocument08.runTest(HTMLDocument08.java:  64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  9) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument09(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: lengthLink expected  :<3> but was:<0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLDocument09.runTest(HTMLDocument09.java:  64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  10) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument10(org.w3c.dom  ts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: lengthLink expecte  d:<1> but was:<0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLDocument10.runTest(HTMLDocument10.java:  63)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  11) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument11(org.w3c.dom  ts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: lengthLink expecte  d:<1> but was:<0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLDocument11.runTest(HTMLDocument11.java:  64)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  12) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLDocument12(org.w3c.dom  ts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: cookieLink expecte  d:<> but was:<null>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLDocument12.runTest(HTMLDocument12.java:  60)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  13) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLElement01(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: idLink expected:<Te  st-HEAD> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLElement01.runTest(HTMLElement01.java:81  )          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  14) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLElement30(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: titleLink expected:  <HEAD Element> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLElement30.runTest(HTMLElement30.java:81  )          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  15) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLElement59(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: langLink expected:<  en> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLElement59.runTest(HTMLElement59.java:81  )          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  16) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLElement88(org.w3c.domt  s.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: dirLink expected:<l  tr> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLElement88.runTest(HTMLElement88.java:81  )          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  17) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLElement117(org.w3c.dom  ts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: classNameLink expe  cted:<HEAD-class> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLElement117.runTest(HTMLElement117.java:  81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  18) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement01(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<center> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement01.runTest(HTMLHeadingEle  ment01.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  19) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement02(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<left> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement02.runTest(HTMLHeadingEle  ment02.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  20) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement03(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<right> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement03.runTest(HTMLHeadingEle  ment03.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  21) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement04(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<justify> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement04.runTest(HTMLHeadingEle  ment04.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  22) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement05(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<center> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement05.runTest(HTMLHeadingEle  ment05.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  23) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHeadingElement06(org.w  3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink ex  pected:<left> but was:<align>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHeadingElement06.runTest(HTMLHeadingEle  ment06.java:81)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  24) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLHtmlElement01(org.w3c.  domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: versionLink exp  ected:<transitional 4.0> but was:<transitional xhtml 1.0>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLHtmlElement01.runTest(HTMLHtmlElement01  .java:83)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  25) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLInputElement01(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: defaultValueLi  nk expected:<EarlyMornings> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLInputElement01.runTest(HTMLInputElement  01.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  26) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLInputElement02(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: defaultChecked  Link          at org.w3c.domts.JUnitTestCaseAdapter.assertTrue(JUnitTestCaseAdapter.ja  va:66)          at org.w3c.domts.DOMTestCase.assertTrue(DOMTestCase.java:158)          at org.w3c.domts.level1.html.HTMLInputElement02.runTest(HTMLInputElement  02.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  27) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLOptionElement03(org.w3  c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: defaultSelect  edLink          at org.w3c.domts.JUnitTestCaseAdapter.assertTrue(JUnitTestCaseAdapter.ja  va:66)          at org.w3c.domts.DOMTestCase.assertTrue(DOMTestCase.java:158)          at org.w3c.domts.level1.html.HTMLOptionElement03.runTest(HTMLOptionEleme  nt03.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  28) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLOptionElement08(org.w3  c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: selectedLink          at org.w3c.domts.JUnitTestCaseAdapter.assertTrue(JUnitTestCaseAdapter.ja  va:66)          at org.w3c.domts.DOMTestCase.assertTrue(DOMTestCase.java:158)          at org.w3c.domts.level1.html.HTMLOptionElement08.runTest(HTMLOptionEleme  nt08.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  29) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLSelectElement01(org.w3  c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: typeLink expe  cted:<select-multiple> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLSelectElement01.runTest(HTMLSelectEleme  nt01.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  30) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLSelectElement04(org.w3  c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: valueLink exp  ected:<EMP1> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLSelectElement04.runTest(HTMLSelectEleme  nt04.java:83)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  31) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement20(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink expe  cted:<center> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLTableElement20.runTest(HTMLTableElement  20.java:72)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  32) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement21(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: vsection1Id          at org.w3c.domts.JUnitTestCaseAdapter.assertNotNull(JUnitTestCaseAdapter  .java:80)          at org.w3c.domts.DOMTestCase.assertNotNull(DOMTestCase.java:170)          at org.w3c.domts.level1.html.HTMLTableElement21.runTest(HTMLTableElement  21.java:76)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  33) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement23(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: alignLink expe  cted:<center> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLTableElement23.runTest(HTMLTableElement  23.java:72)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  34) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement24(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: vsection1Id          at org.w3c.domts.JUnitTestCaseAdapter.assertNotNull(JUnitTestCaseAdapter  .java:80)          at org.w3c.domts.DOMTestCase.assertNotNull(DOMTestCase.java:170)          at org.w3c.domts.level1.html.HTMLTableElement24.runTest(HTMLTableElement  24.java:76)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  35) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement26(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: vsection1Id          at org.w3c.domts.JUnitTestCaseAdapter.assertNotNull(JUnitTestCaseAdapter  .java:80)          at org.w3c.domts.DOMTestCase.assertNotNull(DOMTestCase.java:170)          at org.w3c.domts.level1.html.HTMLTableElement26.runTest(HTMLTableElement  26.java:70)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  36) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableElement27(org.w3c  .domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: vsection1Id          at org.w3c.domts.JUnitTestCaseAdapter.assertNotNull(JUnitTestCaseAdapter  .java:80)          at org.w3c.domts.DOMTestCase.assertNotNull(DOMTestCase.java:170)          at org.w3c.domts.level1.html.HTMLTableElement27.runTest(HTMLTableElement  27.java:66)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  37) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTableRowElement01(org.  w3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: rowIndexLin  k expected:<1> but was:<2>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:176)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:211)          at org.w3c.domts.level1.html.HTMLTableRowElement01.runTest(HTMLTableRowE  lement01.java:89)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  38) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTextAreaElement01(org.  w3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: defaultValu  eLink expected:<TEXTAREA2> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLTextAreaElement01.runTest(HTMLTextAreaE  lement01.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  39) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTextAreaElement11(org.  w3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: typeLink ex  pected:<textarea> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLTextAreaElement11.runTest(HTMLTextAreaE  lement11.java:83)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)  40) http://www.w3.org/2001/DOM-Test-Suite/level1/html/HTMLTextAreaElement12(org.  w3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedError: valueLink e  xpected:<TEXTAREA1> but was:<>          at org.w3c.domts.JUnitTestCaseAdapter.assertEquals(JUnitTestCaseAdapter.  java:172)          at org.w3c.domts.DOMTestCase.assertEquals(DOMTestCase.java:207)          at org.w3c.domts.level1.html.HTMLTextAreaElement12.runTest(HTMLTextAreaE  lement12.java:85)          at org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:  53)    FAILURES!!!  Tests run: 517,  Failures: 40,  Errors: 49                application/octet-stream attachment: HTMLDocumentImpl.patch    application/octet-stream attachment: HTMLElementImpl.patch          

      I fixed up a few problems with the schema validity of the initial XPath   submission.  See http://www.w3.org/Bugs/Public/show_bug.cgi?id=186 or   attachment for details.      attached mail follows:  http://www.w3.org/Bugs/Public/show_bug.cgi?id=186               Summary: Initial XPath submission not schema valid             Product: DOM TS             Version: unspecified            Platform: All          OS/Version: All              Status: NEW            Severity: normal            Priority: P2           Component: DOM Level 3          AssignedTo: bclary@netscape.com          ReportedBy: carnold@houston.rr.com      The initial submission of XPath tests had a few issues against the DOM 3 schema.      alltests.xml and metadata.xml did not reference dom3.dtd which causes (probably  improperly) MSV to complain.    dom3xpathelements.ent called getFeature (which appears in multiple interfaces)  but didn't specify the required interface attribute.    evaluate01.xml and evaluate02.xml declared variables of type "Object" which  isn't a supported type and used evaluate (again on multiple interfaces) without  specifying interface.    The scheme did not allow the type attribute of the XPathEvaluator.evaluate  method to be an integer literal.        ------- You are receiving this mail because: -------  You reported the bug, or are watching the reporter.        

        I've logged bug 444 (http://www.w3.org/Bugs/Public/show_bug.cgi?id=444)   to the DOM TS to address the issues that were raised in this thread.    The existing L2 Core tests elementsetattributens01 and 03 appeared to   cover using a non-null namespace and a non-prefixed qualified name in   memory on a call to Element.setAttributeNS.  I added DOMWriterTest5 and   6 to check serialization of attributes added in this manner.        

      Most of that previous message was mistaken.  The object attribute is supposed to contain a URL locating a resource containing the serialization data for the applet, not the serialization data itself.    I've added a void main() to DOMTSApplet.java to produce a file containing the serialized content.  The JDK 1.1.8 serialization has been put in the CVS as java/applets/DOMTSApplet.dat and java/applets/org/w3c/domts/DOMTSApplet.class was updated.    I modified applet2.html and applet2.xml to reference DOMTSApplet.dat and they now properly display the DOM TS Applet in IE (HTML only) and Mozilla (HTML and XHTML).  Doesn't seem to change the test results for IE, but since the page is now correct and complete, then the test is reasonable.    Build has been updated to copy the DOMTSApplet.dat file to the HTML L1 and HTML L2 test directories.    applet.xml referenced the undefined org.w3c.domts.DOMTSApplet1.class.  While investigating this, I realized that we had lost the ability to test XHTML implementations.  I'll try to restore that this weekend.        

      A couple of weeks ago I added code to existing tests to check the behavior for Node.setNodeValue and then moved the Node.setNodeValue tests into distinct tests (nodesetvalue01-09) and restored the original state.  Well, for all except for nodedocumentfragmentnodevalue which I just updated.        

      Added more productions, but not all productions are there yet.   Should have all statement productions tomorrow.  http://home.houston.rr.com/curta/domtest/test2java.xsl        

      From: "Robert Clary" <bclary@netscape.com> wrote:  > This can be used for both Mozilla and Internet Explorer and I recommend  > that this approach be taken so long as external XML documents are  > loaded. Note, as far as I know, this is a non validating operation on  > both browsers and will result in tests which require an external DTD to  > be loaded to fail in both browsers.    I hadn't caught the last sentence which would prevent using this workaround  for almost all of the existing tests since they have external DTD subsets.  However, should be able to address the asych issue in the browser runner  since we can preload the document cache.        

      Dimitris Dimitriadis wrote:  >Could you put them in the domconftest CVS for issue tracking or do you  prefer to have them in >xmlconf?    Phillipe has requested that my public key added to the CVS server, but am  not sure if that  has been done and I have not attempted to access the CVS server.  So I'm not  sure that  I could add those files if I desired and I'll not be able to test that for  about 20 hours.    I'd like to feel like there was some consensus on the CVS directory  structure before  committing anything.    Putting them in the xmlconf CVS was strictly a matter of convienience.        

        Continuing a thread started in   http://lists.w3.org/Archives/Public/www-dom-ts/2002Jun/0038.html    >HTMLAreaElement06            CASE problem    expected rect but returned RECT (Test needs changed)  >  This is similar to the color tests described earlier in the day.      There is no specific instruction in   http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26019118 that   addresses the allowable changes to the case of attribute values (though   element and attribute tag names are explicitly addressed).  I think it   would be good to extend a case-insensitive comparision cause to include   any attribute value designated as case-insensitive in the HTML   recommendation.  Otherwise, we are just bending the tests to meet the   deployed implementations.        

      I committed a few changes to the submitted tests.  table53 had an stray minus sign and object05 had an extra quote.  blockquote01 referenced the obsolete HTMLBlockquoteElement (see section 2.5.5 of the DOM L1 errata http://www.w3.org/DOM/updates/REC-DOM-Level-1-19981001-errata.html), I've replaced it with the HTMLQuoteElement.  It would be more convienient to work with the new tests if they are placed into the tests/level1/html directory.  The existing NIST tests need to be reviewed, so it is not like adding the Netscape tests to the same directory would corrupt a pristine set of tests.        

          attached mail follows:  <div class="moz-text-flowed" style="font-family: -moz-fixed">I somehow missed committing DOMTestSuite.js with the first JSUnit 1.3.3   changes which would result in all the tests being unrunnable on all   platforms.  Updated now.    </div>        

      > I have sent this to www-dom@w3.org for a couple of days ago,  > but I did not really get an answer that I was satisfied with:    That forum is the appropriate one for issues and ambiguities in the  specification.  The DOM WG is the ultimate arbiter of interpretation and the  test group defers any controversy to them.    There did not appear to be a response to your question on www-dom in the  archive.  So I'm not sure if you got a private response that you aren't  satisified with or you didn't get any response.    There aren't any tests in the current (unratified) test suite that address  your specific scenario.    Code observation suggests that Xerces-J, Crimson, Xerces-C, and DOM4J would  all throw a HIERARCHY_REQUEST_ERR.        

      I took at stab at doing HTML compatible staff substitutes in tests/level1/core/files/hc_staff.xml and hc_staff.html.  Both pass the respective validation at http://validator.w3.org/check and display identically appropriately in IE and Mozilla.        

      Test nodeparentnodenull (DOM level 1)I have corrected this in the CVS.      I was suprised that this hadn't come up as a failure for some processor on the cast of an Element to a NodeList, however Xerces (and apparently Crimson) implement both NodeList and Element on the same class and the mistaken casts succeeded.  The problem wasn't detected in the ECMAScript bindings since there are no explicit casts and we haven't implemented any return type checking.    The improper type was in the original commit.      ----- Original Message -----     From: Mary Brady     To: Freek de Bruijn ; www-dom-ts@w3.org     Sent: Monday, November 19, 2001 10:45 AM    Subject: Re: Test nodeparentnodenull (DOM level 1)        Actually in the original test, it is an Element - it appears that the DOM L1 java binding     returns an Element from the createElement method that is used for the createdNode     variable.      --Mary      ----- Original Message -----       From: Freek de Bruijn       To: www-dom-ts@w3.org       Sent: Monday, November 19, 2001 5:43 AM      Subject: Test nodeparentnodenull (DOM level 1)          In the DOM level 1 test nodeparentnodenull, the variable createdNode is declared with type NodeList. I think this should be type Node. The line "<var name="createdNode" type="NodeList"/>" should probably be modified to "<var name="createdNode" type="Node"/>".        Regards, Freek         

        Jeroen van Rotterdam wrote:  > DOMBuilder has the following method:  >   > DOMBuilder.abort(String key)  >   > The generated dtd contains:  >   > <!ELEMENT abort EMPTY >  > <!ATTLIST abort  >     id ID #IMPLIED  >     obj CDATA #REQUIRED  >     interface (DocumentLS|DOMBuilder) #REQUIRED  >   > Which is lacking the key attribute.......  > Probably has something to do with the name "key"  >   >   > Any idea ?    The listing of DocumentLS and DOMBuilder as potential values for   interface would suggest that you generated the DTD from a draft where   both interfaces had an "abort" method (which isn't the case in the last   public draft).    Neither dom-to-dtd.xsl or dom-to-xsd.xsl is sufficiently smart enough to   fabricate a common element definition from conflicting definitions of   the same method name.  It generates the element from one (probably first   in document order in the combined spec) and assumes that any other use   will be compatible.  When that isn't the case, you have to suppress the   automatic generation and provide a hand-crafted element.  The exclusion   of 'load' on line 240 of dom-to-dtd.xsl is an instance of this effect.   (Related is a fixup in the dom?-combine.xsl that make the argument names   of Element.getElementsByTagName and Document.getElementsByTagName   identical).    You might review whether both "abort" methods are needed or whether   their arguments could be synchronized.    If you explicitly specify the interface attribute, the test-to-xxx.xsl   transforms should not have a problem.        

      Rick wrote:  This error looks similar to what was happening with some of the tests in IE.  It fails the Asize check for HTMLAnchorElement01 and passes the Asize  check for HTMLAnchorElement02.  Both tests are using the same file so  I don't understand why one would pass and one would fail.    Do they fail when run in isolation?  I don't have time to check right now.  If they work in isolation, but fail in when run in the suite, a test might  be lying about whether it modifies its test document and a subsequent test  gets a corrupted test document.        

        I've added some tests based on coverage analysis under bug 401.  The   most significant are a series of approximately 19 tests in L3 Core   (domconfig*) that test DOMConfiguration.getParameter/setParameter and   canSetParameter for each property defined in L3 Core.  Additional tests   will need to be added to check that they actually accomplish what they   should.    I've also fixed the test failure with nodegettextcontent14 (bug 461)   from the conversion of XHTML data files and added nodegettextcontent19   to check that element content whitespace is stripped from textContent.        

         From http://www.w3.org/TR/DOM-Level-3-Core/core.html#domURIs          Note: In the DOM, all namespace declaration attributes are by      definition bound to the namespace URI:      "http://www.w3.org/2000/xmlns/". These are the attributes whose      namespace prefix orqualified name is "xmlns". Although, at the time      of writing, this is not part of the XML Namespaces specification      [XML Namespaces], it is planned to be incorporated in a future revision.    It appears that Namespaces 1.1 introduces that namespace URI and could   be explicitly mentioned.        

        I've committed the files the Neil submitted.  As submitted all tests   successfully compiled and there were no build problems.    Running the tests as submitted against the Xerces head and Oracle's last   XDK 10 beta resulted in almost all tests failing.  I'm working through   the issues to try to get a reasonable set of errors.    A pervasive cause of failures when using XDK is the parser not allowing   whitespace between the ] and > of a document type declaration while   appears in most of the newly introduced test files.  The production in   the XML rec indicates that whilespace is allowable there and the failure   to accept it should be an XML conformance issue.  However, it isn't a   big enough issue to warrant all the tests failing.  I'm planning on   modifying the test files to eliminate the whitespace.    staffNSStandalone.xml fails validation with Xerces-J (not sure what   version) with a message "White space must not occur between elements   declared in an external parsed entity with element context in a   standalone document."    Many of the other tests fail do to recent spec additions or renaming and   I will take an approach similar to the adaption of the ls tests to XDK   by creating variant jars to work around these problems.        

        Edward Hieatt wrote:    > Hi Curt,  >  > Could you give me the list of changes that you made?  I have the new   > files and the diff against the current version of JsUnit, but I'd like   > a description of your changes too.  >        http://lists.w3.org/Archives/Public/www-dom-ts/2002Jun/0026.html tried   to describe the overall goal of the changes and was written at the time   of the effort.        

        test-to-java.xsl has been updated to add a (short) to a numeric literal used  as a short or unsigned short parameter.           

      There are several open-source implementations (Xerces-C, Xerces-J, Crimson,  Mozilla, DOM4J, libxml, etc) that you can examine for implementation  patterns, asking the list for an narrative when you can see through running  code from several independent (but conforming) implementations seems to be a  poor use of time.    In Xerces-C's implementation  (http://cvs.apache.org/viewcvs.cgi/xml-xerces/c/src/dom/NamedNodeMapImpl.cpp  )  , a linked list of attributes was walked to implement getAttributeNS et al.  Since the number of attributes on an element are typically small, an more  complicated algorithm could be slower than just a simple walk through the  elements.    http://cvs.apache.org/viewcvs.cgi/xml-xerces/java/src/org/apache/xerces/dom/  NamedNodeMapImpl.java appears to be similar.    Crimson also appears to use a simple linear search  http://cvs.apache.org/viewcvs.cgi/xml-crimson/src/org/apache/crimson/tree/At  tributeSet.java    DOM4J also uses a linear search (attribute method around line 315)  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/dom4j/dom4j/src/java/org/dom4  j/dom/DOMElement.java    It seems like most implementators thought that using a hash map algorithm is  overkill for attribute lists.    >  So,please tell me,according to DOM specification what  >  should be the key of NamedNodeMap?Is it  >  qualifiedName(two-part name containing prefix and  >   localName) or two-part name  >   containing localName and namespaceURI?    The DOM specification doesn't tell you how you have to implement it, not  what the results have to be.  Per the previous patterns, you can definitely  implement NamedNodeMap without using something like an std::map.  However,  if you were going to use std::map's and were trying to achieve the  prescribed behavior, your NamedNodeMap would have to have two independent  maps, one keyed by the "full" name and one keyed by {namespaceURI,  local-name}.  If you were trying to use an existing map class that used a  string key, you could create a concatentate the namespaceURI, a space (which  is not legal in a URI or a local-name), and the local name.  If the  namespaceURI was null, you could just use the local name as a key.    However, given the relative small size of most attribute lists, the cost of  maintaining two distinct hash-maps is probably not justified.    You seem intent on writing your own DOM implementation, though you haven't  explained your motivation.  Since there are several implementations that  have very generous licensing terms, it would seem that you could take one of  those and then apply any performance tweaks you need for your specific  application.  At least, you should have a fairly good understanding of the  existing public implementations (and their performance characteristics)  before you start.        

        Jeroen van Rotterdam wrote:  > It would be helpfull if we would have an assertContains for a domstring.  >   > something like:  >   > <assertContains value="avalue" obj="astring" id="check_substring"/>  >   >   > jeroen  >     Instead of adding an explicit assertContains and assertContainsNot, I   added contains to the list of conditions which allows it to be used with   <assertTrue>, <assertFalse>, <if>, <or>, <and>, etc.       <assertTrue id="containsFoo">         <contains obj="stringDoc" substring='"foo"'/>     </assertTrue>       <assertFalse id="doesntContainFoo">         <contains obj="stringDoc" substring='"foo"'/>     </assertTrue>        

        Element.setIdAttribute and similar all start with basically the same text:          Declares the attribute specified by name to be of type ID, i.e. the      Attr node becomes a user-determined ID attribute and its attribute      Attr.isId will be true. Note, however, that this simply affects the      attribute Attr.isId of the Attr node and does not change any schema      that may be in use, in particular this does not affect      theAttr.schemaTypeInfo of the specified Attr node.    The spec does not address what should occur if the value of the   attribute does not match the Name production (which would be required to   be "of type ID").  Other methods where values must be valid names (for   example, createElement) throw an INVALID_CHARACTER_ERR when something   that should match the Name construct does not.    My suggestion would be to remove "of type ID" from the description of   these methods.  Something like:          Declares the specified attribute to be a user-determined ID      attribute. This affects the value ofAttr.isId of the Attr node and      the behavior of Document.getElementById, but does not change any      schema that may be in use, in particular this does not affect      theAttr.schemaTypeInfo of the specified Attr node.        

        There was no transform in test-to-java.xsl for overriden property accessors.  I've committed changes to test-to-java.xsl that will now take:    <whatToShow>      <return value="&SHOW_ELEMENT;"/>  </whatToShow>    and produce    class ... implements DOMFilterBuilder {  ...     public long getWhatToShow() {          return 1;     }  }    I've committed a modified version of your test as tests/level3/ls/test1.xml  and added a "dom3-ls-javac" target to build.xml.    > I'd also like to know how you can refer to constants defined in other  > interfaces,e.g. NodeFilter.SHOW_ELEMENT.    What you were doing to make FILTER_REJECT and FILTER_ACCEPT visible  exploited too much knowledge of how DOMTSML tests were translated to Java  and would not allow us to generate other language bindings.  Symbolic  constants, if needed, should be done via entity expansion (as shown in my  modification of your test) or expressed as literals (as in all the existing  core tests that check that nodeValue is 1 or 3 or whatever).    If we want to make tests like assert(NodeFilter.SHOW_ELEMENT,1) then we will  need to add some specific test construct that will properly handle the lack  of these constants in JavaScript.  Those should be separate tests than  testing the implementation which should be independent of whether  NodeFilter.SHOW_ELEMENT returns the specified value.      ----- Original Message -----  From: "Jeroen van Rotterdam" <jvrdam@xs4all.nl>  Sent: Sunday, August 11, 2002 6:43 AM  Subject: need help, level 3 test      > Attached is a filter test which generated test1.java if you leave out the  > <whatToShow...> element.  > Can someone have a look at this and tell me how you would have to specify  > <whatToShow> in this case (I've been staring on it a while now) ?  > I'd also like to know how you can refer to constants defined in other  > interfaces,e.g. NodeFilter.SHOW_ELEMENT.  > Thanks in advance,  >  > Jeroen  > =====  > X-Hive Corporation  > Jeroen van Rotterdam, CEO  > e-mail: jeroen@x-hive.com  > phone: +31 10 7108600  > http://www.x-hive.com  >  >  >  >        

      I've just updated the CVS with a substantial amount of work that now will now allow a DOM 1 Core test suite to be generated, compiled and run using JUnit.    The process assumes that you have populated the tests/level1/core with test definitions and files/level1/core with corresponding data files.  I've tested this with an ad-hoc collection of about 200 tests.    To build dist/dom1-core.jar which contains the compiled tests, java source code (for test failure analysis) and data files.    ant dom1-core-jar    To build junit-run.jar which contains the JUnit support classes to run any test jar:    ant junit-run    To run a test case or test suite:    Put dom1-core.jar, junit-run.jar, junit.jar from JUnit 3.7 (http://www.junit.org) and a JAXP 1.1 compatible parser (such as xerces.jar) in one directory (or on the classpath)    java -jar junit-run.jar testclassname    For example,    java -jar junit-run.jar org.w3c.domts.level1.core.attrCreateDocumentFragment      To define a suite of tests, create an XML file in the test directory that looks like:    <?xml version="1.0" encoding="UTF-8"?>  <!DOCTYPE suite SYSTEM "dom1.dtd">  <suite name="coreAll" targetURI="http://www.w3.org/2001/DOM-Test-Suite/level-1/core/coreAll.xml" xmlns="http://www.w3.org/2001/DOM-Test-Suite/level-1/Test-Definition" package="org.w3c.domts.level1.core">  <suite.member href="attrCreateDocumentFragment.xml"/>  <suite.member href="attrCreateTextNode.xml"/>  <suite.member href="attrDefaultValue.xml"/>  <suite.member href="attrEffectiveValue.xml"/>  ...    </suite>    The test harness will run throw the test suite twice (currently), once with expandEntityReferences, ignoringElementContentWhitespace, namespaceAware, and validating = false and once with all those properties set to true.  If a test (or suite) is only appropriate for a particular setting, then the required values need to be asserted in the prolog of the test.  For example,    <test...>      <implementationAttribute name="namespaceAware" value="false"/>    The generated code attempts (haven't tested it yet) to change the settings just for this case to be compatible with the requirements of this test.    The test-to-java transform will now copy any comment in the test definition that contains the string "Copyright" to the generated Java code.        

        I've updated build.xml and dom3-combine.xsl for the new L3 Core working   draft.   For more details, see   http://www.w3.org/Bugs/Public/show_bug.cgi?id=221.    The changes in the Core working draft invalidated one of the Load/Save   tests, DOMInputSourceTest3 that depended on Document.encodingString   which was apparently removed   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=222).  If you have a   recommendation for resolving the issue, please reply or add a comment to   the bug.    I had fairly good luck using Clover (http://www.thecortex.net/clover,   commercial but offers free licenses for open-source work) to generate an   HTML report showing the test coverage of Xerces-J's DOM implementation.    If anyone is interested, I'll do a refresh and post a coverage map.  If   there are other suggestion for coverage tools, please let me know.    If you are working on any L3 tests, please give the list a heads up.        

        Just to confuse things, I've been busy the last few days too.    Hopefully, Bob can reconcile these, but right now we are diverging.    I wasn't satisified with the test format in Bob's previous offering   since it didn't look much like a JUnit test and possible involved   putting stuff in JSUnit that was DOM Test suite aware (not sure about   that).  JUnit had (but JSUnit didn't) have the concept of a TestCase   class.  In most cases, you just let the framework create TestCase   objects that invoked your "test" methods by reflection.  However, you   could create your own classes derived from TestCase as we do in the Java   tests.    In my variant of Bob's previous JSUnit, I've added an equivalent to the   JUnit TestCase class.  The generated tests override the setUp, runTest   and tearDown methods of the test class.  The tweaks I added are the   ability for the setUp method to mark the test as ignored (for example,   if the test requires entity expansion and the implementation doesn't   support it) or not ready (for async loading).    Here is a sample of a test body:       function attrname_runTest()  {      var doc;        var addressList;        var testNode;        var attributes;        var streetAttr;        var name;        doc = this.builder.load(this.doc, "doc", "staff");        addressList = doc.getElementsByTagName("address");        testNode = addressList.item(1);        attributes = testNode.attributes;          streetAttr = attributes.getNamedItem("street");        name = streetAttr.nodeName;          assertEquals("nodeName","street",name);         name = streetAttr.name;          assertEquals("name","street",name);          }    function attrname_setUp() {      var attrs = [  ];      var features = [  ];      this.builder = getBuilder(this, null, attrs, features);      if (!this.ignored) {          this.ready = this.ready && !this.builder.async;          this.doc = this.builder.startLoad("doc", "staff");      }  }      function attrname_tearDown() {      this.builder.close(this.doc);      this.doc = null;  }    function suite() {      var test = new DOMTestCase("attrname");      test.runTest = attrname_runTest;      test.tearDown = attrname_tearDown;      test.setUp = attrname_setUp;      return test;  }    The getBuilder() will cause the test to be ignored if the attributes and   features are not compatible with the builder.  I've written a few   different builder implementations (MSXML, DOM 3 LS, Mozilla   document.load and an <iframe> loader).  To change builders currently you   have to modify DOMTestSuite.js.      function getBuilder(test, contentType, attributes, features) {  //    return new MSXMLBuilder(test, contentType, attributes, features,   "MSXML2.DOMDocument.3.0");  //      return new DOM3XMLBuilder(test, contentType, attributes, features);  //      return new MozillaXMLBuilder(test, contentType, attributes,   features);        return new IFrameBuilder(test, "text/html", attributes, features);    }       This setting uses the IFrameBuilder to load .html documents.  Replace   "text/html" with contentType to load .xml documents.    I was not able to get notified when I trying to add an iframe   dynamically with document.writeln(), however it seems simpler to just   generate the <iframe> elements into the test HTML files.    Document loading is performed by two calls, startLoad() in setUp and   load() in runTests.    I've also added jsUnitCore.js to the files included in testRunner.html.    That allows tests that want to avoid path dependencies to access   jsUnitCore methods by using top.assertEquals(), etc.    I've run the DOM L1 Core and L1 HTML tests with Mozilla 1.0 for both XML   and HTML documents.  Currently DOMTestSuite.js is hacked to suppress   tests that use the extended interfaces (now marked with   hasFeature("XML",""), since Mozilla XML doesn't attempt to parse the   document type declaration.  The majority of failures are due to failing   to throw an exception.    Unfortunately, I was not able to run the tests on Microsoft Interface   Explorer.  When the first test failed, I would get an exception not   captured message even though the runTest method was clearly within the   scope of a try/catch block.  It is possible that I dorked something on   my machine settings that is causing it to act that way.    Modifications to the tests fell into these categories:    DOM L1 Core tests that depended on extended interfaces (CDataSection,   Entity, EntityReference, etc) were marked as requiring   hasFeature("XML","") as true.    Changed ignoreCase to "auto" on L1 Core hc_* tests and L1/L2 HTML tests   where HTML implementations are expected to return uppercase.    Changed some bad expected values on HTMLParam01 and 02.    My hacked version of JSUnit is http://home.houston.rr.com/curta/jsunit.zip        

        The XPath spec should specify the expected return value for a call of   getFeature("XPath", version) for all node types.  I would assume this   would be an XPathEvaluator for Document and null for all other node types.        

      Dimitris Dimitriadis wrote:  >general remark: the ecmascript/tests folder is very strange, contains  >files with truncated filenames (problem with file name length?), several  >similar files, eg. documentinvalidcharacterexcepti,  >documentinvalidcharacterexc.1, documentinvalidcharacterexc.2 and  >documentinvalidcharacterexc.3  >  >Problems during the build or file system related?    I don't see that in my local copy of the tar.gz.  Though I often see  warnings in other open source projects that .tar.gz files must be extracted  using GNU tar (or compatible) since earlier Unix tar's apparently had  filename limits.  The distribution produces both a .zip and a .tar.gz, but I  only uploaded the .tar.gz since the .zip was much larger and I didn't have  enough space on my personal home page.    >[dd] True, but we need to decide whether to have the source there, both  >for Java and ECMA, just in case people want to write their own harness.  >I'd go for including them, which is why I had them in my distribution  >sent earlier.    The Java source is provided in the dom1-core.jar.  The .js standalone code  is not usable by any known test framework.  I thought providing it would be  confusing since people may set breakpoints on the .js file, not realizing  that the running code is actually within the .html pages.    >OK, but we still don't want to release before having the patches  >built into a release of JsUnit?    I'd prefer that we don't, but this would be tolerable.    >  > The test matrix now has links to both the XML source and Doxygen  > documentation for each test since Mozilla doesn't display raw XML in a  > pleasing manner.  >  [dd] Several of the links to the Java source didn't work.    Possibly the same issue with filename truncation.    >2. index.htm on the CVS. I don't see the point for this, except if we  >manage to automate title, date creation (releases will vary as to when  >they are released) and other things to make it relevant for the  >particular distribution created    The idea is that anyone with the right tools installed can come back and  generate any specific release by checking out properly tagged sources from  the CVS and building.  In our case that depends that several external  resources remain available and unchanging (the DOM specs, JUnit, JSUnit).    I cheated (it was getting really late) and did not do a "ant clean" before  "ant dom1-core-dist" and inadvertantly provided xercesImpl.jar and  xmlParserAPIs.jar in my distribution.  The proper way to do the distribution  is to do a full checkout of the CVS sources to a clean directory and then  run "ant dom1-core-dist" to ensure that no uncommitted file is participating  in the build.        

      I've just committed changes to the NIST tests that allow them to pass DTD validation.  The changes were extensive, however most were only typographical fixes, such as changing DOMString to String and actual for actuel.  The other most common fix was adding variables for methods that had a return value but did not have a var attribute.    There were a few changes that were significant.    Changes to DTD and Schema    a) added boolean as a variable type to DTD and schema  b) removed enumerated values for hasFeature, hasFeature now takes arbitrary string literals.  c) assertTrue and assertFalse in DTD inadvertantly required a conditional child element (the schema had it correct as an optional element).    Changes to Tests    I moved two tests to level2/core since the depended on behaviors defined in the Level 2 spec and thus could not be validated against the DOM 1 DTD and a two others since they called hasFeature with version="2.0"    attrsetvaluenomodificationallowederr.xml attempted to raise a DOMException with code=NO_MODIFICATION_ERR on when attempting to set Node.value.  This was not defined in the Level 1 spec but was added to the Level 2 spec.    elementsetattributensurlnull.xml calls Element.setAttributeNS which was added in Level 2.    domimplementationfeaturexmlversion2.xml expected true from hasFeature("XML","2.0");    domimplementationfeaturecore.xml called hasFeature("core","2.0").  Feature "Core" was not defined in the DOM 1 spec.    ------------------    notationgetsystemid.xml used string manipulation functions not defined in the DTD or schema to attempt to compensate for the DOM implementation returning an absolute URI for Notation.systemId.  Since I do not believe that is an appropriate behavior, I've commented out the fragment that tried to crack the URI.    -------------------    documenttypegetentities.xml attempts to implement a sort, again using elements not in the DTD, to implement a order independent comparision.  Since I had already provided that by assertEquals if you passed in Collections (which are unordered) instead of Lists (which are ordered), I gutted the sorting code.        

      > [mb] I expect that the jsunit version is based on the initial NIST  > ECMAScript  > tests?  If so, I wouldn't start from here -- it has not been updated to  > include  > info we learned from doing the java tests -- in particular, info that we  > learned  > regarding whitespace, entity expansion, etc., and is probably slanted  > towards  > MSXML, since that's what we had available at the time.  In addition, those  > tests were dependant on either synchronous load capabilities, or data  > islands.    That one is actually a transliteration of the NIST Java tests running under  JsUnit.  In the domunit effort, I took the NIST Java tests, converted to  JUnit and then transliterated to ECMAScript and JsUnit and Xerces-C and  CppUnit.    Apparent lack of synchronous load capabilities in Netscape/Mozilla does  complicate the issue substantially since the existing test frameworks expect  a test to be complete when control returns from the runTest() method instead  of having the results available at some later time (or potentially never  getting the results from a test).    I've been thinking about the feasibility by loading a pool of XML documents  on test framework load and satisifying the load() method in the tests from  that pool.  If the pool became empty, you could put up an annoying alert()  box (I haven't found a way to kill time other than that) while the  previously initiated parse requests are completed.  You could put an event  listener on the document and only remove the document from the pool if you  saw an real mutation (instead of all the attempted mutations that should  have been blocked by an exception check).  Implementations that support  synchronous parsing, could avoid all that.    > His work is based on some of the earlier schema work, and has to be  updated  > to  > be consistent with the present schema files.  I'll spend some time today  > trying to  > get it to work on my end, and post the results.  I'm sure the user  interface  > will  > need some work, but it's a logical starting point.    Great.    However, can't marry ECMAScript exclusively to HTML since we would also like  to test ECMAScript and SVG.        

      I ran the DOM L1 tests against the 2001111303 build.  I've tried to do a  quick categorization.      Category 1: Mozilla crashes  suite.member href="characterdataindexsizeerrdeletedatacountnegative.xml  suite.member href="characterdataindexsizeerrreplacedatacountnegative.xml  suite.member href="characterdataindexsizeerrsubstringcountnegative.xml    ----------------------  Category 2: Document.getDoctype returns null, all DTD related tests fail    14.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentgetdoctype had an error  Error message is:  "TypeError: docType has no properties"    19.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetdoctype had an error  Error message is:  "TypeError: docType has no properties"    20.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetentities had an error  Error message is:  "TypeError: docType has no properties"    21.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetentitieslength had an error  Error message is:  "TypeError: docType has no properties"    22.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetentitiestype had an error  Error message is:  "TypeError: docType has no properties"    23.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetnotations had an error  Error message is:  "TypeError: docType has no properties"    24.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumenttypegetnotationstype had an error  Error message is:  "TypeError: docType has no properties"    34.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testentitygetentityname had an error  Error message is:  "TypeError: docType has no properties"  35.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testentitygetpublicid had an error  Error message is:  "TypeError: docType has no properties"    36.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testentitygetpublicidnull had an error  Error message is:  "TypeError: docType has no properties"    43.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodedocumenttypenodename had an error  Error message is:  "TypeError: docType has no properties"    44.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodedocumenttypenodetype had an error  Error message is:  "TypeError: documentTypeNode has no properties"    45.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodedocumenttypenodevalue had an error  Error message is:  "TypeError: docType has no properties"    47.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentitynodeattributes had an error  Error message is:  "TypeError: docType has no properties"      48.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentitynodename had an error  Error message is:  "TypeError: docType has no properties"      49.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentitynodetype had an error  Error message is:  "TypeError: docType1 has no properties"      50.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentitynodevalue had an error  Error message is:  "TypeError: docType has no properties"    55.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodenotationnodeattributes had an error  Error message is:  "TypeError: docType has no properties"      56.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodenotationnodename had an error  Error message is:  "TypeError: docType has no properties"    57.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodenotationnodetype had an error  Error message is:  "TypeError: docType has no properties"      58.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodenotationnodevalue had an error  Error message is:  "TypeError: docType has no properties"    67.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnotationgetnotationname had an error  Error message is:  "TypeError: docType has no properties"      68.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnotationgetpublicid had an error  Error message is:  "TypeError: docType has no properties"      69.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnotationgetpublicidnull had an error  Error message is:  "TypeError: docType has no properties"      70.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnotationgetsystemid had an error  Error message is:  "TypeError: docType has no properties"      71.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnotationgetsystemidnull had an error  Error message is:  "TypeError: docType has no properties"    75.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testtextsplittextnomodificationallowederrEE had an error  Error message is:  "TypeError: entRef has no properties"  ----------------------  Category 3: Default values from DTD not used    1.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testattrdefaultvalue had an error  Error message is:  "TypeError: streetAttr has no properties"    2.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testattrnotspecifiedvalue had an error  Error message is:  "TypeError: streetAttr has no properties"    4.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testattrspecifiedvalueremove had an error  Error message is:  "TypeError: streetAttr has no properties"    11.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentcreateelementdefaultattr had an error  Error message is:  "TypeError: child has no properties"    27.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementremoveattribute failed  "elementRemoveAttributeAssert"  Expected Yes (string) but was null (object)    30.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementremoveattributerestoredefaultvalue failed  "elementRemoveAttributeRestoreDefaultValueAssert"  Expected Yes (string) but was null (object)    31.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementretrieveallattributes failed  "elementRetrieveAllAttributesAssert"  Expected 2 (number) but was 1 (number)    38.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnamednodemapremovenameditem had an error  Error message is:  "TypeError: streetAttr has no properties"    39.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnamednodemapremovenameditemgetvalue had an error  Error message is:  "TypeError: streetAttr has no properties"    -------------------------  Category 4: "" returned when null specified    9.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentcreatedocumentfragment failed  "value"  Expected null but was    10.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentcreateelement failed  "valueInitiallyNull"  Expected null but was    42.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodedocumentfragmentnodevalue failed  "initiallyNull"  Expected null but was    46.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeelementnodevalue failed  "nodeElementNodeValueAssert1"  Expected null but was    ---------------------  Category 5: Document.createEntityReference returns null    3.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testattrsetvaluenomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: attrsetvaluenomodificationallowederrEE_runTest :: line 565"  data:  no]"    5.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testcharacterdataappenddatanomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: characterdataappenddatanomodificationallowederrEE_runTest :: line  1012"  data: no]"    6.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testcharacterdatadeletedatanomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: characterdatadeletedatanomodificationallowederrEE_runTest :: line  1353"  data: no]"    7.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testcharacterdatainsertdatanomodificationallowederrEE had an error  Error message is:  "TypeError: entReference has no properties"    8.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testcharacterdatasetdatanomodificationallowederrEE had an error  Error message is:  "TypeError: entReference has no properties"    12.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentcreateentityreference failed  "notNull"  Expected not to be null    13.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentcreateentityreferenceknown had an error  Error message is:  "TypeError: newEntRefNode has no properties"    28.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementremoveattributenodenomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: elementremoveattributenodenomodificationallowederrEE_runTest :: line  4945"  data: no]"    29.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementremoveattributenomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: elementremoveattributenomodificationallowederrEE_runTest :: line 5065"  data: no]"    32.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementsetattributenomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: elementsetattributenomodificationallowederrEE_runTest :: line 5615"  data: no]"    51.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentityreferencenodename had an error  Error message is:  "TypeError: entRefNode has no properties"      52.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentityreferencenodetype had an error  Error message is:  "TypeError: entRefNode has no properties"    53.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeentityreferencenodevalue had an error  Error message is:  "TypeError: entRefNode has no properties"    63.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnoderemovechildnomodificationallowederrEE had an error  Error message is:  "TypeError: entRef has no properties"    65.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodereplacechildnomodificationallowederrEE had an error  Error message is:  "TypeError: entRef has no properties"    66.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodesetnodevaluenomodificationallowederrEE had an error  Error message is:  "TypeError: entRef has no properties"    ----------------------  Category 6: Invalid character exception not raised    15.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentinvalidcharacterexceptioncreateattribute failed  "documentInvalidCharacterExceptionCreateAttributeAssert"  Call to assertTrue(boolean) with false    16.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentinvalidcharacterexceptioncreateelement failed  "documentInvalidCharacterExceptionCreateElementAssert"  Call to assertTrue(boolean) with false    17.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentinvalidcharacterexceptioncreateentref failed  "documentInvalidCharacterExceptionCreateEntRefAssert"  Call to assertTrue(boolean) with false    18.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testdocumentinvalidcharacterexceptioncreatepi failed  "documentInvalidCharacterExceptionCreatePIAssert"  Call to assertTrue(boolean) with false    26.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementinvalidcharacterexception failed  "elementInvalidCharacterExceptionAssert"      -----------  Category 7: Processing instruction not preserved?    59.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeprocessinginstructionnodeattributes failed  "nodeProcessingInstructionNodeAttrAssert1"  Expected null but was [object NamedNodeMap]      60.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeprocessinginstructionnodename failed  "nodeProcessingInstructionNodeNameAssert1"  Expected TEST-STYLE (string) but was staff (string)    61.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeprocessinginstructionnodetype failed  "nodeProcessingInstructionNodeTypeAssert1"  Expected 7 (number) but was 1 (number)      62.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeprocessinginstructionnodevalue failed  "value"  Expected PIDATA (string) but was  (string)    72.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testprocessinginstructiongetdata failed  "processinginstructionGetTargetAssert"  Expected PIDATA (string) but was undefined (undefined)    73.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testprocessinginstructiongettarget failed  "processinginstructionGetTargetAssert"  Expected TEST-STYLE (string) but was undefined (undefined)    74.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testprocessinginstructionsetdatanomodificationallowederrEE had an error  Error message is:  "[Exception... "Component returned failure code: 0x80004003  (NS_ERROR_INVALID_POINTER) [nsIDOMElement.appendChild]"  nsresult:  "0x80004003 (NS_ERROR_INVALID_POINTER)"  location: "JS frame ::  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml :: processinginstructionsetdatanomodificationallowederrEE_runTest :: line  12645"  data: no]"      ----------------  Category 8: IN_USE_ATTRIBUTE not thrown    25.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementinuseattributeerr failed  "throw_INUSE_ATTRIBUTE_ERR"  Call to assertTrue(boolean) with false  Call to assertTrue(boolean) with false    37.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnamednodemapinuseattributeerr failed  "namednodemapInUseAttributeErrAssert"  Call to assertTrue(boolean) with false    ---------------  Category 8: WRONG_DOCUMENT_ERR not thrown      41.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeappendchildnewchilddiffdocument failed  "nodeAppendChildNewChildDiffDocumentAssert1"  Call to assertTrue(boolean) with false    33.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testelementwrongdocumenterr failed  "elementWrongDocumentErrAssert"  Call to assertTrue(boolean) with false      40.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnamednodemapwrongdocumenterr failed  "namednodemapWrongDocumentErrAssert"  Call to assertTrue(boolean) with false      54.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodeinsertbeforenewchilddiffdocument failed  "throw_WRONG_DOCUMENT_ERR"  Call to assertTrue(boolean) with false        64.  file:///D:/domts/2001/DOM-Test-Suite/build/ecmascript/level1/core/mozsafe.ht  ml:testnodereplacechildnewchilddiffdocument failed  "throw_WRONG_DOCUMENT_ERR"  Call to assertTrue(boolean) with false        

        ----- Original Message -----  From: "Dimitris Dimitriadis" <dimitris.dimitriadis@improve.se>  <www-dom-ts@w3.org>  Sent: Tuesday, August 07, 2001 7:07 AM  Subject: SV: [General] Status?      > I'm back from my vacation and would like to do a quick check on the items  > list posted earlier and listed below.  >  > I think we are ready to move quite fast toward publishing the DOM TS if we  > allow for the following:  >  > 1. Some period to sanity check and edit existing transforms and build  files.    I don't expect the Java transform to be perfect, however I think that when  we start to walk through the NIST contributed tests, we will quickly  identify latent issues.    I have worked a little on a ECMAScript transform but haven't written enough  supporting code to run the few tests that I have generated.    Haven't done anything on Python.      > 2. A general discussion as to whether ANT will be used as the primary tool  > for builds.    I thought it was the most appropriate tool.  What alternatives would you  like to suggest?    > 3. A general discussion as to whether people wanting to download the files  > themselves should be able to do this to both build the DOM TS as well as  > write their own harness around it.    The W3C CVS has anonymous read-access so unless we intentionally want to  prevent people from accessing the source, they are technically capable of  doing it.  Since the most significant audience for the test source and  harnesses are parser authors, I don't think that it is necessary to provide  an easier way to get at the source.    The standoff over using the W3C Software License was explicitly to allow  legitimate deriviative works.  I only made my contributions after I thought  this issue was resolved.  Reversing that decision and making the tests or  harness non-public would be detrimental to the effectiveness of the suite  and would do seriously bad things to my attitude.    > 4. Release of NIST tests, sanity check, editing, being done.    I understand NIST's desire not to publish anything that isn't almost  perfect.  But it is impossible to determine any coverage issues and  discourages anyone else from trying to contribute tests until the NIST tests  are committed to the CVS (which will hopefully happen shortly).    > 5. Production of documentation, being done.  >  > I think all other issues that have been raised have been solved. Please  > advise if this is not the case.  >  > Kind regards,  >  > /Dimitris        

        I believe it would be beneficial to add a HTMLFormControl interface to   be used as a common ancestor interface for the form control interfaces.    This should have no end-user detectable affect from scripting languages   since the existing interfaces share identically named attributes.    However, it would allow strongly-typed languages to operate on the   common attributes of form controls without resorting to reflection.    For example, in JavaScript you could do:    var controls = form.elements();  for(var i = 0; i < controls.length; i++) {      controls.item(i).disabled = true;  }    But you could not readily do the equivalent in Java.    The interface could look something like:    interface HTMLFormControl : HTMLElement {      readonly attribute HTMLFormElement form;      attribute DOMString name;      attribute DOMString value;     attribute boolean disabled;      //      //   these attributes are not currently in all form control interfaces      //         attribute DOMString defaultValue;     attribute DOMString accessKey;     attribute long tabIndex;  }        

        I spent a large part of the weekend working on the L1 HTML DOM tests.  I   think the current state is very close to eliminating all invalid tests.    I've modified my JSUnit (http://home.houston.rr.com/curta/jsunit.zip)   so that it works with both Mozilla 1.0 and IE 6.  IE apparently has   problems with exceptions thrown in a member function being caught in   code located in a different directory (you can see this by commenting   out attemptTest in DOMTestCase.js, Mozilla will let the exception be   caught in attemptTest in jsUnitTestCase, IE won't).    First, the files collection contained a large number of invalid HTML and   XML documents.  Most common was to mark a transitional document as   strict.  I believe the files can be copied over directly to HTML L2.    There were several documents that contained attributes that were   intended to set values in the corresponding object.  For example,   link.html had a DISABLED attribute on a LINK element attempting to cause   the disabled attribute on the corresponding object.  However, DISABLED   was not defined as an attribute in HTML 4.01.  HTMLObject.code is   similarly unsettable.    About a third of the HTMLSelect tests had been failing with size   assertions.  What was happening on these tests was that both IE and NN   were adding implied TBODY elements, probably to try to simplify the   implementation of HTMLTable.tbodies attribute..  The tests did not   account for this "modification" of the document on load.  I modified the   test document to make the TBODY explicit, so they would not be affected   by differences in implementation in case another implementation decided   to take another approach.    There was a test (HTMLSelect03) that attempted to check   HTMLSelect.selectedIndex == -1, however there is not anyway to construct   a document where it is guaranteed that nothing is selected.  See   http://www.w3.org/TR/html401/interact/forms.html#h-17.6.1    Mozilla 1.0 HTML failures:    *HTMLAppletElement01.html-11.html  *    **    All HTMLApplet related tests fail for Mozilla    *11.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLDocument08.html:HTMLDocument08   failed*    "length"  Expected 4 (number) but was 2 (number)    *CA: HTMLDocument.applets is supposed to contain both APPLET and OBJECT   elements.  Mozilla omits OBJECT  *    *12.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLImageElement04.html:HTMLImageElement04   failed  13.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLImageElement05.html:HTMLImageElement05   failed  14.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLImageElement06.html:HTMLImageElement06   failed**  15.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLImageElement11.html:HTMLImageElement11   failed**  file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLImageElement12.html:HTMLImageElement12   failed  *    *CA: Type definitions changed in DOM L2  *    *17.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLIsIndexElement01.html:HTMLIsIndexElement01   failed*    "formNotNull"  Expected not to be null      *18.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableElement31.html:HTMLTableElement31   failed*    "Asize2"  Expected 1 (number) but was 0 (number)    CA:    ----------------------------    Microsoft IE (Omitting tests failing on string to number mismatches)    4. file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLButtonElement08.html:HTMLButtonElement08 failed      "valueLink"  Expected Reset Disabled Button (string) but was Reset (string)    CA: returned content of element, not value attribute    5. file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLDocument04.html:HTMLDocument04 failed      "URLLink"  Expected document (string) but was D:\foo\2001\DOM-Test-Suite\build\level1\html\ecmascript\tests\document (string)    CA: IE returned UNC, not URL    10.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLInputElement06.html:HTMLInputElement06   failed      "alignLink"  Expected bottom (string) but was  (string)    12.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLIsIndexElement01.html:HTMLIsIndexElement01   failed      "Asize"  Expected 2 (number) but was 1 (number)    13.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLIsIndexElement02.html:HTMLIsIndexElement02   failed      "notnull"  Expected not to be null    14.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLIsIndexElement03.html:HTMLIsIndexElement03   failed      "Asize"  Expected 2 (number) but was 1 (number)    18.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableCellElement11.html:HTMLTableCellElement11   failed      "chLink"  Expected : (string) but was  (string)    19.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableCellElement12.html:HTMLTableCellElement12   failed      "chLink"  Expected : (string) but was  (string)    20.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableCellElement13.html:HTMLTableCellElement13   failed      "chOffLink"  Expected 1 (string) but was  (string)    21.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableCellElement14.html:HTMLTableCellElement14   failed      "chOffLink"  Expected 1 (string) but was  (string)    22.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableColElement03.html:HTMLTableColElement03   failed      "chLink"  Expected * (string) but was  (string)    23.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableColElement04.html:HTMLTableColElement04   failed      "chLink"  Expected $ (string) but was  (string)    24.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableColElement05.html:HTMLTableColElement05   failed      "chLink"  Expected 20 (string) but was  (string)    25.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableColElement06.html:HTMLTableColElement06   failed      "chLink"  Expected 15 (string) but was  (string)    26.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableRowElement08.html:HTMLTableRowElement08   failed      "chLink"  Expected * (string) but was  (string)    27.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableRowElement09.html:HTMLTableRowElement09   failed      "charOffLink"  Expected 1 (string) but was  (string)    28.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement04.html:HTMLTableSectionElement04   failed      "chLink"  Expected * (string) but was  (string)    29.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement05.html:HTMLTableSectionElement05   failed      "chLink"  Expected + (string) but was  (string)    30.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement06.html:HTMLTableSectionElement06   failed      "chLink"  Expected $ (string) but was  (string)    31.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement07.html:HTMLTableSectionElement07   failed      "chOffLink"  Expected 1 (string) but was  (string)      32.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement08.html:HTMLTableSectionElement08   failed      "chOffLink"  Expected 2 (string) but was  (string)    33.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement09.html:HTMLTableSectionElement09   failed      "chOffLink"  Expected 3 (string) but was  (string)    34.   file:///D:/foo/2001/DOM-Test-Suite/build/level1/html/ecmascript/tests/HTMLTableSectionElement21.html:HTMLTableSectionElement21   had an error      Error message is:  "Invalid argument."        

        Comments and/or possible constructs inline:    Jeroen van Rotterdam wrote:  > Curt wrote:  >   >   >>For the load/save tests, I always expected that we would need to add some  >>similar test framework implemented classes.  However, you are probably  >   > in >a better position to enumerate the capabilities that you would want.  >   > Ok, browsing through the spec I believe that the following methods are  > required to write certain LS tests:  >   >   > - a method to create a new File OutputStream a.k.a. in java new  > FileOutputStream(String fileName)    There are a lot of issues involved with letting the tests write to the   file system.  If writing to the file system is needed, then the   temporary filenames should be generated by the framework.  However, even   these could not be supported by browser based implementations.  I'm   pretty darn curious about what would be considered a DOMOutputStream on   an ECMAScript implementation.    You'd want to transparently use an existing browser stream   implementation, but it might be good to have a fallback that any class   implementing a writeByte(byte) method would also be recognized as a   DOMOutputStream.  On further thought, it appears that some minimal   definition for an recognizable implementation of DOMOutputStream,   DOMInputStream and DOMReader is necessary for the ECMAScript test   harness to implement those interfaces to support the tests.    > - a method to close a DOMOutputStream    <close obj="outStream" interface="DOMOutputStream"/>    > - a method to create a new File object a.k.a in java: new File(String  > filename)    See previous    > - a method to test the existence of a file    See previous    > - a method to test whether a substring appears in a file    Is this specific to files?    > - a method to get the size of a file    Ditto.      > - a method to create a new FileReader from a File object    <var name="reader" type="DOMReader" value=""staff.xml""/>    Would there be any need (hopefully not) for this to something other than   a resource provided with the test?    Do we want to provide a mechanism to mechanism to create a reader from a   file?  It would be difficult to implement for ECMAScript.  It might be   cleaner just to provide a mechanism to initialize a reader from a string.    > - a method to create a new byte array output stream    <var name="outStream" type="DOMOutputStream"/>    would need something like the writeByte(byte) fallback to implement this   in ECMAScript.    > - a method to create a new input stream from a URL    <var name="inStream" type="DOMInputStream" value="url"/>    > - the ability to create a new input stream from an output stream    <var name="inStream" type="DOMInputStream"/>  ...  <assign var="inStream" obj="outStream"/>    > - a method to get a substring of DOMString    <substringData var="substring" obj="string" offset="1" count="5"   interface="DOMString"/>    > - A method to create a new input stream from a string variable  > I guess we don't need that. DOMInputSource.stringData is meant for that one.    Actually, it would provide a mechanism to test   DOMInputSource.setByteStream().    <var name="source" type="DOMInputSource"/>  <var name="inStream" type="DOMInputStream"/> ...  <createDOMInputSource var="source" obj="implementation"/>  <assign obj="inStream" value='"<foo/>"'/>  <byteStream obj="source" value="inStream"/>    Should be functionally equivalent to:    <stringData obj="source" value='"<foo/>"'/>    but would test a different code path        

      The change appeared to occur between then 7 March 2000 and 20 May 2000 drafts.  The language is pretty explicit, the current Xerces-J (and gnu whatever) implementation is consistent with the 7 March draft and inconsistent with the 20 May and eventual recommendation.      This does not appear to be an editorial or clarification issue, but invalidating a purposeful change to the spec.    From http://www.w3.org/TR/2000/CR-DOM-Level-2-20000307/events.html#Events-EventTarget-removeEventListener (2 March 2000)    This method allows the removal of event listeners from the event target. If an EventListener is removed from an EventTarget while it is processing an event, it will still be triggered by the current actions but will not be triggered again during any later stages of event flow, such as bubbling.  Calling removeEventListener with arguments which do not identify any currently registered EventListener on the EventTarget has no effect.    From http://www.w3.org/TR/2000/CR-DOM-Level-2-20000510/events.html#Events-EventTarget-removeEventListener (20 May 2000 and very close if not identical to the text in the recommendation)    This method allows the removal of event listeners from the event target. If an EventListener is removed from an EventTarget while it is processing an event, it will not be triggered by the current actions. EventListeners can never be invoked after being removed.  Calling removeEventListener with arguments which do not identify any currently registered EventListener on the EventTarget has no effect.        

      It is unnecessary to add a new interface to support mouse wheel events,  since the detail attribute of MouseEvent could be used to represent wheel  rotation.  I think keeping within the confines of the MouseEvent would be  preferrable.        

      Joe Kesselman wrote: >>  Curt Arnold wrote without enough sleep: >    > > You're right there, that's what the spec currently says. But the spec is  > > wrong, though. It is meant to say the opposite. I just double-checked  > > with Joe Kesselman who was very much involved in the development of that  > > spec and who implemented it in Xerces and he confirmed my fears.  > > I will bring it up to the DOM Working Group, I would expect an erratum  > > to be published.  >  > I had to jump through some serious hoops to implement it as written in my  > personal Xerces-C DOM Events implementation.    But I wouldn't be upset if it was changed.        

      I've slowly started working on a transform to produce a HTML test runner that should support asynch loading without the alert() hack and run on more browsers than JSUnit.  I've committed transforms\test-to-browser.xsl and added a "dom1-core-browser" target to build.xml that produces an (currently non-functional) HTML test runner.  To keep build time down, build.xml currently applies this transform to one test and not to alltests.xml.    Next steps:    Rework DOMTestCase.js so that the class and method names are more generic (for example, WindowOpenDocumentLoader instead of MozHTMLDocumentLoader).    Modify test-to-ecmascript to add a method to test classes that will declare the files that are loaded by the test.  This info will be used to ensure that the document cache has the necessary documents already loaded before starting the body of the test.    Whole lot of ECMAScript in test-to-browser.xsl (or an external .js file) to run tests, produce output page and provide xUnit assert calls.    Any great name ideas for what we should call this?        

        Tantek ?elik wrote:    >>Message-ID: <3A92DD77.7C9676BC@w3.org>  >>Date: Tue, 20 Feb 2001 16:11:19 -0500  >>From: Philippe Le Hegaret <plh@w3.org>  >>To: Martijn Pieters <mj@digicool.com>  >>Cc: www-dom@w3.org  >>Subject: Re: DOMImplementation.hasFeature and 'Core', 'XML' and '1.0'.  >>  >>Martijn Pieters wrote:  >>      >>  >>>So, should a DOM level 2 implementation return true on hasFeature('Core',  >>>'1.0) or hasFeature('XML', '1.0')? I *think* it should, but would like to  >>>hear confirmation.  >>>        >>>  >>The definition of version '1.0' is driven by the DOM Level 1 specification.  >>The DOM Level 2 specification doesn't say anything about  >>hasFeature('Core', '1.0') and I don't think it has to, given that you can't  >>expect a DOM Level 1 implementation to return true.  >>hasFeature('XML', '1.0') must definitively return true for a DOM Level 2  >>implementation since DOM Level 2 is build on top of DOM Level 1.  >>  >>Philippe  >>      >>  >  >Redirecting a reply to www-dom-ts since I am raising a DOM 2 Core Test Suite  >issue (in response to a message over two years old!).  >  >I tried searching the archives, and this is the most recent relevant  >reference I could find to the question of whether it is correct for the test  >suite to test hasFeature("Core","1.0").  >  >I don't think the DOM 2 Core Test Suite should be performing that check,  >since no DOM 1 Core implementation could be required to return true for that  >since "Core" wasn't added as a feature flag until DOM 2.  >  >The following tests in the DOM 2 Core Test Suite appear to make that  >assumption however, and thus should be fixed to not expect  >hasFeature("Core","1.0") to return a meaningful value.  >  > isSupported03.html  > isSupported08.html  > isSupported12.html  >  >Thanks,  >  >Tantek  >  >---------------------------------------------------------------------------  >Tantek ?elik                                         tantek@cs.stanford.edu  >Tasman Development Lead, Microsoft Corporation        tantekc@microsoft.com  >Representative to W3C CSS and HTML working groups  >---------------------------------------------------------------------------  >  >  >  >    >    http://www.w3.org/TR/DOM-Level-2-Core/*Core.html#*ID-5CED94D7 has:      |version| of type |DOMString|   <http://www.w3.org/TR/DOM-Level-2-Core/core.html#DOMString>      This is the version number of the feature to test. In Level 2, the      string can be either "2.0" or "1.0". If the version is not      specified, supporting any version of the feature causes the method      to return |true|.        This was apparently interpreted by NIST and the Xerces-J team (maybe      in response to a NIST test) that "2.0" and "1.0" should be      equivalent.  I do not know of any definitive WG decision on this issue.        I logged this as http://www.w3.org/Bugs/Public/show_bug.cgi?id=239        

      My second attempt is at http://home.houston.rr.com/curta/domtest/dom1.zip which includes minimally checked schema, DTD, documention and one sample.    The following significant changes from previous versions.    1) <declare> was changed to <var> to eliminate conflict with HTMLObjectElement.declare    I'm open to other suggestions.  Basically:    <declare var="node" type="Node"/>    has been replaced by    <var name="node" type="Node"/>    2) <size> changed to <hasSize> and <add> to <plus> to avoid other conflicts    3) assertDOMException now uses a child element for the code    <assertDOMException>      <INDEX_SIZE_ERR>          <substringData obj="str" start="-1" count="5"/>      </INDEX_SIZE_ERR>  </assertDOMException>    The content model for the child elements is determined by seeing if the text description has  code name + ":".  Seems to work okay, but is a kludge.  "data" gets generated twice for  one code and needs to be manually removed.    4) Used named templates for organization, pure static schema content isolated    5) <package> added, <suite> removed    6) interface optional (but only one choice) when unambiguous    Things that need to be done:    1) Add optional id attributes to everything that doesn't already have them (assertions and tests have required IDs)    2) Write transform that will extract interface information from DOM specification docs and generate a compact representation    3) Write equivalent transform to produce DTD    4) Explore generating schema/DTD from DOM 2, DOM 3 or SVG spec        

      I have done a quick survey of the Mozilla test results.  Here is a rough breakdown:    About 16 tests fail since document.doctype apparently returns null  About 8 tests fail since default attributes from the DTD are not incorporated  About 8 tests fail since document.createEntityReference apparently returns null  Invalid character, in use and wrong document exceptions aren't raised (probably another 10 cases)  The negative count tests (3) crash Mozilla    About 5 cases fail due to returning "" when the spec specifies null, particularly for Node.value.  As mentioned before this is consistent with null not being in the value set of String in JavaScript.  Eventually we will need some resolution from the WG on this issue.    And then a hodge podge of about 10 cases.        

          On Feb 19, 2004, at 12:50 PM, Philippe Le Hegaret wrote:    > On Thu, 2004-02-19 at 07:31, Andrew Clover wrote:  >> There's an issue with namespace normalisation in the reference algo  >> (B.1) in PR which I hadn't noticed until DOM-TS started testing for  >> it:  >>  >>     if ( Element's localName is null )  >>     {  >>        // DOM Level 1 node  >>        [...]  >>        Otherwise, report an error  >>  >> I believe this behaviour to be undesirable. It would mean you'd be  >> unable to serialise any document containing Level 1 Elements  >> (or Attrs) without deliberately setting the DOMConfiguration  >> parameter 'namespaces' to false.  >  >    I'd also suggest that a non-namespace aware parse would result in a   document where setParameter("namespaces") returns false.  If you don't   do something like this then any existing code that did a non-namespace   aware parse would silently fail on any attempt of normalization.  I   mocked up a test that checks that the value of the namespaces parameter   follows the parser settings and currently it doesn't for Xerces-J.        

      [mb]  Great, thanks!  I've got a copy -- I'll run it  through the tests and should be ready to  commit them today.    [ca]  The timing would be great since I could spend some time with them over the  weekend.    [mb]  In attribute values that have single quotes surrounding double quotes, the  double quotes  are transformed to " -- do you think  that this will cause any problems in the end?    [ca]  I had noticed that earlier.  Only the aestetics are different, any XML  processor should see them as equivalent.  If you think  ""whatever"" is ugly, you could do a global search and replace to  change them back to '".  However, I wouldn't bother.        

        Phillipe Le Hegaret commited XPath tests earlier this month that   contained the following boilerplate.       <!-- The following code is to create the evaluator using          either the getFeature method defined in DOM3 or          the cast mechanism. Implementation are not required          to support both but at least one of them -->     <assign var='xpEvaluator' value='null'/>     <isSupported obj='doc' feature='"core"'       version='"3.0"' var='state'/>     <if>       <isTrue value='state' />       <getFeature interface='Node' var='xpEvaluator' obj='doc'         feature='"XPath"'         version='"3.0"'/>     </if>     <if>       <isNull obj='xpEvaluator' />       <assign var='xpEvaluator' value='doc'/>     </if>      http://www.w3.org/TR/2003/CR-DOM-Level-3-XPath-20030331/xpath.html#XPathEvaluator     says:    The evaluation of XPath expressions is provided by XPathEvaluator. In a   DOM implementation which supports the XPath 3.0 feature, as described   above, the XPathEvaluator interface will be implemented on the same   object which implements the Document interface permitting it to be   obtained by the usual binding-specific method such as casting or by   using the DOM Level 3 getInterface method. In this case the   implementation obtained from the Document supports the XPath DOM module   and is compatible with the XPath 1.0 specification.    http://www.w3.org/TR/2003/WD-DOM-Level-3-Core-20030226/core.html#Node3-getFeature       This method returns a specialized object which implements the   specialized APIs of the specified feature and version. The specialized   object may also be obtained by using binding-specific casting methods   but is not necessarily expected to, as discussed in Mixed DOM   implementations. This method also allow the implementation to provide   specialized objects which do not support the Node interface  ....    Return Value  Node    Returns an object which implements the specialized APIs of the   specified feature and version, if any, or null if there is no object   which implements interfaces associated with that feature. If the   DOMObject returned by this method implements the Node interface, it must   delegate to the primary core Node and not return results inconsistent   with the primary core Node such as attributes, childNodes, etc.    ------------------------------    The discussion on obtaining an XPathEvaluator is inconsistent with the   DOM 3 Core spec.  The getInterface() method does not exist in the   current Core draft, it has changed to getFeature().  The XPathEvaluator   discussion of binding is stricter than the equivalent discussion in   getFeature().  The XPath discussion may be interpreted that casting is   always available where the getFeature explicitly disclaims that you   cannot depend on casting to obtain a specialized interface.    The discussion of Node.getFeature() says:     > This method also allow the implementation to provide specialized   > objects which do not support the Node interface.  If the DOMObject   > returned by this method implements the Node interface, it must   > delegate to the primary core Node and not return results inconsistent   > with the primary core Node such as attributes, childNodes, etc.    The method is defined as returning a Node and therefore anything   returned from this method must support the Node interface.  The text   would be appropriate if the return type had been DOMObject.    I'd suggest:    Change the return type of Node.getFeature() to DOMObject.    Add a conformance requirement to DOM XPath that if   document.implementation.hasFeature("XPath", version) and   document.implementation.hasFeature("Core", "3.0") are true then   document.getFeature("XPath", version) must return an instance of   XPathEvaluator.    Clarify under what conditions being able to cast Document to   XPathEvaluator is a conformance requirement.  If it always, or is it   only required when implementation.hasFeature("Core", "3.0") is false.    Rework the description on obtaining an XPathEvaluator.  Depending on the      resolution of the other issues, there may be no need to   XPathEvaluator to be implemented on the same object as Document.        

      Comments inlined:    ----- Original Message -----  From: Mary Brady  Sent: Thursday, March 07, 2002 11:10 AM  Subject: Core HTML only tests      Hi Everyone,    I'm about to start on trying to translate the level1 core xml  tests to be html only tests.    [ca] The new tests shouldn't be HTML-only, they should be HTML-compatible,  able to be run using XML, XHTML and HTML parsers.  We definitely don't want  to establish a set of tests that only run on HTML 4.    This will involve translating  staff.xml to an equivalent [X]HTML file, and modifying each  of the core tests to use this file, and manipulate the new  elements, attributes inside of this file.  Before I start, I  have a couple of questions:    1) Curt, could you possibly supply a skeleton with pointers  to how the tests should be set up?  In particular, should I  do anything inside the test to indicate that the test is for  HTML only implementations?  What about any pointers  regarding case-sensitive, case-insensitive comparisons?  I know this has been discussed, but I don't remember  the resolution.    [ca] The tests shouldn't need any (additional) guards since they will not  depend  on the HTML DOM interfaces.  I'll take a quick shot at adding the validation  guards to the existing tests to address the default attribute issue.    [ca] When doing an assertion on a returned tag name or attribute name,  you should use a lower cased expected value and ignoreCase="auto"  which will do a case-insensitive comparison for XML and XHTML documents  and compares the returned value with an uppercased version of the expected  string  for HTML.  Arguments to getElementsByTagName should be lower-case.    2)  Where should I put the tests? Under tests/level1/core -  should we mix them with the available xml tests or create  a separate directory?    [ca] They should be in the same directory, they just are a parallel set  of tests for the DOM L1 core, just a set that is also compatible with  HTML parsers.    3) What about naming -- my gut feeling is that the tests will  be similar in concept to the xml equivalent, but may be  significantly different in terms of what tags we grab, etc.  Any feelings on whether we should keep the nameHTML,  or possibly name them as we did for level2 tests, or  any other suggestions?    [ca] It might be good to avoid calling the HTML since that might imply  that they were HTML-only.  Maybe hc_existingtestname (hc_ for  HTML-compatible).    Here is the process that I would suggest:    1. Create hc_staff.xml, hc_staff.dtd, nodtd_staff.xml from the existing  staff* files by a one-to-one mapping of HTML names for the existing tag and  attribute names, replacing <staff> with <html><body> and adding the XHTML  namespace and DTD.    I think the minimalistic approach where the staff.xml and hc_staff.xml and  nearly structurally identical will be much more effective than trying to  make create a hc_staff.html that looks like a report generated from  staff.xml.    2. Create an hc_staff.html from hc_staff.xml.  Run it through HTML  validation to make sure that it is legal HTML.    3. Copy existing test definitions to make hc_*.xml test definitions.  Do  global search and replaces to substitute "a" for "address", etc.    4. Iterate on tests until both existing and new tests give comparable  results with Xerces and other high-compliance XML parsers.    5. Review <assertEquals> to set appropriate assertions (only a small  fraction) to ignoreCase="false"    6. Iterate with HTML implementations        

      I have received notification that my public key has been added and was given a members-only link [1] for documentation on the use of the CVS at W3C.  Not a member, so I'm not able to view it.    1.  http://www.w3.org/Project/CVSdoc/        

        Node.insertBefore is required to throw a HIERARCHY_REQUEST_ERR if the   operation would result in a document node containing multiple document   type or element nodes.  However, Node.addChild and Node.replaceChild can   both result in the same condition, but do not have declare that a   HIERARCHY_REQUEST_ERR should be thrown.  There is also a typo in the   text for Node.insertBefore (if this node if (sic) of type).    Test nodereplacechild12 is failed by one implementation which throws an   exception when a second element is added to a document using   Node.appendChild.  Passing nodereplacechild12 indicates that an   implementation does not throw an exception.        

        > The patch below was necessary, otherwise javac wouldn't compile those 2  files,  > since a final object has to initialized immediately, apparently.    The construct is called a "blank final" and is legal  (http://java.sun.com/docs/books/jls/second_edition/html/typesValues.doc.html  #10931), but there were compiler bugs in the 1.1.x series that would result  in compile failures.  I had not seen it in JDK 1.2.x or later compilers.  However, no big deal in changing it to avoid the compiler bug.    >  > BUILD FAILED  >  > /home/dfaure/src/DOMTS/2001/DOM-Test-Suite/build.xml:358:  javax.xml.transform.TransformerException: java.lang.NullPointerException    I think this is a bug in Xalan.  I've seen similar exceptions with earlier  version, but I thought they had been fixed.  You could switch to a different  XSLT engine (I'd suggest SAXON 6.5.2, http://saxon.sf.net), typically by  removing xalan.jar from Ant's lib directory and replacing it with saxon.jar.        

      Curt Arnold wrote:  >   > Background:  >   > There has been a little running discussion on www-dom@w3.org on an errata to  > the DOM Level 1 specification DOMImplemention.hasFeature() method that  > also appears to apply to the Level 2's Document.createElementNS and other  > *NS methods.  >   > Basically, behavior was specified when a string argument was "unspecified"  > (for hasFeature) or "null" for the createElementNS and similar.  >   > For example:  For most, if not all, Java XML DOM implementations:  >   > ((DOMImplementation) impl).hasFeature("XML",null);  >   > will return true if the implementation supports any version of the XML  > specification.  The null argument acting as a wild-card.  >   > This will not work on either IE or Mozilla/NN 6 ECMAScript.  >   > In IE, the COM interface definition is specified as a BSTR (basically a  > wchar_t*) and the text explicitly specifies the behavior when the BSTR is 0.  > However, the COM variant coercsion code (or so I speculate) will not  > convert a variant null (VT_NULL) to a BSTR and throws an exception  > if you try hasFeature("XML",null).  >   > The corresponding Mozilla code  > (http://lxr.mozilla.org/seamonkey/source/content/base/src/nsGenericElement.c  > pp#880)  > is passed an nsReadableString& and checks for a zero length string and known  > versions strings, but no apparent check for a null string, so:  >   > document.implementation.hasFeature("XML","") returns true  >   > but  >   > document.implementation.hasFeature("XML",null) returns false  >   > I was a little surprised that the second call returned false which hints  > that it actually  > made it to the hasFeature method instead of failing on a preliminary  > coerscion step  > and throwning an exception.  >   > ----  >   > Now for the question:  >   > 1.  (Serious question)  >   > Does nsReadableString has a state that represents an null string distinct  > from a zero length string?  >   > My guess from the code is that it does not, but I need to confirm that.  > If it does, how do you check if a string is null.  >   > I expect that you could represent both null and a string using a variant  > type, however changing the spec to conform to the limitations of the string  > classes and deployed behavior is more practical than forcing a  > change of the implementation.    shaver@mozilla.org, scc@mozilla.org, and jst@netscape.com are  working on representing null in these classes to make the DOM do  the Right Thing.    http://bugzilla.mozilla.org/show_bug.cgi?id=69468    >   > 2. (More a curiousity question)  >   > Why does document.implementation.hasFeature("XML",null) return false instead  > of  > throwing an exception on a coerscion of null to a string?  Does control ever  > reach nsGenericElement::InternalIsSupported()?  If so, how could it be  > written  > to return true?    The DOM newsgroup is really the right place to discuss this stuff  and perhaps get answers.    John.        

      I don't know what XSLT processor that Jeroen is using and I didn't have enough information to determine if the problem was with his source, the transform or the processor.  Given the complexity of the test-to-java transform and its tendency to find bugs in XSLT implementations, switching XSLT processors is a quick way to identity if the XSLT processor is a part of the problem.   If it uncovers an implementation or spec bug, then logging the issue is the right thing to do.  I have vague memories of filing at least one bug on key(), but I can't recall the details and I believe it has been resolved.        

        Jeroen van Rotterdam wrote:  > Curt,  >   > Is there anything in the framework yet for creation of  > DOMInputStream/DOMReader ?  >   > We've discussed this a long time ago and I didn't have any  > change to see whether there was activity on this issue ?  >   > Thanks in advance,  >   > Jeroen  >   >   I just added support for the value parameter for DOMInputStream   definitions to the Java framework.  The value is expanded to a URL using   the same logic as the <load> method and then the URL's openStream method   is called.    For example,       <var name="staffStream" type="DOMInputStream" value='"staff"'/>    would expand to:    InputStream staffStream = openStream("staff");    Where DOMTestCase.openStream(String baseURL) would append the   appropriate suffix and attempt to find the resource within the .jar file   (unless the value contains a protocol).        

      Adobe SVG Viewer also interprets getElementByTagName("*",...) to match both namespace qualified and unqualified nodes (that is returns 5 elements, not 2)    Testing ASV is a bit of a kludge right now.  It uses the JSUnit harness, but you have to uncomment out a section of code in DOMTestCase.js.  It also uses variants of staff*.xml and staff*.dtd that have an <svg> element as the document element, else ASV refuses to load the document.    I've posted its test results at http://home.houston.rr.com/curta/asv3-l1.txt and http://home.houston.rr.com/curta/asv3-l2.txt     Adobe does not pick up default values from the DTD and rarely throws DOMExceptions which results in a high number of test failures.        

      An alternative to creating NS suffixed versions of all the existing init[*]Event methods would be to add a createEventNS() method and set the namespace (and potentially the compatibility flag mentioned in the previous message) at event creation time and use the existing init[*]Event methods to set the remaining parameters.    I think it would be very unlikely that the inability to change an event's namespace after creation would ever be a significant issue and it would reduce both the size of the spec and the number of interfaces that need to change for DOM L3.        

      I've made an update the JUnit part of the DOMUNIT subproject to enable testing of the Oracle XML Parser and the Batik DOM implementation.  This will probably be the final "release" based on my personal translation of the NIST tests to JUnit.  The files can be downloaded from http://sourceforge.net/project/showfiles.php?group_id=8114&release_id=36555    Xerces-J 1.4.0 and the CVS version of Crimson pass all the NIST tests.  Xerces fails my experimental events tests since the release version expects DocumentEvent.createEvent("Event") not ("Events").  You can run just the official NIST tests by using net.sourceforge.xmlconf.domunit.dom1.nist.NISTDOM1Test as the main class.    Batik still has a lot of test failures, primarily due to not maintaining DTD information.  I haven't confirmed that all the DOM issues that I reported before the Batik 1.0 release were fixed.    The tests are pretty easy to run.  If you have a JAXP compatible parser in your classpath or have Xerces, Crimson or XML4J in the same directory, you can just run     java -jar domunit.jar    If you want to run the Oracle V2 parser, you need a JAXP implementation (either jaxp.jar or xerces.jar) in the classpath or current directory and then    java -Djavax.xml.parsers.DocumentBuilderFactory=net.sourceforge.xmlconf.domunit.OracleDocumentBuilderFactory    To run Batik, you need some subset of the Batik jars (there are now like 10 of them and I'm not sure what subset is necessary) in the same directory and a JAXP compatible SAX parser (xerces.jar or jaxp.jar + crimson.jar)    java -Djavax.xml.parsers.DocumentBuilderFactory=net.sourceforge.xmlconf.domunit.BatikDocumentBuilderFactory    The output will document 5 or so switches that allow you to test ignoring whitespace, validating, expanding enities, etc.        

      I've committed changes to build.xml, dom3-combine.xsl and dom-to-xsd.xsl to allow the automatic generation of dom3.xsd from the recent working drafts.  There are several instances where context-specific (local) element definitions were required.  Since there is not a mechanism for this with DTD's, it would be difficult to automate producing an equivalent DTD.  Unless there is a significant need for a dom3.dtd, I'd like to drop it.        

      > To recap in view of the next release (DOM Level with Core and HTML), we  > have a few things to look into:  >  > 1. Framework issues: Bob Clary said he wanted to help out make sure that  > the framework does not produce erroneous results and to separate error  > reporting mechanisms originating from the implementation and the  > framework, respectively. Has there been any progress?    I think his issue was the observed variability in the Netscape results where  one or so of the test failures was not repeatable.  That should be addressed  by the browser based runner which will not need to resort to an alert() to  allow the document to complete loading.    > 2. Manos worked on (X)HTML, has this been further investigated?    Mary was proceding with recasting the existing L1 Core tests based on my  transliteration approach.  Manos's work was not directly applicable to  providing HTML (not X) tests that were equivalent to the existing XML tests.    >  > Level 2/3  > 1. Following X-Hive's intent to write tests, we said we would generate  > the DOM TS ML for levels 2 & 3. This would greatly simplify for  > companies looking into writing tests for current implementations.      DOM L2 schemas have been available for quite some time.    I've committed changes to build.xml, dom-to-xsd.xsl and corresponding  patches that allow building a DOM L3 schema.  There are still some rough  edges, I've posted a hand finished copy of a dom3.xsd and a modified version  of Jeroen's sample L/S test to http://home.houston.rr.com/curta/dom3.ZIP    There are still a few issues, I haven't reworked the keys and keyrefs to  account for anonymous inner classes, so you will get spurious keyref  constraint validations when accessing variables defined in anonymous inner  classes.  There are several interfaces missing, CDATASection and Entity, for  example, not sure why they disappeared.  Text is still DOM L2 since the XML  sources omitted it and TextEvent.  Would be really nice if the next round of  DOM specs were validated.        

      From section 1.1    For backward compatibility reasons, the dispatching of an event will ignore namespace URIs if either the event or the event listener has a null namespace URI.  If a DOM Level 2 event (i.e. with a null namespace URI) is dispatched in the DOM tree, all event listener that match the type will be triggered as described in Description of event flow. If a DOM Level 3 event (i.e. with a namespace URI) is dispatched in the DOM tree, all event listener with the same type and the same or null namespace URI, will be triggered as described in Description of event flow.    -------------------    This basically results in a null namespace parameter to addEventListernerNS acting like "*" in getElementsByTagNameNS.  It also has the effect of discouraging use of  common event names (like "load") in arbitrary namespaces since existing DOM L2 Event clients would receive those messages in addition to the intended {http://www.w3.org/2001/xml-events}load and {null}load events.    The motivating factor is to not break existing event handling code while effectively changing the DOM defined events from not being in a namespace to being in {http://www.w3.org/2001/xml-events}.  Instead of having addEventListenerNS(null, "load") or addEventListener("load") receive any event named "load", it would not be difficult to define the behavior so that it would only get {http://www.w3.org/2001/xml-events}load and {null}load events.    One mechanism to accomplish this would be to add an additional boolean parameter or the init*EventNS's that mark the event as being dispatched in a compatibility mode.  If this parameter was set on the event, then the event should be dispatched to any listener that matches its namespace and event type or any listener registered with addEventListener() or addEventListenerNS(null,) and its event type.    The second option would be to imply that behavior for any event in {http://www.w3.org/2001/xml-events}.        

      Joseph Kesselman wrote:  >  > For what it's worth, I seem to remember that  the question of what  > coordinates actually meant was one of the work items for the Views module,  > which was dropped from DOM Level 3 due to lack of W3C members willing to  > commit resources to developing it or commit to implementing it when  > published. Are we sure that we can nail this down without reopening those  > issues?    Though this thread was started with a cross-posted to www-dom and suggested  changes to the events recommendation, I do not believe this is generic DOM  issue.        

        Philippe Le Hegaret wrote:    >On Thu, 2003-07-24 at 04:23, Jaspreet Singh wrote:  >    >  >>From where can i find a c# binding for the DOM idl. i just need the  >>interface so that i can provide my own implementation.  >>      >>  >  >I don't think that there is a public c# binding for the DOM  >unfortunately.  >  >Philippe  >  >  >  >    >  The .NET class library DOM implementation (System.Xml.XmlDocument etc)   is defined using classes, not interfaces, so it is not possible to   substitute change implementations at run-time ala JAXP.    The reasonable options for alternative DOM implementations are:    Use System.Xml source-code (but not binary) compatible definitions and   have code be switchable by changing "using System.Xml" to "using   Example.Xml" and recompiling.    Use J# to compile the W3C Java binding.  It may be possible to compile   an existing Java parser that is JDK 1.1 compatible using J#.  Then you   could switch between the ported parser and your implementation by   changing a class factory.    If you are comfortable with XSLT, you can convert the XML source for the   DOM definitions to make your own binding by developing your own mapping   rules.  Each DOM spec has an XML source which embeds the interface   definitions.  The DOM Test suite build process   (http://www.w3.org/DOM/Test) extracts the interface definitions and   produces files that contain all the interfaces for a specific level.    Run the dom1-interfaces, dom2-interfaces or dom3-interfaces targets   using Ant to produce the corresponding interface definition file.        

        Sander Bos wrote:    >  >Dear Curt,  >  >    >  >>HasFeature04 and HasFeature05 will be modified to only be applicable   >>when hasFeature("Core", "3.0") is true.  GetFeature02 already   >>had that   >>precondition.  >>      >>  >  >I am not sure what is going on here now. I now have as HasFeature04.xml:  >  >    >  I accidently introduced typos (apparently I'm not great early in the   morning either) and have committed another set of changes to   HasFeature04 and HasFeature05.    The test preconditions (that is the <implementationAttribute/> and   <hasFeature/> that appear before the first variable definition result in   code in the test constructor that will throw an exception if the   precondition cannot be satisfied.  The generated constructor for   GetFeature2 looks like:       /**      * Constructor      * @param factory document factory, may not be null      * @throws org.w3c.domts.DOMTestIncompatibleException Thrown if test   is not compatible with parser configuration      */     public GetFeature2(DOMTestDocumentBuilderFactory factory)  throws   org.w3c.domts.DOMTestIncompatibleException {        super(factory);        if (factory.hasFeature("Core", "3.0") != true) {           throw new org.w3c.domts.DOMTestIncompatibleException("Core",   "3.0");        }     }      If an exception is thrown in the test constructor, the test is not added   to the test suite and does not count in the pass/fail counts.        

        All casting is implicit, the transform is responsible for doing any  appropriate casting.   I assume this scenerio (required casting between data  types) had not previously appeared in the tests.  As a workaround, you may  try assigning the value to a short variable and then using the short  variable as the parameter.    <var name="mode" value="1" type="short"/>  <createDOMBuilder var="builder" obj="lsImplementation" mode="mode"  schemaType="schemaType"/>    ----- Original Message -----  From: "Jeroen van Rotterdam" <jvrdam@xs4all.nl>  Sent: Sunday, January 12, 2003 4:09 PM  Subject: casting to a short      > Attached a really simple test which creates a DOMBuilder.  >  > Compiling fails since it should be:  >  >   builder = lsImplementation.createDOMBuilder((short)1,schemaType);  >  > instead of:  >  >   builder = lsImplementation.createDOMBuilder(1,schemaType);  >  > How do you cast the constant to a short within the test ?  >  > Thanks in advance,  >  > jeroen  >  >  > =====  > X-Hive Corporation  > Jeroen van Rotterdam, CEO  > e-mail: jeroen@x-hive.com  > phone: +31 10 7108600  > http://www.x-hive.com  >  >        

         From   http://www.w3.org/TR/2003/CR-DOM-Level-3-XPath-20030331/xpath.html#Conformance:    An implementation is DOM Level 3 XPath conformant if it supports the   Core module defined in [DOM Level 2 Core] and the module defined in this   specification. An implementation conforms to a DOM module if it supports   all the interfaces for that module and the associated semantics.    How would this apply to implementations of DOM L3 XPath that are   external to DOM Core implementation?  For example, Xalan-J has an   experimental implementation of DOM L3 XPath that operates on an   arbitrary implementation of org.w3c.dom.Document.  Would that preclude   Xalan-J from claiming conformance with DOM L3 XPath?        

      JUnit has the special loader that allows you to reload classes so you can recompile and test without restarting the GUI.  Of course, that doesn't work with our config, but it can be suppressed with the "-noloading" command line switch.    I've added support for GNUJAXP and Oracle.    You can run the Swing JUnit GUI by typing    java -jar junit-run.jar    and then select:    org.w3c.domts.level1.core.TestDefaultParser  org.w3c.domts.level1.core.TestDefaultParserAltConfig  org.w3c.domts.level1.core.TestXerces  org.w3c.domts.level1.core.TestXercesAltConfig  org.w3c.domts.level1.core.TestCrimson  org.w3c.domts.level1.core.TestCrimsonAltConfig  org.w3c.domts.level1.core.TestGNUJAXP  org.w3c.domts.level1.core.TestGNUJAXPAltConfig  org.w3c.domts.level1.core.TestOracle  org.w3c.domts.level1.core.TestOracleAltConfig    If you want to run one of the other standard JUnit guis:    java -classpath junit-run.jar junit.awtui.TestRunner -noloading    java -classpath junit-run.jar junit.textui.TestRunner       -noloading org.w3c.domts.level1.core.TestDefaultParser    If you want to run the default JAXP parser for both configs:    java -jar dom1-core.jar        

        > Can you tell me why:  >  > <startElement elt="element">  >  >  > Delivers:  >  >         public short startElement(Element elt) {  >  >  > Instead of  >  >          public short startElement(Element element) {  ??    There are no attributes defined for <startElement> when it is used to define  an inner class method.  The parameter list is built from the parameter names  in the spec.    Validating the test against the schema is very helpful to identify usage  errors.  For example, in the context of an inner class <startElement> has no  attributes, so it would flag this problem immediately.    I've been using Sun's multischema validator, primarily because it had a  command line that would you validate a fileset against on schema.  Unfortunately, it seems to have some problems with the entity expansion.  For my personal convienience, I manually expanded the entities and then  fixed the schema validity errors.  I've put comments in text1.xml where I  made changes.    I don't think there currently any read-write attributes on user implemented  interfaces, but for that day, I've added an intermediate <get> (and <set>  when appropriate) elements on inner class attributes.  So an implementation  of DOMFilterBuilder.whatToShow now looks like:    <whatToShow>  <get>  <return value="1"/>  </get>  </whatToShow>      dom3-ls-javac.jar and dom3-ls-jar will now compile the sample test.  Though  I haven't attempted to run the test with a DOM L3 Load-Save implementation.        

      > For the command-line-savvy, it may be worthwhile to try the classic  > command-line interface.  Links to the implementation and instructions  > for setting up command-line SSH and CVS clients are at:    The unnamed directory causes the command line CVS to fail.  I didn't try any  of the multi-check out combinations under WinCVS.  Don't know what put that  phantom directory there, my guess is that WinCVS had something to do with  it.   Hopefully, someone with file system rights can delete that thing and  we will be golden.    So, what do you suggest as the plan of attack for Python?  Do you want to  hack test-to-java.xsl yourself or manually transliterate some of the  generated Java source to Python and let me see how close I can get the  transform to produce the same code.        

        Test documentadoptnode28 (unintentionally?) adopts a node into its   current document.  Allowing this case seems undesirable, at best it acts   as node.parentNode.removeChild(node), actual behavior could be much   worse.  Would it be possible to state that WRONG_DOCUMENT_ERR should be   thrown on attempt to adopt a node into the same document?        

        Philippe Le Hegaret wrote:    >On Thu, 2003-07-17 at 00:25, Curt Arnold wrote:  >    >  >>Interface DOMImplementationSource:  >>  >>I dislike the form of this interface for a couple of reasons:   >> it   >>requires that each implementation source to parse the features list   >>which could have been done once for all implementation sources  >>      >>  >  >correct, but no having a single String would requires passing a more  >complex structure between the DOMImplementationRegistry and the  >DOMImplementationSource.  >  Since an implementation probably has code to parse the feature string to   support hasFeature(), preparsing the feature string wouldn't effectively   reduce the complexity of an implementation.    >We clarified the description of getDOMimplementation as follows:  >[[  >This method returns the first item of the list returned by  >getDOMImplementationList.  >]]  >  >(note that getDOMimplementationList used to getDOMImplementations but  >has been renamed)  >  It was fairly obvious that they should be consistent, but requiring   duplicate implementations leaves the possibility that they aren't.    getDOMImplementationList also appeared to be used by nothing which could   also hide implementation errors.    >>I believe that eliminates any use of DOMImplementationList so that   >>interface could be eliminated.  >>      >>  >  >This seems orthogonal to your proposal. getDOMImplementationList returns  >a list of DOM implementations.  >  >    >  getDOMImplementations() seemed to be required of an implementation   source but never used by a DOMImplementationRegistry.        

      Fixing up the problems identified by the schema validation allows running  dom1-html-jar which identified a few type mismatches.  Currently that is  about all dom1-html-jar is good for.    dom1-html-javac:      [javac] Compiling 539 source files to  D:\domts\2001\DOM-Test-Suite\build\jav  a      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\bl  ockquote01.java:58: cannot resolve symbol      [javac] symbol  : class HTMLBlockquoteElement      [javac] location: class org.w3c.domts.level1.html.blockquote01      [javac]       vcite =  ((HTMLBlockquoteElement)/*Node*/testNode).getCite();      [javac]                 ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\bu  tton01.java:54: cannot resolve symbol      [javac] symbol  : class DOMString      [javac] location: class org.w3c.domts.level1.html.button01      [javac]       vform =  (DOMString)((HTMLButtonElement)/*Node*/testNode).getFo  rm();      [javac]                ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\co  llection01.java:57: cannot resolve symbol      [javac] symbol  : class DOMString      [javac] location: class org.w3c.domts.level1.html.collection01      [javac]       vlength =  (DOMString)((HTMLCollection)/*NodeList*/nodeList).ge  tLength();      [javac]                  ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\co  llection02.java:53: cannot resolve symbol      [javac] symbol  : method assertEquals  (java.lang.String,java.lang.String,or  g.w3c.dom.Node)      [javac] location: class org.w3c.domts.level1.html.collection02      [javac]       assertEquals("vitemLink","[HTMLTitleElement]",testNode);      [javac]       ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\ta  ble01.java:54: cannot resolve symbol      [javac] symbol  : class DOMString      [javac] location: class org.w3c.domts.level1.html.table01      [javac]       vcaption =  (DOMString)((HTMLTableElement)/*Node*/testNode).get  Caption();      [javac]                   ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\ta  ble07.java:59: cannot resolve symbol      [javac] symbol  : method assertEquals  (java.lang.String,java.lang.String,in  t)      [javac] location: class org.w3c.domts.level1.html.table07      [javac]       assertEquals("vrowsLink","1",vrows);      [javac]       ^      [javac]  D:\domts\2001\DOM-Test-Suite\build\java\org\w3c\domts\level1\html\ta  ble51.java:55: cannot resolve symbol      [javac] symbol  : method assertEquals  (java.lang.String,java.lang.String,in  t)      [javac] location: class org.w3c.domts.level1.html.table51      [javac]       assertEquals("spanLink","20",vspan);      [javac]       ^      [javac] 7 errors    BUILD FAILED    Compile failed, messages should have been provided.    Total time: 2 minutes 11 seconds  -------------------        

      > I do have a couple of questions.  >  > 1)  For the Document interface, it appeared that the following were  missing:  >  >         doctype  >         documentElement  >         createCDATASection  >         createComment  >         createDocumentFragment  >         createElement  >         createProcessingInstruction  >         createTextNode  >  >         getElementById (maybe a typo -- I saw getElementsById)  >         implementation  (should this be Document.implementation)?    doctype and documentElement are <Document.getDoctype> and  <Document.getDocumentElement>.  The others are in the schema documentation on  http://home.houston.rr.com/curta/domtest/domtest.html.  I did typo  getElementById    A test has to start by either loading an XML file using <load> or accessing  the DOMImplementation under test with the <implementation> tag (in case you  are building a document dynamically) both of these would get transformed to  an code specific for the parser under test.    > I just looked at the Document interface -- there may very well be others.  > Is this schema  > possibly still in process?    Definitely very much a work in process, I initially posted it only after a  few hours of work to let you know I was thinking.    > 2)  What are you using as names for the methods and attributes -- the IDL  > names, the java  > binding, or something else?  This becomes important particularly for the  > attributes -- they  > are defined as get/set methods in java, and as attributes in ECMAScript.  > Differences are  > either handled here, or will have to be handled in the transformation, and  > was the primary  > reason for using IDL names as entity references in the other approach.  > Doing so with a  > conditional include allowed for the automatic substitution of  > binding-specific names.  I don't  > mind doing it another way -- do you have something else in mind?    I am using the Java binding names since there are distinct content models  for the accessors and mutators.  I am aware that the IDL and ECMAScript  binding are expressed in a property notation.  The fact that  <Node.getNodeValue> is a property accessor is maintained in the schema (its  type is DOMPropertyAccessor) and that information could be used in the XSLT  transform that generates the ECMAScript tests.    >  > 3)  Would it be possible to make use of inheritance for your  > attribute/method declarations?  > I would think that this would be an advantage that schemas could provide  > over a DTD  > approach?  I don't currently see attributes and methods defined for  > inherited interfaces.  For  > example, Text should inherit everything from CharacterData, which in turn  > should inherit  > everything from Node.    I don't believe that it is necessary or beneficial to replicate elements for  the inherited methods and  properties.    <Node.getNodeValue obj="node" var="value"/>    would get translated to:    value = ((Node) node).getNodeValue();  //Java    or    value = node.nodeValue;  //ECMAScript    Whether Node, CharacterData, etc appeared left of the "."  would only add an  "instanceOf" check that could already be handled with a:    <assert><instanceOf var="node" type="CharacterData"/></assert>    (Note: var probably should be obj and a distinct <assertInstanceOf> would  probably be useful)    > I'm not sure if I have mentioned that we have added about 200 tests to the  > the collection  > of NIST tests and I expect that about another 200 will have to be written  to  > fully cover  > DOM Level 2 -- we have covered namespaces, errata, and exceptions, but  have  > not  > fully accounted for inherited attributes/methods.  In a couple of days, I  > should be finished  > with a proposed list of tests for all interfaces, with a mapping of the  NIST  > tests.  We  > can then identify any holes and will be ready to write additional tests.  I  > would like to  > use the TSML for this purpose.    I've been doing some exploratory work on DOM 2 Events testing and have  encoded about 20 tests in the domunit CVS and have been working on  corresponding language elements to support that type of testing.    Here is basically what I was hoping to do:    a) Make a domunit release for Java (now with support for JAXP, Batik and  Oracle and additional "Unofficial" tests).    b) Relay my interpretations of results to Oracle, Batik and Crimson teams.    c) Make some additional refinements to the schema.  The most significant  would be the ability to nest code within assertions that would only execute  if the assertion was true.  This eliminates either asserting that an object  was not null and then executing a method on it and throwing an exception or  having to code an identify if immediately after the assertion.    <Node.getAttributes obj="element" var="attributes"/>  <assertNotNull actual="attributes">      <!--  code that only gets executed if attributes != null -->      <NamedNodeMap.getNamedItem obj="attributes" var="domestic"  name='"domestic"'/>      <!-- ...  -->   </assertNotNull>  <!--  other tests that don't depending on attributes != null  -->    d) Recode the domunit source to the schema and make any necessary  refinements or corrections.  I had originally thought that this should be  automated so you could round trip, however with schema validation of the  test definition it shouldn't be that bad to develop in XML.  So I'll  probably do this as a trial and error conversion using a programming editor.    e) Iterate on a XSLT sheet targeting JUnit    f) Regenerate domunit from the XML source using (e)    g) Modify e for ECMAScript and C++      I'm going to try to get (a-b) done today, (c-e) over the next few days.  As  I put things in the xmlconf CVS or make releases, I'll announce it on  xmlconf-developer but won't on  www-dom-ts.        

      I've fixed test-to-java.xsl to eliminate the problem.  The parameter type was wrong and the value type was missing on a template call to generate arguments for property mutators.  Since things were seriously wrong the template hoped for the best and emitted the warning and the raw parameter value.    There were a decent number of problems with the DOMBuilderTest1 that schema validation uncovered (once I fixed some issues with schema generation).  I've attached modified copies of DOMBuilderTest1.xml and dom3tests.ent.  The problems were:    short and String were used for type parameter of var elements.  I added short to the list of supported datatypes and changed String to DOMString in the tests.    <var> elements must appear before any other statements in the body of the test.    changed the spec attribute of <subject> to resource.    Added SYSTEM 'dom3.dtd' to the document type declaration.  MSV would not schema validate with a document type declaration but without definitions for all the encountered elements.    Changed the id attributes on assert statements to meaningful unique values.  The assertion IDs are intended to cross reference test failures back to specific assertion statements.    dom-to-xsd.xsl and dom-to-dtd.xsl would produce the readonly form of an property element when there was at least one use of the property name that was readonly.  This resulted in systemId not having a value attribute since there was one readonly form in addition to the read/write use in DOMInputSource.  I changed to tests so the readonly form is only emitted when all uses of the property name are read-only.    I added Jeroen's dom3-gen-java and dom3-javac targets to allow quick iterative code generation.  I would suggest trying to find better names for them since they are confusing with the targets that are used for full rebuilds.    I had hoped to avoid DTD production for Level 3 since there were a decent number of complications that did not affect schema generation.  However, use of external entities in the L3 tests requires (at least for MSV as of 2002-04-14) a DTD before schema validation could proceed.  The DTD produced by dom3-dtd contains multiple declarations for some elements, but is sufficient to let MSV proceed to schema validation.  To check tests, run dom3-dtd at least once to get a copy of dom3.dtd into the tests/level3/ls directory and run dom3-schema to get dom3.xsd into the build directory and then    java -jar msv.jar build/dom3.xsd tests/level3/ls/*.xml                    text/xml attachment: dom3tests.ent    text/java attachment: DOMBuilderTest1.java    text/xml attachment: DOMBuilderTest1.xml          

      > 1. Browser sniffing -- it seems that the sniffing is not elaborate  > enough, makes Mozille, for example, run code with calls to an ActiveX  > object.    I'll admit that it isn't elaborate, but under what scenario does Mozilla run  an ActiveX object?    > 2. Tests on default attributes require a validating parser, which is not  > a requirement (for XML)    It doesn't require that the document be validated, but it does require that  the DTD be processed.  The DOM rec doesn't seem to allow a processor to omit  default attributes or return null for doctype when there is a DTD.    , for HTML default attributes need to be there.  > The issue is then that the TS tests the XML appclication DOM, not the  > browser DOM    The DOM Level 1 test suite currently only contains tests for XML and SVG  documents.  Microsoft IE does not have an browser implementation of the XML  DOM so the MSXML2.DOMDocument is used for tests using XML documents.  Since  Mozilla does have a XML DOM in the browser, it is used for tests on XML  documents.  I believe that Netscape was converting going to be providing DOM  1 Core tests that use HTML documents, and when those tests are run using  HTML documents they will use the browsers HTML DOM implementation.    > And from IBM:  > 1. readonly issues, as indicated in a previous message    Let me search the archives and come up with a history of the discussion on  these tests.    > 2. Ability to run single tests (in Java) instead of the entire suite. I  > promised to come back with relevant info on how not to run entire suites  > (this is the way we run it right now)    From the command line, if you do:    java -classpath dom1-core.jar <testclassname>    such as:    java -classpath dom1-core.jar  org.w3c.domts.level1.core.documentcreatecdatasection    it will run just the specified test twice (once for each configuration).  Individual tests cannot be run (currently) from JUnit GUI's since there are  not junit.framework.TestCase derived classes corresponding to each test.        

      The typical caution about trusting anything posted at 4 AM.    I've just committed a new build.xml and DOMTestSuite.js.  build.xml was changes to make the target directories for dom2-core-gen-jsunit and dom2-html-gen-jsunit consistent with the layout of the DOM L1.    DOMTestSuite.js has a series of changes:    The existing sniffing code had been alleged to misidentify Mozilla as IE, however no specifics were provided.  I've encorporated the detection logic from http://www.mozilla.org/docs/web-developer/sniffer/browser_type.html which will hopefully eliminate the problem.    The Mozilla implementations of isDOMExceptionCode were always returning true instead of returing (ex.code == code).  This was an oversight, but should not change the Mozilla results.    The Adobe SVG implementation of isDOMExceptionCode still always returns true.  However, there wasn't enough time to map the returned exception.number to DOMException.code's.    (Always returning true from isDOMExceptionCode will cause tests that expect an exception to pass as long as some exception is raised.)    If svg_alltests is run from Mozilla, the Mozilla SVG DOM implementation will be tested.  Running this test on a Mozilla version without SVG will cause an very unpleasant number of browser windows to be opened.  Running the test on a Mozilla with SVG will cause only 52 windows to be opened.    Repeatedly running the DOM L1 Core tests on Mozilla would give slightly different failure counts (typically off by one) which does support the assertion that pressing enter in response to an "loading document" alert might cause an false failure.  It seems impossible to determine if a document has been loaded before exiting the load method since any registered load event listener will never get called until the load() method is exited regardless of the number of times that alert() is called.  Likewise, neither will the document.documentElement.tagName change.    Perfectly resolving the problem would either require a test framework that supported asychronrous tests or a synchronous load method for Mozilla.        

        Kang Jeong-Hee wrote:    >http://www.w3.org/TR/DOM-Level-2-Core/glossary.html#dt-interface  >define the term 'interface' as a set of methods.  >  I'd acknowledge the glossary definition should be changed to say "a set  of methods and attributes" or something similar.        

      All the tests in the CVS depending on loading either staff.xml or staffNS.xml and therefore have a prerequiste of an implementation of DOM that supports reading XML documents.  Unfortunately, it is not possible to run the same tests on an HTML DOM implementation since it is not possible to create a logically equivalent HTML version of staff.xml.  It is possible to run most tests on an SVG DOM implementation since if the document element is changed from <staff> to <svg:svg>, an SVG implementation will see all the inner content as metadata of a empty drawing.  (Whether rightly on wrongly, Adobe's SVG implementation will refuse to load a document whose document element isn't svg)    That said, we should have on deck a large body of HTML DOM tests from NIST.  Those that do not require HTML specific interfaces should be generally applicable to any DOM implementation, provided that you create equivalent XML, WML. SVG, et al documents and the proper document is loaded in response to the <load> instruction.    That said before the HTML tests are introduced, the existing tests in level1/core and level2/core should have qualifiers added that indicate that they have a prerequisite of an XML DOM or SVG DOM implementation (that can be added with a regexp replacement in just a few minutes).    Since XML implementations do not add any interfaces beyond core, the only test in level1/xml should fail if hasFeature("XML","1.0") is false.    The "HTML" tests should be divided into two groups.  Those that depend on HTML specific interfaces should go into level2/html and those that do not should go into level2/core.  For those in level2/core, we should create a logically equivalent XML, SVG, WML et al source document and have those tests run in any processor that supports "Core".  The implementation of behind <load> would need to be enhanced so that it picks the appropriate file, what I was thinking was that if you had    <load var="doc" href='"testdoc"'/>    that it would load testdoc.xml, testdoc.html, testdoc.svg, testdoc.wml as appropriate.    Any thoughts on when the HTML tests will be read to be committed?        

        http://www.w3.org/TR/DOM-Level-3-Core/core.html#Embedded-DOM        For example, the MathML [MathML 2.0] and SVG [SVG 1.0]      specifications are developing DOM extensions to allow users to      manipulate instances of these vocabularies using semantics      appropriate to images and mathematics (respectively) as well as the      generic DOM XML semantics.    "images and mathematics (respectively)" should be changed to   "mathematics and images, respectively,"        

      version of type DOMString  This is the version number of the feature to test. In Level 2, the string  can be either "2.0" or "1.0". If  the version is not specified, supporting any version of the feature causes  the method to return true.    The NIST tests expects impl.hasFeature("XML","") to return true basically  interpreting "version  is not specified" in the previous paragraph to at least include "version is  zero length string".  It would be good if the paragraph could clarify this saying, for example,  "the version is null or an zero length string"        

      Added a suite containing all tests that do not attempt document modification (readonly.xml)  for convienient testing of read-only DOM implementations (apparently Xalan-J).  This undercovered several tests that had indicated that a loaded document would not be modified when it actually would have been.    I've also added tests or assertions (to documentcreate* tests) that cover setNodeValue for all derived types and covered Entity.getSystemId and Entity.getNotationName.    Mozilla seems to be very close to supporting null strings (see http://bugzilla.mozilla.org/show_bug.cgi?id=69468) will evaluate a daily build in the next few days.        

      I've had some more thoughts about tests that can work on different media-types.  For example, most of the core tests can work on both XML and SVG implementations, most of the HTML tests could work on both XHTML and HTML implementations.    However, since some processors could support distinct DOM implementations for multiple document classes (for example, a browser could have a distinct implementation for XHTML and HTML), you can't just stiff the browser and pick one document class.    Another issue is that HTML implementations are case-insensitive and XHTML implementations are case-sensitive (at least on the Core methods).  The base tests should use lower case tagnames for parameters.  However, there should be some methods that test the case-insensitivity of HTML implementations.    To declare that a test depends on a case-insensitive implementation (i.e. HTML not XHTML), I would suggest adding an:    <implementationAttribute name="caseInsensitive" value="true"/>    to the prologue of a test.  Again most HTML tests should not have this which would allow it to test both XHTML and HTML implementations.    For tests that could apply to multiple media-types, probably would add a <mediaType> to test suites that would allow you to have an XHTML suite and an HTML (or XML and SVG) suite without having distinct XHTML and HTML versions of the tests.  Will think about that a little more.        

        Philippe Le Hegaret wrote:    >On Mon, 2003-06-02 at 23:45, Curt Arnold wrote:  >    >  >>The current public working draft of L3 Core does not define NameList.  I   >>assume that it is defined in the current working group draft.  If   >>NameList has a provision to creation of nodes from a name entry, then I   >>would be satisified with the resolution.   >>      >>  >  >Here is the current NameList interface as defined in the incoming  >version of the Core draft (to be published really soon):  >  >// Introduced in DOM Level 3:  >interface NameList {  >  DOMString          getName(in unsigned long index)  >                                        raises(DOMException);  >  DOMString          getNamespaceURI(in unsigned long index)  >                                        raises(DOMException);  >  readonly attribute unsigned long   length;  >};  >  >It does not define a method to create an Element or Attr node, but doing  >so can be achieved easily using the createX() methods.  >  >    >  >>I do believe it would be essential to have a coordinated release of a   >>Core public draft with the next public working draft of L3 validation.  >>      >>  >  >Our current effort is focused on updating the Core and Load/Save drafts  >so those drafts should be back in sync soon.  >  >Philippe  >  >  >    >    Adding    boolean contains(DOMString name);  boolean containsNS(DOMString namespace, DOMString localName);    might allow the elimination of ElementEditVal.isElementDefined[NS]        

      After a little more thought the existing XPathResult doesn't seem that far off.    Splitting XPathResult into XPathSingletonResult and XPathSequenceResult isn't really satisfying since it just starts a process that would be fulfilled when you had a distinct interface for XPathDoubleResult, XPathStringResult, etc.  Not necessarily a bad thing, but it should either be at one extreme or the other.    Since resultType could have values that imply no type coersion of the values, it could be compatible with explicit casts in the XPath expression, so having coersion to three or four types specifiable through the resultType isn't a restriction to just supporting those types.    The permutations for resultType start getting bad if you just try to enumerate them without any pattern.    Maybe something like:    const unsigned short ANY_TYPE = 0;  //  //   if none of the COERCE bits are set,  //     the type is determined by the XPath expression  //  const unsigned short COERCE_NUMBER = 1;    const unsigned short COERCE_STRING = 2;  const unsigned short COERCE_BOOLEAN = 4;  const unsigned short COERCE_NODE = 8;  //  //  //  const unsigned short ATOMIC = 16;  const unsigned short SNAPSHOT = 32;  const unsigned short ITERATOR = 64;  //  //  order does not need to preserved in the result set  //  const unsigned short UNORDERED = 128;  //  //   existing constants expressed as combinations of the previous  //  const unsigned short NUMBER_TYPE = COERCE_NUMBER + ATOMIC;  const unsigned short STRING_TYPE = COERCE_STRING + ATOMIC;  const unsigned short BOOLEAN_TYPE = COERCE_BOOLEAN + ATOMIC;  const unsigned short UNORDERED_NODE_ITERATOR_TYPE =       COERCE_NODE + ITERATOR + UNORDERED;  const unsigned short ORDERED_NODE_ITERATOR_TYPE = COERCE_NODE + ITERATOR;  const unsigned short UNORDERED_NODE_SNAPSHOT_TYPE =      COERCE_NODE + SNAPSHOT + UNORDERED;  const unsigned short ORDERED_NODE_SNAPSHOT_TYPE =      COERCE_NODE + SNAPSHOT;  const unsigned short ANY_UNORDERED_NODE_TYPE =      COERCE_NODE + ATOMIC + UNORDERED;  const unsigned short = FIRST_ORDERED_NODE_TYPE =      COERCE_NODE + ATOMIC;    If you wanted to get something back in a schema datatype like date, you would just use ATOMIC and either use an explicit conversion or rely on the type of the expression.  If you wanted an array of dates, you would use SNAPSHOT or ITERATOR.      To support arrays of atomic values, you could either change the result type of iterateNext and snapshotItem to be XPathResult or you could leave the Node returning methods as convienience functions for XPathResult returning functions    //  //   functionally equivalent to   //       XPathResult nextResult = iterateNext();  //       return (nextResult == null) ? null : nextResult.singleNodeValue;  //  Node  iterateNextNode();  //  //   functionally equivalent to   //       XPathResult result = snapshotItem(index);  //       return (result == null) ? null : result.singleNodeValue;  //  Node  snapshotNode(unsigned long);    XPathResult iterateNext();  XPathResult snapshotItem(unsigned long);    //  //    a clone method for defensive copying would be helpful  //          XPathResult cloneResult();    For XPath 2 queries that returned other types, you would need a mechanism better than the resultType enumeration to determine the type.  Foreshadowing this with a valueTypeNamespace and valueTypeLocalName would seem reasonable.  Access methods for schema datatypes, could be relegated to a XPath2Result to be defined later.        

      If I remember correctly, Phillipe started working on adding support for  Batik and DOM4J for the test suite and DOM Level 3 LS, neither of which  support JAXP and probably can't since they expose interfaces beyond DOM  Level 2.  Whatever happened to that?        

        This would be more appropriate as an read-only attribute.  The   description is insufficient since it doesn't explicitly explain under   what conditions the implementation is able and required to determine   that the content model only contains elements.        

          attached mail follows:  <div class="moz-text-flowed" style="font-family: -moz-fixed">Peter Kelly wrote:  > Hi,  >   > Section 1.3 of the DOM Level 2 HTML spec states:  >   > "element and attribute names are exposed as all uppercase (for   > consistency) when used on an HTML document, regardless of the character   > case used in the markup"  >   > However, some of the test cases rely on the attribute name being returned   > as lowercase, even though the document is html. For example, in   > hc_attrname.html in the jsunit tests:  ...  >   > Mozilla & IE both return the nodeName as lowercase, but KHTML returns it   > as uppercase. Am I correct in assuming this is the correct behaviour?  >     The hc_* tests were created from the XML core tests mapping each element      and attribute name from the staff.xml test document into an HTML   element or attribute name so that hc_staff.xml and .html would be legal   (but non-sensical) XHTML and HTML documents.  That work was done after   the last release of the DOM1 and 2 Core tests and checked against XML   parsers, however I'm not sure if we have thoroughly reviewed them   against HTML parsers and properly tweaked the case expectations.    Another potential point of confusion is the test harness is probably   configured to test the XML parsers, so you may be seeing MSXML and   Mozilla's XHTML DOM implementation returning lowercase where their HTML   implementations would return uppercase.    I've been spending time on converting the test generation code to use   the current JSUnit version, but I've been holding back until I got   everything back to the equivalent capability of the previous harness.   However, I probably should start committing my work even in its   functional but unfinished state.    To summarize:    A) The hc_* tests are a work in progress and HTML case expectations may   not be perfect.  B) If you are seeing Mozilla and IE return lowercase, the harness is   probably testing their XHTML implementations.    I'll research this further and get back within the next day.    </div>        

      Sorry,  forgot to escape a backslash in the regular expression for  stringLiteral.  Fixed now in the CVS.    The current constraints on stringLiterals are they start and end with double  quotes (") and contain no embedded quotes unless escaped.  There are three  supported escape sequences \", \\ and \n.  Additional escape sequences can  be added if necessary, but keeping the set small will make it easier to  support languages with different escaping conventions.    I've added an explicit UTF-8 encoding to test-to-java.xsl and other  transforms and added a explicit UTF8 encoding to the <javac> tasks in  build.xml.  This should allow consistent processing for non-ASCII characters  in string literals.        

      I guess the another weird twist is that one event group could participate in  two documents if you registered a listener on one node that was adopted and  another on a node that was not adopted.    Definitely think writing the tests for this one will be fun.        

        The values assigned for VAL_TRUE, VAL_FALSE and VAL_UNKNOWN appear to   just follow the sequence established by VAL_WF, VAL_NS_WF,   VAL_INCOMPLETE and VAL_SCHEMA (1, 2, 3, 4).    In scripting languages where the symbolic constants are not available,   that would lead to code like:    if (node.canInsertBefore(node1, node2) == 6)    which isn't obvious.  It would be beneficial to change the values so   that, at least, VAL_FALSE is 0.  I'd recommend, VAL_FALSE = 0, VAL_TRUE   = 1 and VAL_UNKNOWN = 2.        

        http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo        Because parameters are exposed as properties in the ECMAScript      Language Binding, names are recommended to follow the section "5.16      Identifiers" of [Unicode] with the addition of the character '-'      (HYPHEN-MINUS) but it is not enforced by the DOM implementation.    The configuration parameters do not appear to be exposed as properties   in the ECMAScript language binding.  If they were, allowing hyphen-minus   would probably cause significant issues.        DOM Level 3 Core Implementations are required to recognize all      parameters defined in this specification.    Many of the parameters are XML specific.  The current DOM spec preserves   the distinction between Fundamental and Extended interfaces leaving the   possibility for a L3 Core conformant implementation for HTML or another   markup language.  Possibly the list could be split into parameters   supported by all implementations and parameters that are required to be   supported by implementations that return true for hasFeature("XML", "3.0")        

        ----- Original Message -----  From: "David Brownell" <david-b@pacbell.net>  Sent: Wednesday, November 21, 2001 11:19 PM  Subject: Re: L2-core-getElementsByTagNameNS02      > > Does GNUJAXP implement the bahavior that you are expecting?  >  > Yes:  "In NO namespace" != "In ANY namespace".  >  >  > >  Could you post the overall test results from GNUJAXP.  >  > Referring to the DOM-TS tests from CVS as of a couple days ago,  > and just summarizing results with the current GNUJAXP release ...  > everything passes EXCEPT:  >  >   - Quite a number of the tests that try to verify behavior for  >     readonly nodes produce errors because instead of using  >     such nodes as found in the document, they try to create  >     new entity refs ... such refs are created with no children.  >  >     Seems to me a number of those tests would be better if  >     they verified that behavior using the entity ref nodes in the  >     document.  And those tests should likely not execute  >     when the parser isn't populating entity refs.  (Lots of tests  >     such as "unreadablenamenomodificationallowederr" fail,  >     about a dozen total, this is the main L1 failure mode. :)  >  >     (This is an area where IMO there are longstanding API  >     deficiencies in DOM.  First, you can't mark subtrees as  >     readonly.  Second, entities and entity refs, in their entirety.  >     I recall discussions late in DOM L1 to ensure it was legal  >     to never populate these nodes, yet these tests insist that they  >     must always be populated.)    Could you point out something in the specs that would support an entity  reference created with createEntityReference not being identical to an  entity reference that was created due to an entity reference in the source  document?    If that was allowable, then you should never trust the child contents of an  entity reference.    The tests that were expected to raise a NO_MODIFICATION_ERR. as submitted  from NIST , depended on entity references being preserved.  However, since  an implementation is free to expand entity references (for example, Xerces-C  cannot preserve entity references), these tests would be skipped and the  particular behavior not tested.  To test the same behavior for  implementations that expanded entity references (or for implementations  where this behavior is switchable), I created variants of the NIST supported  tests that created the equivalent entity reference and added an EE suffix.    So for implementations (or configurations) that support entity preservation,  the same behavior is tested with both entity references created from the  base document and entity references created using createEntityReference.  For implementations or configurations that expand entity references, only  the createEntityReference test is run.    Xerces-J 1.4.3 shows an interesting behavior, when entity reference  preservation is on, the createEntityReference tests pass.  However, the same  tests fail when entity references are expanded.  It seems inappropriate that  the document loading configuration should affect the behavior of subsequent  document manipulation.      >   - Some of the L2 importNode tests acted strange.  I need to  >     look at them some more.  For example, one seems  >     to expect that importing a no-namespace node will cause  >     the imported node to acquire a namespace.  >     (importNode{07,10,11,12} gave problems.)  >  >   - Those L2 getElementsByTagNameNS tests, as mentioned,  >     where I think the tests are wrong (since they treat the "no  >     namespace" case like a "has a namespace" case).  >  > In one parser mode, some more of the L2 tests failed,  > such as some "prefix" tests.  Haven't had a look at any  > of those to see what's up yet, could be a bug in tests or  > in the implementation.  For L1 it was mostly those "create  > another populated entity ref" tests that failed.  >  > - Dave  >  >  >  >        

        Robert Clary wrote:    > The use of a javascript file to generate the list of tests in the   > selection page and in the new-alltests.html suite. This eliminates the   > need for the *alltests.xml suite definitions and the   > *alltests.xml->*alltests.html transformation but requires a different   > transformation to create the javascript file. If this approach is   > approved I would like to work with you to determine the best approach   > for implementing it.    The alltests could be generated from a directory using Ant.  However,   the original idea behind the test suite definitions was that tests would   go through a review cycle and there could be tests in the directory that   were submitted but not accepted.  alltests was going to contain all   tests regardless of status and there would be other suites of accepted,   provisional and rejected tests, however that never evolved.  The   downside of moving a test to signify rejection was that any test results   that used that URL would be broken.    > This javascript file and it's recorded tests, their files and   > implementation attributes provides the ability to determine, test and   > filter tests by content type and implementation attribute.    I think I would prefer a more declarative approach, maybe an array   containing with elements like:    tests[tests.length] = {    "characterdatainsertdatanomodificationallowederr",   // test name  null,                       // content type  { "XML" }, { null },        // features name and versions  { "expandEntityReferences" }, { false } };  // impl attributes    The function suite() method could iterate through the array and add only   the applicable tests to the suite.        > The use of warn to record when an implementation does not match the   > implementation attribute requirements of a test or the implementation   > attributes selected by the user. I think the trace facilities in JsUnit   > can be put more to use in reporting more information regarding the tests   > and their results.    The Java framework does not give any indication that non-applicable   tests are omitted.  If you want to avoid the situation of a processor   passing, for example, the L3 Load Save suite because it passed 0 of 0   tests by return false to hasFeature("LS-Load", null), you can always   have one unguarded test that checks the feature.  I think that listing   page after page of inappropriate tests could be distracting.    > The addition of .xhtml versions of the XHTML data files and the use of   > application/xhtml+xml content type for http based test scenarios.    I'll also application/xhtml+xml to the contentType enumeration in the   schemas and DTDs.    > The iframe in main-loader.html is not used to load the data files in   > native mode. In native mode, the data files are loaded via iframes which   > are generated during the loading of the test via document.write. There   > is no limit to the number of loaded documents using this approach. Your   > use of the the variable name for each document allowed me to name each   > iframe separately from the actual file name and removed the limitation I   > originally had last year of having unique file names.  >   > The issue I have with the xslt automatically creating the iframes is   > that only the native loader requires iframes and they are not needed for   > MSXML[3|4] or Adobe SVG implementations. I believe this is better   > handled during load via document.write.    I avoided dynamically created the IFRAME's since I thought it was one   less moving part and the cost of an unused IFRAME was negligable.    >   > It seemed to me that, in the current version in CVS the older "Builder"   > code is still in the file, but it appeared to have been orphaned and   > replaced by the IFRAME loader which was limited to loading HTML in the   > iframes.    When I migrated the previous code to JSUnit 1.3.3, I retrogressed in   functionality and temporarily dropped support for the other loaders, but   I expected to reimplement additional loaders as we added back   functionality.  I prefer the loader classes over extensive use of switch   statements to achieve the same thing.      > The issue I have with the hc_* tests is that they don't follow the   > normal scheme and would make the determination of supported content   > types for a file more complicated, but not impossible. They seemed to be   > a "bit of a wart", and if possible I was hoping to not have to special   > case the supported content type determination for files.    For XML processors, they are essentially redundant with the non hc_ (for   HTML compatible) tests.  However, without them there is minimal coverage   of L1 core behavior for HTML processors.        

      I've made some minor enhancements to the test-matrix.xsl, cleaned out some spurious test subjects and manually added subjects to tests that had metadata but no explicit subject.  I also restored the Software License on the tests which had inadvertantly been stripped in earlier processing.    I'll try to get the ECMAScript harness up and working over the weekend.        

        I've logged the last issue as bug 443 and have committed changes to   dom-to-schema and dom-to-dtd to make resolver and expression optional   and have removed those attributes on calls to XPathExpression.evaluate.        

        > It's great to have a DOM Level 3 LS test suite available.  Since it  > contains about 70 odd test cases, any plans to add additional tests and  > fill in coverage gaps if needed?  >    I have good intentions to adapt some of the recent normalizeDocument   tests from L3 Core to L3 LS.  Right now there are few or no tests that   check that configuration parameter settings are effective.  An indirect   test of LS is to use the TestDefaultLS and TestDefaultLSAltConfig JUnit   test cases in the other test suites.  There were some unusual test   failures when driving Xerces using DOM 3 LS vs JAXP for the DOM L3 Core   test suite, but I haven't investigated them.    My current plan is to update the distribution packaging of all the   suites, run a grand survey of the existing test suites against as many   implementations as I can find and then augment L3 LS.        

        Sorry about the delay on responding.  I'm unclear on the difference   between "Parser Configuration" and "Test Implementation Attributes".    Is the latter is a way of subselecting tests that, for example, require   namespace awareness?  Could you explain the motivation for that, I   don't see it.    Could you also explain what you were trying to do with the test feature   and version combo?  If I select "XML" and "Ignore", then 83 tests are   identified as compatible and 439 are identified as incompatible,   however all L1 Core tests are compatible with an implementation   returning true for hasFeature("XML", null).  Maybe only 83 explicitly   declare that they require "XML".    There is a requirement to be able to tweak the parser configuration   (when possible).  The list of compatible and incompatible tests was   just to provide some feedback since the JSUnit will report incompatible   tests as being successfully completed where they won't appear in a   JUnit run.  If there is a need to be able to find, for example, all   tests that require feature "HTML" to be true, then that should probably   be in the test matrix since it would apply to all platform bindings.    If we could add a "warning" result to JSUnit, then we could skip the   listing of compatible and incompatible tests in the test configuration.     The incompatible tests could just note that they were effectively   skipped during test evaluation.        

      > This functionality is already expressed in Level 3 core in the Node  > interface.  By keeping the XPath version of the interface abstract, we  > permit applications to construct maps for cases where the namespace  > context is not based upon a Node in the hierarchy (although we do not  > have a create method for that type of object).  There are other  > differences, such as one you stumbled on:  XPath never requires the  > default namespace (and requiring XPathNamespaceResolver to supply it  > might make the implementer erroneously apply it to prefixless names  > within the expression).    Sorry, I hadn't looked at DOM L3 Core at the depth I looked at L3 XPath and  L3 Events.  Definitely there is a significant functional overlap between  Node.lookupNamespaceURI and XPathNSResolver.lookupNamespaceURI.  I would  think that it would be confusing if these two methods had slightly different  behavior.  I would recommend that XPathNSResolver.lookupNamespaceURI be  defined as behaving identically to Node.lookupNamespaceURI    If these methods are made optional (Issue lookupNamespaceURI-2), then it  most probably would be in a distinct interface that could make  XPathNSResolver redundant.  I definitely agree that XPath needs a namespace  resolver interface that is independent from Node.    Since null and "" are indistinguishable on some bindings, there needs to be  a clear description of the behavior with regard to default namespace.  For  example, if a return value of "" is supposed to indicate a match with the  default namespace, then it may be impossible to distinguish a match with the  default namespace and no match.  Probably the best approach is to declare  that "" should raise an exception as an argument to lookupNamespaceURI and  that a different mechanism be provided (such as a defaultNamespaceURI  attribute) to determine the default namespace.    Node.namespaceURI is pretty confusing, especially "This is not a computed  value..."  If a node is created by loading an XML document and namespace  processing was turned on, you would expect nodes to have a namespace URI  based on its prefix even if the namespace binding is defined on an ancestor  node which would require "computing" even though it would be handled  typically by the SAX layer underneath.  However saying its value is null if  the node was created by createElement or createElementNS(null,...) would  probably get make the point that you were trying to make.  "namespace URI of  this node" is also potentially confusing, since it might be interpreted as  the namespace URI of the qualified name of this node (and a complement to  localName) or as the default namespace.    Node.localName: The note on createElement and other nodes is inconsistent  with the behavior of XPath's local-name() which would return a local-name  for unqualified tag names.   I would say that localName returns the same  value as nodeName except for ELEMENT_NODE and ATTRIBUTE_NODE.  localName(doc.createElement("foo")) should return the same value as  localName(doc.createElementNS(null,"foo"))  Raising an exception or  returning null on localName(doc.createElement("myns:foo")) would be  appropriate.    DOMImplementation.hasFeature() doesn't mention "3.0" as a valid version.        

        Benjamin C. Chang wrote:    >Curt Arnold wrote:  >  >    >  >>This appears to be the only exception code in the DOM universe that does  >>not end in _ERR.  >>      >>  >  >This was changed to NO_SCHEMA_AVAILABLE_ERR.  >  >Ben  >    Satisified        

        I would prefer enhancing Events to enable UserData maintenance, though   that may require defining events types for cloning and importing and   adding a DOMStringList userDataKeys attribute to Node.    If not, does there need to be an NODE_ADOPTED operation type.    NODE_DELETED is problematic.  However, mimicing   DOMNodeRemovedFromDocument would be well defined for garbage-collected   platforms.        

        The expectations on setting a null error handler is not explicitly   defined in the drafts.  Xerces-J would appear (from code review) to   throw a  TYPE_MISMATCH_ERR in this case.        

      The first trace is pretty obvious, Xalan requires Xerces (or at least  another compatible parser).  The second might (semi-educated guess) be due  to Ant 1.4 using a now deprecated method of invoking Xalan.  The next step  that I would do would be to try Xalan 2.2 with a nightly build of Ant.        

      I've made up a little XSLT transform that creates RDF metadata for  the NIST tests by analyzing the Test Matrix at  http://xw2k.sdct.itl.nist.gov/brady/w3c-dom/test-matrix.html  I first needed  to make that document a legal XML document by adding an /> to <br> and <col>  elements.    Seems to generate garbage for the HTML tests, but does an okay job on the  XML tests.  Basically, it scans the description of the test for any  parameter name, exception code or 'returns' and emits a corresponding  <dc:subject> element for the parameter, exception code or return values with  a resource URI that should be the same as the corresponding entry in  subjects.rdf.  For example:    <rdf:Description  about="level-both/xml/nodeAppendChildNewChildDiffDocument.xml">  <dc:title>nodeAppendChildNewChildDiffDocument</dc:title>  <dc:description>The appendChild method raises a WRONG_DOCUMENT_ERR  DOMexception if newChild was created from a different document than the one  that created this node.</dc:description>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  ID-184E7107"/>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  xpointer(id('ID-184E7107')/raises/exception[@name='DOMException']/descr/p[su  bstring-before(.':')='WRONG_DOCUMENT_ERR'])"/>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  xpointer(id('ID-184E7107')/parameters/param[@name='newChild'])"/>  <dc:creator>NIST</dc:creator>  </rdf:Description>    The nistmeta.xsl is in the xmlconf CVS (viewable at  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/nistmeta.x  sl).  The sample of the generated output is at  http://home.houston.rr.com/curta/domtest/tests.rdf    The metadata processing code could append extracted in-test metadata with an  external metadata source to produce an overall external metadata file that  would be used for the test matrix and other generation.    The values of the about parameters would need to be generated to reflect the  eventual w3.org locator.    What it the significance of level-both?  Wouldn't any test that tests "both"  levels really be a DOM level 1 test?        

      Thanks for the comments.  They all should be addressed in the CVS now.        

        Curt Arnold wrote:    > Benjamin C. Chang wrote:  > ...  >  >>> validateDocument:  >>>  >>> How would warnings be issued?  There appears to be an interface name  >>> missing between "[DOM Level 3 Core]" and "interface"  >>>     >>  >>  >> The method makes use of the passed-in error handler, as described  >> in the DOM L3 CORE DOMConfiguration interface; warnings are  >> handled through this exception handler.  There is a link to this  >> interface now.  >>    >>  >  > A return value from the validation would be useful when the only   > interest was if the document was schema or DTD valid.  Without an   > explicit return value, it might be inferred that validation could be   > asynchronous.       "Passed-in error handler" suggests that an instance of DOMErrorHandler   is a parameter on the call to validateDocument.  If it were then there   would be no need to reference the definition of DOMConfiguration.     If the intention to cast the document to DOMConfiguration and call the   setParameter("error-handler", errorHandler), then you would need to   define what would occur if setParameter("schema-location",...) was   called after loading but before calling validateDocument.  Changing the   schema locations after document construction could be so disruptive that   you may want to prevent it and use importNode when you want to recreate   a document with a different schema.  If DOMConfiguration was then only   used as part of document loading, it might be moved from Core to Load/Save.    My current preference is to define validateDocument as:    boolean validateDocument(DOMErrorHandler errorHandler)        

      Sorry I haven't been able to get a full wrap up of the DOM Level 1 issues.    I have updated build.xml so that you can build DTD and Schema for DOM Level 3 tests.      The spec required an inordinate amount of patching as there were many entity declarations missing and a few files (core/xml/definitions/text.xml for example) that were missing.  You may manually need to copy text.xml from the Level-2 tree to the Level-3 tree, there is a <copy> statement, but didn't seem to work.    Hopefully, the next iterations of working drafts don't leave so many loose ends.  Look at level-3-version.patch and level-3-part-entities.patch for the missing entity declarations.        

      I got a chance to reread the DOM XPath after the recent discussions and I think that I understand the issues better.    Section 1.2.1    The note mentions the new Text.wholeText attribute and retrieving the whole text corresponding to a selected node.  It would be helpful to also mention Text.replaceWholeText so that you would not think that you are only limited to retrieving the whole text.    Section 1.2.3: Ranges    Since XPath returns nodes and strings...    XPath also returns booleans and IEEE doubles currently and anticipated support for other datatypes.    Section 1.3: Interfaces    XPathExcectionCode group    TYPE_ERR seems awfully generic and possible result in symbol clashes, maybe XPATH_TYPE_CONVERSION_ERR or XPATH_COERSCION_ERR.  i[m]compatible should be incompatible.    There seems no provision for signaling a bad XPath expression, say one with an unrecognized axis.  All methods that can throw an XPathException probably can throw this code.    DOMException should have a codes added (unless an existing code is sufficient) for attempting to access an invalidated NodeSet and and for when an Node is not ready for an asychronous query.  These should be DOMException codes since they would be thrown from NodeSet.      XPathException interface    To support reporting bad XPath expressions, having a DOMString expression attribute in XPathException would be useful.    XPathEvaluator interface    The name seems inconsistent with the names for other Document related interfaces.  Other specs typically use Document[SpecName], DocumentEvent, DocumentRange, DocumentViews, DocumentTraversal, for their augmentation of the Document.   Though it may not be the most intuitive naming convention, naming the interface DocumentXPath would be consistent with the other DOM specs.    Issue XPathEvaluator-1:    I would strongly encourage adding a generic evaluate method in addition to the type-specific evaluateAs's.  I do not believe that it is necessary to specify a type argument in the call, since XPath 2.0 suggests that it would provide explicit cast operators into the primitive XML Schema types.  The two ambuities that I see would be if:    Expression matching a single node could be either Node or NodeSet, should be NodeSet.    Expression matching no nodes could either be Null Node, Null NodeSet, or Zero-length NodeSet.  I think zero length node set is preferrable.    Earlier messages portrayed that determining the type of the result of an expression would be complicated.  I believe that is due to conceptually imposing the implicit coercsions that occur within  XSLT to the evaluate method.  I do not believe it needs to be complicated, the result of an evaluate call for a path expression should be a NodeSet, possibly zero-length, functions should return the platform equivalent of their return type, numeric expressions should return the platform equivalent of double (java.lang.Double on Java).    Object result = xeval.evaluate("@href",...);  assertTrue(result instanceof NodeSet);    result = xeval.evaluate("string(@href)",...);  assertTrue(result instanceOf java.util.String);    result = xeval.evaluate("number(@length)",...);  assertTrue(result instanceOf java.util.Double);    //   coercses to date regardless of schema type for date attribute  result = xeval.evaluate("xs:date(@date)",...);  assertTrue(result instanceof java.util.Date);    //    always returns NodeSet regardless of schema type for date list  //       however you might be able to interrogate future Attr interface versions to  //           get schema datatype  result = xeval.evaluate("@date",...);  assertTrue(result instanceof NodeSet)    //  //   a double regardless (at least for XPath 1 queries) of types of  //       schema types for attributes one and two since   //       numeric operators are strictly defined as operating on doubles.  result = xeval.evaluate("@one + @two"...);  assertTrue(result instanceof java.lang.Double);      I would suggest that in anticipation of XPath 2.0 that:    a) Types corresponding to the 19 primitive XML Schema data types be defined for each of the bindings.  For example, that for the Java binding, xs:dateTime be represented by java.util.Date for the Java binding, that xs:date be represented by the starting instant in a java.util.Date.  Since the identity of the 19 types are fixed since XML Schema datatypes is a recommendation, these bindings could be defined now, though it would not be possible to get a java.util.Date from evaluate without an XPath 2.0 compatible query.    b) That feature strings are specified so that you can determine the version of XPath expression supported.    For example, "DOMXPath" could be used to determine what level of XPath DOM interfaces are supported and "XPath" what version of expression syntax is supported (alternatively XPath for interface version and XPathExpression for XPath expression version).    //   if processor supports DOM XPath 3.0  if(impl.hasFeature("DOMXPath","3.0")) {      //  if XPath 2.0 expression syntax      if(impl.hasFeature("XPath","2.0")) {      }      else {          if(impl.hasFeature("XQuery","1.0")) {             ...          }          else {             if(impl.hasFeature("XPath","1.0")) {      c) That evaluate, evaluateAs (and any other methods that take XPath expressions)  have an additional parameter that indicates the expression language.  null, "", or "XPath"  would indicate the highest version of XPath supported by the processor, "XPath1.0"  would mean strict XPath 1.0, "XPath2.0" would mean the query requires XPath 2.0  and possible "XQuery" and "XQuery1.0" if that is not premature.    If this is added, XPathException should also report the query language using  a version specific identifier.    evaluateAsNode method    As mentioned by others "returns the first node" should be replaced by "returns any node".   If there are multiple matches and the first node in document order is truly wanted, then the query could be expressed as "foo[1]".    evaluateAsNodeSet, Active and StaticNodeSets and beyond....    From my previous messages, you know that I've been perplexed by the complexity and motivation behind ActiveNodeSet and StaticNodeSet.  I think that I know understand the use cases that lead to their formation (which I'll enumerate shortly) and think that there are simpler solutions that address those use cases better than the current formulation.  If I've missed a use case let me know.  Not all processors would have to have optimal behavior for all use cases, however it would not be possible for the processor to guess the optimal behavior without some hints on the call.    Use Case 1: Immediate evaluation with static result or node set    Processing can not continue until the results are known and once determined the result should be available regardless of document mutation.    The evaluateAsNumber(), evaluateAsString(), evaluateAsBoolean, and evaluateAsNode only address this use case.  If you do,    String address = xeval.evaluateAsString("address"...);    The query must be complete before the function returns and the return value is not invalidated or changed by document mutation after the function returns.    evaluate and evaluateAsNodeSet should also address this use case, however they also address other use cases and the desired behavior should be specified.    Use Case 2: immediate evaluation with result set invalidated on document mutation    No substantial work can be done until the query is complete and  all members of the result set are anticipated to be iterated,   so lazy evaluation or asynchronous evaluation would not be beneficial.    The source document may be changing and the application desires the result  set to be invalidated if there are any document mutation.    This case could be accomplished by wrapping the node set from use case 1 by  an object that implemented both NodeSet and EventListener and registered itself  as an eventListener on the document node.  However, this use case can be  addressed in the spec as a convienience to users and to implementations that  don't support DOM Events.    Use Case 3: lazy evaluation with static result set accessed in document order  Use Case 4: lazy evaluation with result set accessed in document order invalidated on document mutation  Use Case 5: lazy evaluation with static result set accessed in indeterminant order  Use Case 6: lazy evaluation with result set accessed in indeterminant order invalidated on document mutation    No substantial work can be done before at least one node of the result set is known.  Only part of the result set may be iterated, so it may be beneficial to incrementally determine the result set.  The behavior for use case 3 should be indistinguishable (other than timing) from that for use case 1, the behavior for use case 4 should be indistinguishable from use case 2.  Calling length() would typically force the completion of the evaluation.    Optimal behaviors for use case 3 and 5 may be too complex for implementation since it would require an immediate completion of the evaluation when the first mutation of the document is pending.  Basically, if an element was to be added, the outstanding node set would have to block the mutation until it determined the complete result set (or at least determined that the mutation would or would not affect the incremental determination of the result set).  However the behavior for use case 1 would be acceptible.    Use cases 5 and 6 allow an optimized behavior when the order of processing is not significant, for example, if summing the line items in an order to determine the total cost.    Use Case 7: asynchronous evaluation with static result set accessed in document order  Use Case 8: asynchronous evaluation with result set accessed in document order invalidated by document mutation  Use Case 9: asynchronous evaluation with static result set accessed in indeterminate order  Use Case 10: asynchronous evaluation with result set accessed in indeterminant order invalidated by document mutation    These cases differ from their i-4 siblings in that some substantial work could be accomplished by the caller before the first member is accessed and in the intervals between accesses.  Again other than timing issues the behavior should be indistinguishable i-4 and i-6 siblings.    Different uses may want different behavior when a node access is attempted when the next node has not been determined.  In some instances, it may be preferrable to block until the next node (or null if it was determined that no additional nodes matched) becomes available, in other instances, it may be preferrable to continue to do something else until a node becomes available.    Use cases 1sort, 2sort, 7sort and 8sort    Same behavior as 1, 2, 7 and 8 but with the nodes sorted.  Doesn't make any sense for lazy evaluation of a sorted set.    Dimensions of the use cases:    The desired behavior that a caller would prefer could be indicated by combinations of and choice of NodeSet methods.    XPathEvaluationCode    XPATH_EVALUATE_IMMEDIATE  XPATH_EVALUATE_LAZY  XPATH_EVALUATE_ASYNC_BLOCK   //  block until next node available  XPATH_EVALUATE_ASYNC_EXCEPTION  //  throw exception if node not available    This code would only be a hint that the processor could ignore and  use any behavior it wanted (except ASYNCH_EXCEPTION).      XPathMutationCode    //  result set is static, not affected by mutation,   //     possibly out of synch with current state of document  XPATH_MUTATION_IGNORE            //  //  result set in invalidated by any mutation of the document  XPATH_MUTATION_INVALIDATE  //  //   cause attempts to change document to throw exception  //  //   attempts at mutations would force a garbage collect to   //      make sure that a unused NodeSet is not blocking them  XPATH_MUTATION_PREVENT    The implementation must support MUTATION_IGNORE, but if  it cannot detect mutations, it needs to throw an exception  if a query requests MUTATION_INVALIDATE.       Lazy evaluation [document order]:    The traditional iterative loop:    for(int i = 0; i < nodeset.length; i++) {     node = nodeset.item(i);  }    would defeat lazy evaluation (since determining the length would typically only be available after the query has been completed).  Lazy evaluation (in document order) would require a loop like:    try {      for(int i = 0; ; i++) {         node = nodeset.item(i);      }  }  catch(DOMException ex) {      if(ex.code != INDEX_SIZE_ERR) {          throw ex;      }  }    Indeterminate order iteration:    A complex query over a less traditional store (say a database or distributed query system) may be able to determine members of the result set before a document or sort order may be established.  Instead of creating a distinct interface for this, I think it would be better just add to additional method to support this type of iteration on NodeSet.  To keep the object stateless (which avoids the need to worry about cloning), I'd suggest using an integer argument to act as a key with a special value (0) indicating start of iteration and -1 indicating end of iteration (all other values are reserved for the implementation to use as it sees fit to keep track of the position.    For example:    NodeSet nodeset = xeval.evaluteAsNodeSet("//person[@id]"...);  Integer iterKey = new Integer(0);  do {     Node node = nodeset.iterate(iterKey);     if(node == null) {        break;     }     ...  }  while(iterKey.intValue != -1);    Sorted iteration:    A sorting capability patterned after <xsl:sort>  would be extremely useful.  What I would suggest would be a distinct XPathSortCriteria interface with a corresponding create method on the XPathEvaluator/DocumentXPath.  If an implementation doesn't support sorting, it could return null.    Interface NamespaceResolver:    This interface acts strictly as a map between two strings, a namespace prefix that acts as a key and namespace URI as a value.  Since most platforms will already have an abstract interface, such as java.util.Map or System.IDictionary, that performs this function and a variety of concrete implementations available.  A factory method  should be provided that will generate a NamespaceResolver from an object implementing the appropriate platform interface.    In most use cases, the mapping between prefixes in the query is independent of the prefixes in the document.  Though getting a NamespaceResolver interface that corresponds to the in-force prefixes for a certain node is desirable, I'd expect it would be a secondary use case to building the mapping within the application.    ------------------------------------------------      In summary, here is a Java-esqe sketch of the interfaces as outlined in this document:    package org.w3c.dom.xpath;      public class XPathException extends RuntimeException {     public XPathException(short code,             String queryLanguage,             String query,             String message) {            super(message);            this.code = code;            this.query = query;            this.queryLanguage = queryLanguage;      }      public short code;      public String query;      public String queryLanguage;        public static final short XPATH_COERSCION_ERR = 1;      public static final short XPATH_INVALID_QUERY_ERR = 2;      public static final short XPATH_UNSUPPORTED_QUERY_LANG_ERR = 3;      public static final short XPATH_UNSUPPORTED_SORT_DATATYPE_ERR = 4;      public static final short XPATH_SORT_NOTIMPL_ERR = 5;      public static final short XPATH_UNSUPPORTED_MUTATION_BEHAVIOR_ERR = 6;  }        //      //  add values for DOMException.code for access to       //    an invalidated NodeSet and an access before a member      //    is ready on an asynch call      public static final short SET_INVALID_ERR = ...;      public static final short NOT_READY_ERR = ...;    //  //   previously XPathEvaluator  //  public interface DocumentXPath {       //     evaluation codes     //     public static final short XPATH_EVALUATE_IMMEDIATE = 0;     public static final short XPATH_EVALUATE_LAZY = 1;     public static final short XPATH_EVALUATE_ASYNC_BLOCK  = 2;     public static final short XPATH_EVALUATE_ASYNC_EXCEPTION  = 3;       //  result set is static, not affected by mutation,      //     possibly out of synch with current state of document    public static final short XPATH_MUTATION_IGNORE = 0;    //    //  result set in invalidated by any mutation of the document     public static final short XPATH_MUTATION_INVALIDATE = 1;    //    //   cause attempts to change document to throw exception    //    //   attempts at mutations would force a garbage collect to     //      make sure that a unused NodeSet is not blocking them    public static final short XPATH_MUTATION_PREVENT = 2;      public NodeSet evaluateAsNodeSet(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver,                                                         XPathSortCriteria sort,                                                          short evaluationCode,                                                         short mutationCode)                                                         throws XPathException;         //       //  The remaining evaluate methods       //         evalute immediately and ignore mutation       //       public Object evaluate(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver)                                                         throws XPathException;         public boolean evaluateAsBoolean(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver)                                                         throws XPathException;         public double evaluateAsNumber(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver)                                                         throws XPathException;         public String evaluateAsString(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver)                                                         throws XPathException;         public Node evaluateAsNode(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver namespaceResolver)                                                         throws XPathException;         //       //   datatype is either text, number or a QName of an XML schema datatype       //         throws exception if the select is bad,        //           the datatype isn't recognized or not valid for sorting       public XPathSortCriteria createSortCriteria(String queryLanguage,                                                                    String select,                                                                    NamespaceResolver nsResolver,                                                                    String lang,                                                                    String datatype,                                                                    boolean ascending,                                                                    boolean upperFirst)                throws XPathException;         public NamespaceResolver createNamespaceResolver(Map map);         //       //     would like this, but debatable       //      public XPathExpression createExpression(String queryLanguage,                                                         String expression,                                                         NamespaceResolver namespaceResolver,                                                         XPathSortCriteria sort,                                                          short evaluationCode,                                                         short mutationCode)                                                         throws XPathException;    }    public interface XPathExpression {      public NodeSet evaluateAsNodeSet(Node contextNode) throws XPathException;      public Object evaluate(Node contextNode) throws XPathException;      public boolean evaluateAsBoolean(Node contextNode)                                                         throws XPathException;        public double evaluateAsNumber(Node contextNode)                                                         throws XPathException;         public String evaluateAsString(Node contextNode)                                                         throws XPathException;         public Node evaluateAsNode(Node contextNode)                                                         throws XPathException;    }        public interface XPathSortCriteria {  }              public interface NodeSet {       //       //   iteration in document or sort order       //       public Node item(int index) throws DOMException;         //       //    executing getLength() may block until evaluation is complete       //       avoid for lazy or asynch evaluation       public int getLength() throws DOMException;           //       //   iterates set in arbitrary order       //       //    key should be initialized to zero on first call       //        if key.intValue == -1 then no more members       //            however key.intValue != -1 does not guarantee additional members       //    return value = null when set is exhausted       public Node iterate(Integer key) throws DOMException;  }        

      > My understanding of what we're doing is that people will not take the  > transorm and change it. If they want another transform, they'll probalby  > write it. Another ambition we have is to provide as many transforms as  > possible (except for the two default ones, Java and ECMA) in order to  > increase use.    The Apache Batik project has already expressed interest  in running DOM tests as part of their development process using their  own test framework.  The best path for them would be to take the  transform that produces Java code for the JUnit framework and  make slight modifications to produce code that works with their  internal framework.    In addition, I see most of the logic and structure of the transform  being similar between the various target languages and test frameworks.  For example, I would expect that the JavaScript or Python transform  would be developed by modifying the Java transform.  If someone  wanted to port the code generation transform to a unanticipated  language, the best approach would be to start with the closest  W3C transform and to modify it.    Having the code generation transforms under the Software license  would allow these types of uses.  Having the code under the   Document license would appear to require a clean-room  implementation of the transform which could result in  people just not using the tests due to potential legal liability.        

        The validation tests had an implicit precondition of schema validation,   however there was not a mechanism to assert that.  I've added another   allowable value ("schemaValidation") to implementationAttribute to force   schemaValidation.  The Java support files use attribute names defined in   JAXP 1.2 to enable schema validation.    I added the schema validation assertion to all the validation tests,   added <assertNotNull> on return values to provide better diagnostic   information than NullPointerException and eliminate unnecessary explict   cast operations.    I attempted to run the validation suite against the last public Oracle   beta, however it resulted in almost total test failure.  I would   appreciate a report if the situation is different the current   development version or any other implementation.    Meghnan also complained that it was not possible to build the test   suites without a network connection.  If you invoke Ant with a   -Dno-network parameter, the build process should allow the build process   to run with previously downloaded DOM specs.    One of the changes performed in the spec is to remove the   http://www.w3.... from the xml-spec DTD in the xml-source.xml files.  It   might be good to change those to relative references and pack the   xmlspec DTD in the spec zip files.        

      > >The one test == one Java file/class flows out of that since it is most  > >natural to do a case by case conversion using XSLT.  I  >  > Many-to-one isn't all that much harder, using XSLT's document() function.  > You'd want a top-level document which said which tests were to be built  > into each class, but that's easy enough.    But I've definitely followed the path of least resistance.    Obviously, I would avoid lots of tiny classes in an generic Java  application, but I like the current one test-> one class approach from an  production and organizational perspective.    Currently, in the ECMAScript transform, I'm creating one .js file per test.  I know that that would not be tolerable for deployment, so will look at some  means to combine them all at the end.    It's not that it couldn't be done, but I'm not convinced that it would be  beneficial in the long term and it is not beneficial in the very short term.    > >characterdataappenddatanomodificationallowederr  >  > Some compilers, in some languages, have trouble with long symbol names,  > even when the language permits them. I've seen some which simply ignore  any  > characters beyond the first  (or last) 32.  We may want to consider  > adopting a set of standard abbreviations to avoid that risk.  "  > chardataappendnomoderr" would cut the length by about 50%, though I grant  > that it's less readable for a novice.  >  > (Of course, readability of those names is rather marginal anyway. I  presume  > people have already considered camelCasedNames...?)    Unfortunately, I had to lose the camel case names that were in the test  definitions since the .ZIP file names were all lower case.  I've only had  nightmares trying the change the capitalization of filenames once they were  in CVS (note the screwy capitalization in the source for domunit).    I don't think it is essential that we try to summarize the case in the file  name, we should have enough test matrixes and other navigational tools that  test names can be more generic, like "characterdataappendnode3".  So for  future tests, I'd try to avoid the huge names.  I definitely got tired  typing "textsplittextnomodificationallowederr.xml" from the command line,  though I have  now committed it to muscle memory.    On another style point, the id's on asserts within a test could also be  shorter.  It is only necessary that they uniquely identify the assert within  the test, so that if a test fails, you know which assert failed and so that  we can associate metadata with an arbitrary assert.  I would recommend  something short, for example, "value", "type" or "throw".    Adding a optional shortName atttibute on the <test> element would allow us  to specify a shorter name if the monster names cause problems in code  production.        

      Was about half way through a commit, when something snapped.  It seems to be something broken with the CVS client for Windows that just kills any interaction with the repository either as a known user or anonymous.  The repository looks fine from cvsweb and from Linux, but I get this message (which I think Mary was getting earlier in the week) even from a machine that I just put cvs on.  Trying to check out 2001/XSL-Test-Suite seems to work just fine.    C:\domts>cvs checkout 2001/DOM-Test-Suite  cvs server: Updating 2001/DOM-Test-Suite  U 2001/DOM-Test-Suite/README.cvs  U 2001/DOM-Test-Suite/build.xml  U 2001/DOM-Test-Suite/level-1-element.patch  U 2001/DOM-Test-Suite/svgfix.sed  U 2001/DOM-Test-Suite/wd-dom.patch  cvs server: Updating 2001/DOM-Test-Suite/  cvs [checkout aborted]: cannot make directory 2001/DOM-Test-Suite/ /CVSROOT: No  such file or directory      Actually with some more investigation, it seems that    cvs checkout 2001/DOM-Test-Suite/tests  cvs checkout 2001/DOM-Test-Suite/java  cvs checkout 2001/DOM-Test-Suite/transforms    all work fine (and that if you combine that with the checkout 2001/DOM-Test-Suite you get the full project).  You can actually commit changes as long as your working directory is deeper that DOM-Test-Suite.    Looking at that level in CVS web (http://dev.w3.org/cvsweb/2001/DOM-Test-Suite/) there is a mysterious entry for a / (unnamed)directory.  Don't know how that got there, but could see how it could confuse a CVS client.  The checkout on Linux also had an unnamed directory.      Mary and Dimitris, see if these tricks allow you to access with CVS.    Phillipe, could you have someone kill that unnamed directory (if that is the right thing to do.)        

        http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isEqualNode        On the other hand, the following do not affect equality: the      ownerDocument,baseURI, and parentNode attributes, the specified and      attribute for Attr nodes, theschemaTypeInfo attribute for Attr and      Element nodes, theText.isWhitespaceInElementContent() method for      Text nodes, as well as any user data or event listeners registered      on the nodes.    The "and" in "the specified and attribute for Attr nodes" appears to be   a typo.        

      I've just committed changes to the tests, supporting Java sources, transforms and a minor change to the DTD and schema (ignoringElementContentWhitespace instead of ignoreElementContentWhitespace).   Currently, Xerces-J 1  is passing all tests and Crimson (CVS version) is passing all but three when runnng with default parser settings.    The tests that Crimson is failing are:    documentCreateElementDefaultAttr: Calls document.createAttribute("address") and expects the default attribute from the DTD to be automatically added    documentCreateEntityReferenceKnown: calls document.createEntityReference("ent3") and expects the content model of the entity to be available.    notationGetSystemId: Crimson returns an absolute URL (jar:file://...../notation2File instead of notation2File)    Roughly 45 tests are failing when running with a complementary set of parser settings, I assume primarily due to entity reference expansion.  Since expanding entity references on loading is an acceptible behavior (and the only behavior that some parsers such as Xerces-C support), tests that depend on the presence of entity references must either be declared to be only valid when entity expansion is off or the test must be rewritten to adapt to the settings.        

        Elena Litani wrote:    >Hi Curt,   >  >Thank you for your comments.   >  >Curt Arnold wrote:  >    >  >>Interface DOMImplementationSource:  >>  >>I dislike the form of this interface for a couple of reasons:  it  >>requires that each implementation source to parse the features list  >>which could have been done once for all implementation sources and it  >>enables the implementation source to return inconsistent first  >>implementation sources.   >>      >>  >  >I don't see how implementation may return inconsistent result..  >Can you give an example of the situation you are describing?  >  There are two distinct ways of getting the "first" implementation from a   source.  For example, either:    DOMImplementation firstEvents = source.getDOMImplementation("Events")    or    DOMImplementation firstEvents =   source.getDOMImplementations("Events").item(0);    could be used to get the first implementation of "Events" from a   source.  It would be possible, but probably underdesirable and   non-conformant, for these to return different objects.     The Java definition of DOMImplementationRegistry does not call   DOMImplementationSource.getDOMImplementations() so it would be very easy   for an implementation of that method to have flaws that are not discovered.    The Java implementation of DOMImplementationRegistry would appear to be   flawed since its implementation of getDOMImplementations() would only   return the first implemention from each source.    >  >    >  >>I'd suggest something like  >>interface DOMImplementationSource {  >>    DOMImplementation getDOMImplementation(DOMStringList features,  >>DOMStringList versions, unsigned int index);  >>}  >>      >>  >  >Can you clarify your proposal, i.e. what is the purpose of index?  >  I'm assuming the motivation of the getDOMImplementation() was to avoid   the creation of the list object and the item call when only the first   implementation is of interest.  The index parameter is an attempt to   still maintain those traits while also support multiple implementations   per source without introducing a potential for inconsistency.  index = 0   would return the first implementation, index = 1 the second, etc.  When   the result was null, the list would be exhausted.    >Using your approach how would some one ask for an implementation that  >supports both "LS" and "Range" features?  >    A user or application would request an implementation in the same way,   using the DOMImplementationRegistry, all that would be changing would be   the interaction between the registry and a source.    DOMImplementation impl =   DOMImplementationRegistry.newInstance().getDOMImplementation("LS 3.0   Range");    What would change is that DOMImplementationRegistry would parse "LS 3.0   Range" into    DOMStringList features = new DOMStringListImpl(new String[] { "LS",   "Range" });  DOMStringList versions = new DOMStringListImpl(new String[] { "3.0",   null } );    and then call        source.getDOMImplementation(features, versions, 0);    DOMImplementationRegistry.getDOMImplementations() would do something like:      >Also, how can some one retrieve multiple DOM implementations if more  >than one available for the set of features specified?  >    >    while(names.hasMoreElements()) {              name = (String)names.nextElement();              DOMImplementationSource source =                  (DOMImplementationSource) sources.get(name);                for (int i = 0;; i++) {                  DOMImplementation impl =   source.getDOMImplementation(features, versions, i);                  if (impl == null) break;                  list.add(impl);              }      In the Java definition of DOMImplementationRegistry:    If multiple sources support the same feature set, the first   implementation would be determined by the hash code of the source class   name which would seem to be undesirable.    The use of a hashtable does prevent the same source name appearing in   the list, however it would not prevent different sources from returning   the same object.    I would suggest preserving the order of DOMImplementationSources and if   it is necessary to eliminate duplicates do it in body of   getDOMImplementations().        

      This is a continuation of an www-dom-ts discussion on whether it would be  allowable for an implementation of node.isSupported to throw an exception  if, for example, the feature name is not an XML name even though the spec  says "No exceptions".    For some background,  http://java.sun.com/docs/books/tutorial/essential/exceptions/catchOrDeclare.  html  http://java.sun.com/docs/books/tutorial/essential/exceptions/runtime.html    Now to the text of Exception DOMException:    The first paragraph, "DOM exceptions only...", is a  general design  principle.  It says the design of DOM prefers to return error values unless  things are seriously wrong.  The example sited is that  nodeList.item(nodeList.length) returns null instead of throwing an out of  bound exception.    The second paragraph (as clarified in errata core-15) could still be  clearer:  Implementations should raise other exceptions under other circumstances. For  example, implementations should raise an implementation-dependent exception  if a null argument is passed when null was not expected.    I would not interpret this as a license for implementations to intentionally  throw exceptions that are not explicitly defined in the spec, but as an  acknowledgement that what would be called a RuntimeExceptions on the Java  platform, such as the mentioned NullPointerException, SecurityException, out  of memory exceptions, etc, might occur without an explicit attempt to raise  an exception on the part of the implementation.  (I think the perceived  intent would be better expressed if "should" were "can" and "other" were  "unanticipated")    For a Java implementation to raise an "implementation-dependent exception"  because the feature is not a valid XML name, the implementer would have to  violate both the DOM design principal mentioned in the first paragraph  (since it is choosing to throw an exception when returning false is  adequate) and to purposefully create an RuntimeException for an explicitly  thrown exception not in runtime code (otherwise the Java compiler would  report an error in throwing a checked exception that was not declared in the  method).    Most other platforms/languages would not enforce the prohibition on throwing  undeclared exceptions, however the principal should still be in effect, you  don't surprise a caller with an exception that you didn't tell them to  expect.        

        David Faure wrote:    >Here is the summary of the outstanding issues with KHTML from KDE_3_1_BRANCH  >and the DOMTS from current CVS (thanks to Curt's provided tarball).  >  >15 failures out of 185 tests.  >  >To be done in KHTML:  >  >* Set m_specified in AttrImpl when the attribute is specified.  >See http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-862529273  >(hc_attrspecifiedvalue.html, hc_attrspecifiedvaluechanged.html and hc_elementassociatedattribute.html)  >  >* Keep comments in the DOM tree (hc_commentgetcomment.html)  >  Mozilla and IE both fail that one.  Mozilla omits the comment node, IE   reports the processing instruction and document type declaration as   comments.  The <!DOCTYPE gets reported as if it were <!--CTYPE.  I can't   see arguing that the IE behavior is conformant, but you could argue that   dropping comments is an acceptible for HTML processors.    >  >* Debug some whitespace problems  >hc_elementnormalize.html and hc_textwithnomarkup.html [\n gets removed]  >hc_textparseintolistofelements: idem  >hc_textsplittextone.html and hc_textsplittextthree.html [Expected Jones but was ones]  >    IE fails this one in the same way.  These tests are based on the   explicit XML whitespace processing rules and are passed by XML   processors and Mozilla.  The current expected behavior must remain   acceptible, however you could argue that IE and Konq current behavior is   also acceptible since I don't think HTML specified as clearly how   whitespace should be handled.    >  >===  >  >hc_nodeinsertbefore.html fails due to additional text node created by Mozilla (but not  >by IE nor Konqueror) with whitespace-only contents. DOMTS test bug -> filed as W3C BR #260.  >(affects also hc_nodelistindexgetlength.html and hc_nodelistreturnlastitem.html)  >    >  Will investigate    >===  >  >Capitalization issues left (DOMTS bugs?)  >* hc_namednodemapreturnattrnode.html: class vs CLASS  >* hc_nodeattributenodename: title vs TITLE  >* hc_noderemovechildnode.html: em vs EM  >  >  >    >  Most likely.  I'll fix these as a continuation of the existing bug.        

      There are a couple of small things that could help out.  If anyone wants to take a shot of these, I would appreciate it.    1. A Javascript routine that creates a duplicate of a document.  Should work with both Netscape/Mozilla 6 and MSXML 2+.    2. JavaDoc targets in build.xml for the generated tests and the support classes.  Suggestions on changes to generated documentation comments in tests.  Occassional reminders that I need to add more extensive comments to adapter classes and abstract classes.    3. Either an example of how to kludge synchronous XML parsing in Netscape (sleeping until the load event if dispatched or some other type of stall) or a pretty definitive statement that it can't be done right now.      Using asychronous parsing for each load() statement would probably prevent compatibility with JsUnit since it would expect the test to be over when control is returned from runTest.  However, if the implementation of load performs a clone of a previous (asychronously) loaded document (See 1 above), then end of the test and the return to the caller would be coincidental.        

      From: "Michael B. Allen" <mballen@erols.com> wrote:  > Meaning an EventListener should be called even if another listener in  > the list currently being processed removes it?    I don't know if the anticipated errata would mandate that behavior or simply  tolerate it.  In my non-public implementation, I followed the specified  behavior, but it definitely added complexity.    > I think the implementation  > issue may become even more difficult in languanges with explicit memory  > management though. Currently, my implementation frees a ListenerEntry  > struct when removeEventListener is called. As is, this would result in  > dereferencing a dangling pointer if dispatchEvent attempts to trigger a  > listener after it has been removed. I suspect I must collect the pointers  > to the actull functions to be called for each listener and store that  > in an array (i.e. pre-dereference the listener functions).    Actually, you should already have to collect the listeners since event  listeners added while processing a dispatch to the same target should not  see the event.  It was that tension between adding event listeners that  shouldn't be effective until the current event dispatch is complete and  removing event listeners that should be instantaneously effective that made  the implementation a little complicated.    I don't have the code in front of me, but if I remember right, I keep a  document wide count of removeEventListener calls.  During the dispatch to an  event, I collect a list of event listeners on that target and start  dispatching to the list.  If the count changes during a dispatch to a  particular listener, all other listeners are double checked to see if they  are still registered before dispatching the event.    It would be good to hear the rationale why the behavior in the spec is  undesirable and get a survey of current implementations.    My personal take would be to do whatever is easiest, either following the  spec as written or following Xerces-J's implementation, and wait for the  errata.  Also, review the other issues in the message I cited since it also  raises issues between my reading of the spec and Xerces-J's implementation,  however definitely on passages that are ambiguous.        

        > Hello,  >  > I am trying to run the DOM-TS-Level1-Core testsuite in Konqueror  > (KDE's web browser, which I help developing).    Welcome.  I've made a few halfhearted vain attempts to run the test suites  in Konqueror 3.0, but haven't been successful.  It would be great to have  some inside help to figure out our stumbling block.    >  > The first problem I'm hitting is that the TOC-generation in  > index.htm doesn't work, because the document has an XHTML doctype  > (and uses accordingly lowercase tag names, like <div> and <h2>),  >  but the Javascript code (in resources/toc.js) calls  > getElementsByTagName("DIV")  > getElementsByTagName("H2")  > etc. (using uppercase tag names)  >  > Due to the XHTML declaration, Konqueror looks for lowercase tag names,  > and doesn't understand what the uppercase DIV and H2 tags are about.  > Is that a Konqueror bug, or is that behaviour correct (and toc.js wrong) ?    Sad to say, I don't have any recollection of ever seeing toc.js, but the CVS  log says that I committed it.  I would agree with your assessment, the  getElementByTagName() arguments should be lowercase.  I'll change them in  the CVS tonight.    The first step is to enable (or at least ensure) the JsUnit test harness  runs on Konqueror.   Currently, I'm at an impass with the maintainer of  JsUnit and am using a branched version.  Probably the best approach is to  get the CVS code of JsUnit from http://jsunit.sf.net, make any changes  necessary to run the self-tests on Konqueror, and then submit those code  changes to the JsUnit mailing list.  Then I can make the same changes on our  branch.    Then you should assemble the tools to build the test suite from the CVS  code, http://www.w3.org/DOM/Test/Documents/DOMTSBuild.html.    I'll follow up later.        

          >    >  >>>>xmlEncoding: Can an implementation raise an exception if it does not   >>>>recognize the encoding on setting?  How is this affected by saves?     >>>>Does this affect saves (which would be in the L/S spec)?  Maybe it is   >>>>cleaner just to allow the encoding to be specified on the save request.  >>>>          >>>>  >>>xmlEncoding has been changed to read-only, in order to simplify the  >>>computation of the encoding used at save time (i.e. only  >>>DOMOutput.encoding could be changed). Save defines an  >>>"unsupported-encoding" error if the encoding is not supported.  >>>  >>>        >>>  >>I think that "lastEncoding" or "saveEncoding" is clearer.  >>      >>  >  >better than xmlEncoding? but it is supposed to come from the XML  >declaration, which is xmlEncoding and xmlStandalone follow the same  >pattern.  >    >  AHA.  I wasn't making the connection that xmlEncoding is the encoding   specified in the XML declaration (seems pretty obvious now) and is   orthogonal to the encoding of the initial source document and then   encoding used in any subsequent saves.    Would this be null if there were no XML declaration or no encoding   specified in the declaration?    Some implementations allow parsing from a string where the declared   encoding is ignored.  Would the xmlEncoding retain the value from the   declaration (say UTF-8 or ISO-8859-1) when the source string was   UTF-16?  What would actualEncoding be in this case?    >    >  >>>We think that the current description is clear enough. Here are some  >>>excerpts from the first paragraphs of the 2 methods:  >>>  >>>adoptNode:  >>>[[  >>>When possible, changes the ownerDocument of a node, its children, as  >>>well as the attached attribute nodes if there are any.  >>>]]  >>>  >>>importNode:  >>>[[  >>>Imports a node from another document to this document. [...] The source  >>>node is not altered or removed from the original document; this method  >>>creates a new copy of the source node.  >>>]]  >>>  >>>        >>>  >>It would be good if the first sentences in each description were   >>parallel.  For example, adopt could say:  >>  >>Attempts to adopt a node from another document to this document.  [...]    >>If supported, the source node is  removed from the original document   >>and  altered changing the ownerDocument of the node and any descendants,,,  >>      >>  >  >How about:  >[[  > Attempts to adopt a node from another document to this document. If  > supported, it changes the ownerDocument of the source node, its  > children, as well as the attached attribute nodes if there are any. If  > the source node has a parent it is first removed from the child list of  > its parent. This effectively allows moving a subtree from one document  > to another (unlike importNode() which create a copy of the source node  > instead of moving it). When it fails, applications should use  > Document.importNode() instead.  >]]  >    >  OK        

      Have successfully run using Netscape 6.2.1 and Mozilla 0.9.7 and 0.9.8 on  Windows.  (Tried on SuSE linux but was getting errors about  libgmodule-1.2.so when installing Mozilla).    The patch files for JSUnit were produced from changes that I submitted to  the JSUnit mailing list.    > > Update the DOM TS page at W3C, I'll include a "Releases" section  > > pointing to the distributions (will only consist of this to begin with,  > > hopefully DOM L1 HTML fairly soon, DOM L2 after that)    By DOM L1 HTML, do you mean a second release of the DOM L1 Core test suite  with additional tests that are compatible with HTML implementations?  Those  additional tests will also be compatible with XML and SVG implementations.  To test best of my knowledge, there isn't a W3C rec for DOM L1 HTML.    DOM L2 Core should be next since all we have to do have the WG resolve the  outstanding issues.  However, none of that needs to be talked about now.    > >  > > Curt, let me manually put all the generated files in a  > > DOMTSL1Core-20020212 directory and zip it for posting on W3C machinery  > > and let's look into automating this task too after that.    Could you clarify?  Could could simply rename dom1-core.tar.gz to  DOMTSL1Core-2002021x.tar.gz or do you want a DOMTSL1Core-2002021x directory  within the archive?  If the latter,  you could add something like this to  the end of dom1-core-dist    <copy todir="${build.dir}/DOMTSL1Core-20020212">  <fileset dir="${build.dir}/level1/core"/>  </copy>    <mkdir dir="${dist.dir}"/>  <zip zipfile="${dist.dir}/dom1-core.zip" basedir="${build.dir}"  includes="DOMTSL1Core-20020212/**"/>  <tar tarfile="${dist.dir}/dom1-core.tar" basedir="${build.dir}"  includes="DOMTSL1Core-20020212/**"/>  <gzip src="${dist.dir}/dom1-core.tar"  zipfile="${dist.dir}/dom1-core.tar.gz"/>        

        I've updated test-to-jsunit.xsl, test-to-ecmascript.xsl and   DOMTestCase.js.  At the current point, the alltests.html when loaded   directly in the browser will give you a form for parser selection and   settings, a combo box of the test suite or test to be run and a list of   tests that are not compatible with the current settings.    I've only tested DOM L1 core and alltests.html as an overview page using   Mozilla on Win XP.  I suspect that most tests will run individually and   that other tests suites and browsers will probably work, I don't have   any confidence that alltests.html will currently work as a JSUnit test   suite definition, and I know that the overview page does not properly   initialize JSUnit.        

        There is a mention of DOMBuilder.setFeature in the description for   createDOMBuilder  (http://www.w3.org/TR/2003/WD-DOM-Level-3-LS-20030226/load-save#LS-DOMIMplementationLS-createDOMBuilder),   though the definition has been removed.    There also seems to be nothing in the draft that would mandate a parser   be namespace-aware.  Unlike other parser configuration options, it would   be very difficult to write code that could adapt if some implementations   presented namespace-aware DOMBuilders and others didn't.        

      Sorry about falling off the face of the earth.  My company is in the process of being divested (http://www.hyprotech.com/news/story.asp?ID=157) and I've been on the road.    It will take me longer to fully research these issues but:    Build errors:  The ...validate-test targets depend on the corresponding DTD's having been generated but did not have the ...dtd targets as dependencies.  So they would work if you ran validate-tests after generating java or jsunit, but wouldn't work if they were the very first thing you did.  I just changed the depends clause in build.xml in the CVS.    The "could not load document" errors are the longstanding resource exhaustion problem observed with Xalan.  I did review the Ant liason and did not see any obvious problem.  Since Saxon seems to avoid the problem, it is a problem with Ant, it is a subtle one.  I had hoped to run a diagnostic program on the build task, but my only available tool is fairly antiquated.  Joseph Kesselman had suggested a Xalan-specific extension that might be able to work around the issue (by telling Xalan that a specific document would no longer be needed, however I am reluctant to add a workaround for a specific processor).    Haven't had any chance to look at the new tests.    The DOM L2 Events and Load and Save tests will generally use anonymous inner classes or their equivalents for the listeners, filters, etc that are defined in the tests.  The transforms do not yet generate the corresponding code.  A couple of weeks ago, I started migrate L2 Event tests from domunit to get some tests in the CVS that used these features so that I could fill in the missing pieces of the transforms.  There do not need to be distinct transforms for the level 3 tests.  The default package name can be overriden by specifying the "package" parameter (see dom2-core-gen-java for an example).        

      Thanks for the backgrounder, I've put some comments in-line with your  original message.    ----- Original Message -----  From: "David Brownell" <david-b@pacbell.net>  Sent: Friday, November 16, 2001 12:47 AM  Subject: Re: Crimson 1.1.3 tests      > The deal is that SAX clearly specifies that those IDs are supposed to  > be resolved, so that's how Crimson does it.  (Xerces just as clearly  > violates the SAX spec in this area.  See the "saxunit 0.2" tests now  > available at http://xmlconf.sourceforge.net ...)  I suspect that if you  had  > included the GNUJAXP software you'd find it also resolves those  > URIs.  (What test software were you running?  The "domunit 0.0.6"  > test cases don't address such issues.)    ca: The NIST/W3C DOM Test Suite stuff in the W3C CVS (see  http://www.w3.org/dom/test).  Requires Ant 1.4 (exactly) with Crimson  replaced (sorry) with Xalan-J 2.1 (again exactly) and the corresponding  Xerces to build, if you are interested.    DOMUnit did have testNotationGetSystemId which accepted either a relative or  absolute URI.    >  > If you want rationales, I'll share two beyond "it's allowed and  > conforms with the specs".    CA: Isn't done by most processors  and may come as a surprise to even knowledgable practitioners.  Therefore should be worth at least a mention that  absolutizing may occur since it seems rare in current practice (Crimson  being  the only implementation that I've seen that does it)    > First, the original expectation with XML  > was that as "SGML on the web", all system IDs would be URLs.  > And second, since DOM levels 1 and 2 don't expose information  > about the base URLs of nodes, it'd seem that ever exposing relative  > URLs through DOM would be buglike.  I know there were some  > discussions early in the L2 timeframe about exposing those bases,  > but that never happened.  >  > Was there some rationale available for DOM implementations  > that chose to expose relative URIs while hiding the base URIs  > needed to interpret them?    [ca] Probably so you could serialize a document without having  the system id's obviously mucked with.  Probably a fair number  of entity resolvers that examine the systemId would fail to work  if the source document had a unexpectedly absolutized systemId.  Of course, that is a consequence of using the systemId to perform  publicId's role.    >  >  > FYI, there's now a SAX feature flag defined to control how those  > IDs get handled:  >  >     http://xml.org/sax/features/resolve-dtd-uris  >  > See the listing of such flags  >  >     http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html  >  > Some of those IDs support "SAX extensions 1.1", which I may put  > out as a "beta" release soon.  (All the RFEs have been answered.)  >  > - Dave  >    With SAX making the behavior switchable and since many DOM implementations  are layers on SAX, that makes it pretty clear that mandating absolutizing in  the tests isn't  acceptible either.    I've removed the verbatim systemId assertions in the two tests in the DOM L1  Core suite (leaving an assertion that just checks if the filename fragments  are the same) and changed the verbatim systemId assertions in the DOM L2  tests (main the import*.xml tests).        

        Benjamin C. Chang wrote:    >Curt Arnold wrote:  >  >    >  >>ElementEditVAL:contentType is currently a method, though it seems like  >>it would be better as a readonly attribute.  >>      >>  >  >This was made a read-only attribute.  >Ben  >  >  >    >  Satisified        

      I got to spend some more time on the ant build file this weekend and fixed up some code generation problems.  Unfortunately, I had some problems accessing the CVS at the W3C and I've passed along the details and hopefully can put this all in the W3C CVS sometime soon, but I've just put it in the xmlconf www-dom-ts CVS for the moment.    I've added the folloing targets to the build.xml file:    get-nist-level-1-code:     Downloads DOM Level 1 core tests that appear in the test matrix from the NIST site to the nist/level-1/core subdirectory    get-nist-level-1-html    Same thing for DOM Level 1 tests mentioned in the test matrix, but they aren't actually available on the NIST suite    get-nist-level-2-core    Same thing for DOM Level 2 Core tests, again not actually available    patch-nist-level-1-core    This runs SED (Stream EDitor) to make global changes to the NIST tests.  The  output files are stored in the tests/level-1/core directory.  The end of this target shows a list of files that were in the test matrix but weren't actually on the NIST server.  The global changes are in the file nistfix.sed    The preceding targets will disappear since the NIST tests will eventually get published in the W3C CVS with corrections.    dom1-core-gen-java:    Generates Java code for all tests in the tests/level-1/core directory.  The generated Java files go in build/java/org/w3c/domts/level1/core.  (May require you to manually run dom1-dtd to build dom1.dtd and copy into the test directory).    dom1-core-java    Compiled files in the build/java/org/w3c/domts/level1/core directory and the org/w3c/dom/testing directory (abstract interfaces and support classes).    clean    removes the generated Java sources, DTD's, schemas and compiled binaries    --------------------    nistfix.sed contains a series of SED commands that are applied to the downloaded NIST tests:  s/DOCTYPE testcases/DOCTYPE test/    Changes <!DOCTYPE testcases...> to <!DOCTYPE test ...>      s/xw2k.sdct.itl.nist.gov\/brady\/w3c-dom\/xml/www.w3.org\/2001\/DOM-Test-Suite\/level-1\/core/    Changes the targetURI from a NIST URL to a W3C URL      s/xmlconf.sourceforge.net\/domunit\/2001-05-17/www.w3.org\/2001\/DOM-Test-Suite\/Level-1/    Changes the namespace from a xmlconf namespace to a W3C namespace      s/xmlns:rdf.* //    Removes xmlns:rdf="...", prefix not used in document      s/xmlns:xsd.* //    Removes xmlsn:xsd="...", prefix not used in document      s/net.sourceforge.xmlconf.domunit.dom1/org.w3c.domts.level1.core/    Changes package name from xmlconf to W3C      s/<member>/<member>"/  s/<\/member>/"<\/member>/    Add quotes around members    ----------------------------    I was able to fix up quite a few errors in the test-to-java.xsl transform, however now it seems that   most of the errors are due to problems in the test definition.  The common errors seem to be:    1. Missing symbols    A variable name misspelled or omitted    2. Using a string variable for getNodeType()    3. Missing class name    4. Misuse of collection and list equality assertion    assertEquals can assert that two collections or lists are equivalent doing either order-significant or  order-insignificant comparision.  The intent was to allow it be to easy to assert, for example,  that all of the following attribute names appear in a collection, but without having to write  a lot of logic in the test.    It was not intended to be used to combine the results for several different types of calls with   their expected results.  Multiple assertions should be used in that case.    For example, here is the content of nodeCloneNodeFalse.xml  <?xml version="1.0" encoding="UTF-8"?>  <!DOCTYPE test SYSTEM "dom1.dtd">  <test xmlns="http://www.w3.org/2001/DOM-Test-Suite/level-1/Test-Definition" name="nodeCloneNodeFalse">  <var name="doc" type="Document"/>  <var name="elementList" type="NodeList"/>  <var name="employeeNode" type="Node"/>  <var name="clonedNode" type="Node"/>  <var name="cloneName" type="String"/>  <var name="cloneChildren" type="NodeList"/>  <var name="length" type="int"/>  <var name="result" type="List"/>  <var name="expectedResult" type="List">  <member>"employee"</member>  <member>"0"</member>  </var>  <load var="doc" href="staff.xml" willBeModified="false"/>  <getElementsByTagName interface="Document" obj="doc" tagname='"employee"' var="elementList"/>  <item interface="NodeList" obj="elementList" index="1" var="employeeNode"/>  <cloneNode obj="employeeNode" deep="false" var="clonedNode"/>  <nodeName obj="clonedNode" var="cloneName"/>  <append collection="result" obj="cloneName"/>  <childNodes obj="clonedNode" var="cloneChildren"/>  <length interface="NodeList" obj="cloneChildren" var="length"/>  <append collection="result" obj="length"/>  <assertEquals actual="result" expected="expectedResult" id="nodeCloneNodeFalseAssert1" ignoreCase="false"/>  </test>    The test initializes a collection members "employee" and "0" (quotes were added by SED) and then compares it with a collection built by appending the results of getNodeName() and getLength().    A better way of writing the test would be:       <?xml version="1.0" encoding="UTF-8"?>  <!DOCTYPE test SYSTEM "dom1.dtd">  <test xmlns="http://www.w3.org/2001/DOM-Test-Suite/level-1/Test-Definition" name="nodeCloneNodeFalse">  <var name="doc" type="Document"/>  <var name="elementList" type="NodeList"/>  <var name="employeeNode" type="Node"/>  <var name="clonedNode" type="Node"/>  <var name="cloneName" type="String"/>  <var name="cloneChildren" type="NodeList"/>  <var name="length" type="int"/>  <load var="doc" href="staff.xml" willBeModified="false"/>  <getElementsByTagName interface="Document" obj="doc" tagname='"employee"' var="elementList"/>  <item interface="NodeList" obj="elementList" index="1" var="employeeNode"/>  <cloneNode obj="employeeNode" deep="false" var="clonedNode"/>  <nodeName obj="clonedNode" var="cloneName"/>  <assertEquals expected='"employee"' actual="cloneName" id="nodeName" ignoreCase="false"/>  <childNodes obj="clonedNode" var="cloneChildren"/>  <length interface="NodeList" obj="cloneChildren" var="length"/>  <assertEquals expected="0" actual="length" id="nodeListLength"/>  </test>    There really needs to be some sort of iterative loop to justify the use of collection comparision.    ---------------------    ANT setup:    On Windows, the new modifications to build.xml require downloading a SED implementation and placing it on your path before running ant.  As before, running ant to build this project requires a nightly build for Ant 1.4, replacing jaxp.jar and crimson.jar with xalan and xerces.jar from Xalan 2.1 (?) release and having patch (part of CVS) on the classpath.    I used GNU sed v3.02.80.        GNU sed v3.02.80     32-bit binaries and docs, using DJGPP compiler. For details on new     features, see Unix section, above.        http://www.cornerstonemag.com/sed/sed3028a.zip     # DOS binaries      SED is part of most Linux installations.  The project may work on Linux, but I haven't tested it.        

      Michael B Allan wrote:  > I'm the author of a plain C implementation called DOMC. I would like to  > generate conformance test sources like:    Welcome.  Yes, the right approach is to create a new transform  test-to-domc.xsl that would generate source code compatible with your C  binding and your selected test harness.  If you aren't already using a test  harness, there is a list of xUnit implementations at  http://www.xprogramming.com/software.htm  Though the tests can be adapted to  other frameworks, the Java code outputs JUnit style assertions.    The packaged test suite is basically a binary drop, to build your own  transforms you need to get the sources out of the CVS.  See  http://www.w3.org/DOM/Test/Documents/DOMTSBuild.html for details on how to  access the CVS repository and build the test suite.    Then I would manually convert some of the tests to your DOM binding and  selected test framework, write the necessary supporting code (the C  equivalent of DOMTestCase.java), get those tests running, and then create  test-to-domc.xsl from test-to-java.xsl.  test-to-java is numbingly complex,  so if you get a few manual tests up and running, then we could collaborate  to get test-to-domc to produce the code.    We have yet to do any test suites for anything other than the two official  bindings, Java and ECMAScript.  There has been a desire to incorporate test  generation for other bindings (Python and C#+System.XML in particular) in  the package, but the need for sleep has precluded doing anything serious on  it.  I don't know if you'd be interested in trying to tackle both DOMC and  other C bindings like libxml as a combined effort that could be contributed  to the W3C.    We are using Ant (http://jakarta.apache.org/ant) as our build tool.  Coincidentally, I've been working on a C/C++ compilation task for Ant as  part of http://ant-contrib.sourceforge.net which might be useful later.        

        I've committed to the CVS fixes for bugs 190   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=190) and 205   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=205).    I've tested the SVG Plugin support with IE 6 on Win XP with the Adobe   SVG plugin, other combinations and platforms have not been tested.    The external entity used by the XPath tests was modified to use   createXPathEvaluator and the tests were run on Mozilla 1.3.  I have not   yet added support for Xalan-J's implementation (Bug 191), so not able to   run the XPath tests for Java just yet.        

        I've added 23 tests for DOMImplementationRegistry under bug 463.  This   required adding <DOMImplementationRegistry.newInstance/> to the   framework to provide access to an instance DOMImplementationRegistry and   some tweaking of the transforms.  I've run the tests under Xerces-J, but   I would appreciate any feedback from other implementers on these tests   and the previously mentioned TypeInfo tests.        

      From: "Philippe Le Hegaret" <plh@w3.org> wrote:  > It seems to me that there is a need to stabilize the CVS tree before the  > release.    Dimitris Dimitriadis wrote:  > I'd postpone the CVS rework until just after the release of the DOM TS.    I've made some minor CVS changes that I think addressed most of Dimitris's  concerns.   I too would have preferred to postpone any changes until after  release, but they are done now since I thought they were a blocker.    2001/DOM-Test-Suite    jsUnitRunner.patch - Removed, this was a patch to an obsolete version of  JSUnit and was not longer used.    svgfix.sed - This attempts to fix up XML validity issues with the SVG spec  in task svg-init.  Moved to patches/svgfix.sed    dom1-core.doxygen, dom2-core.doxygen - Configuration files for Doxygen,  moved to doxygen    build.xml - Updated for file movements    Dimitris' other concern was the empty 2001/DOM-Test-Suite/files hierarchy.  This can only be seen from ViewCVS and would need a machine admin to remove  the directories.        

      > To examplify:  > We have made an interface in C++ that of course uses an unsigned number,  > and we have made a JNI interface on top of this to actually "conformance"  > test  > the C++ implementation with the NIST Java conformance tests.  >  > If Java passes a negative number, this will be translated to a large  > unsigned number in C++  > and the behaviour of these two different possibilities are specified to be  > different.    In the DOM Test Suite effort currently underway, tests that depend on  support for signed numbers can be declared as such and can be supressed for  bindings that use unsigned numbers.        

        I've modified dom-to-dtd.xsl to avoid bug 12797.  The current CVS   Xalan-J also avoided locking up on generating Java for   HTMLTableElement21.  I'll continue using Xalan for a while and log any   bugs I encounter.        

      Tonight's changes:    build.xml    Added dom1SE-* targets to build.xml, creates dom1SE.dtd and dom1SE.xsd  Added dom-level2-core-* targets for DOM Level 2 Core tests    dom-to-dtd.xsl and dom-to-xsd.xsl    Fixed some problems relating to firstChild (and similar) being both an attribute of Node and a method for TraversalRange in the generation of the DOM 2 DTD and Schema.  I've canned a copy of the generated DOM 2 schema and DTD at http://home.houston.rr.com/curta/dom2dtd.ZIP or you can build your own.  I will not keep the link updated.    attrsetvaluenomodificationallowederr.xml    Is back in DOM Level 1 and excluded from DTD validation.  Will pass validation against dom1SE.dtd and dom1SE.xsd.    org.w3c.domts.level1.core.alltests.xml    Suite of all submitted Level 1 Core tests.       Removed Avalon files from JUnit directory    For some reason (lack of sleep perhaps), I committed duplicates of the Avalon support classes in the Junit source tree with obvious bad affects on the "junit-run" target.    Fixed problems in documentcreatecdatasection.xml and splittextsplitnomodificationallowederr.xml    Both of these files caused Xalan 2.1 to lock up yesterday.  Compiling the SAXON generated .java files should type mismatch errors that when corrected allowed Xalan 2.1 to successfully process them.    Did some preliminary work for a metadata/test matrix theme by cleaning up subjects.xsl.    ----------------------------    Current status:    DOM tests compile and build to jar file (target dom1-core-jar).  If you also generate the junit-run.jar (target junit-run) and place it in a directory with junit.jar and a JAXP compatible parser (recent nightly of Crimson would be the benchmarks and Xerces-J just behind (it ignores isCoalescing)) and type:    java -jar junit-run.jar org.w3c.domts.level1.core.alltests    Will generate a ton of test failures (http://home.houston.rr.com/curta/20010820.ZIP).  Since Xerces and and recent Crimson's have pretty clean results with my current DOMUNIT tests (which were derived from the NIST Java Tests), I assume that means that we have 50+ errors in the test suite.    One recurring problem is tests expecting the tagname for the document element to be <staff.xml> not <staff>.  NIST's submission did not include test files, so I assumed that the test files used in the previous NIST Level 1 were to be used.  If that was wrong, please let the list know and submit the intended support files.    Also, several tests try to assert that nodeName is equal to nodeValue expectations (or vice versa).        

        For background:    http://lists.w3.org/Archives/Public/www-dom/2003AprJun/0015.html  http://lists.w3.org/Archives/Public/www-dom/2003AprJun/0016.html    Obtaining an XPathEvaluator for a test is a fairly process.  The current   XPath tests have the following boilerplate:       <!-- The following code is to create the evaluator using          either the getFeature method defined in DOM3 or          the cast mechanism. Implementation are not required          to support both but at least one of them -->     <assign var='xpEvaluator' value='null'/>     <isSupported obj='doc' feature='"core"'       version='"3.0"' var='state'/>     <if>       <isTrue value='state' />       <getFeature interface='Node' var='xpEvaluator' obj='doc'         feature='"XPath"'         version='"3.0"'/>     </if>     <if>       <isNull obj='xpEvaluator' />       <assign var='xpEvaluator' value='doc'/>     </if>    Even as complex as this is, it would not support DOM XPath   implementations like Xalan-J that are external to the DOM Core   implementation.  To support tests that are not intentionally testing the   mechanisms for obtaining XPathEvaluator's, I would like to add support   for obtaining XPathEvaluator's to the framework.  This would be similar   to the existing support for obtaining DOMImplementations.    I would suggesting adding the following statement to the DOM 3 TS   language and supporting code to the Java and ECMAScript framework:    <createXPathEvaluator var="xpEvaluator" document="document"/>    After that I would like to add support for Xalan-J for XPath testing.    I've entered bugs #190   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=190) for the language   enhancement and bug #191 for Xalan-J support.        

      I've added three files to the xmlconf CVS that I'm contributing to the DOM TS effort:    dom-to-dtd.xsl - generates an DTD from a DOM spec  wd-dom.patch - adds the missing xmlns:xlink attribute to wd-dom.xml when applied with CVS's patch utility.  build.xml - Ant build file    These can be downloaded from    http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/build.xml  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/dom-to-dtd.xsl  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/wd-dom.patch    Ant's <style> task had problems with external entities, however using an Ant nightly build and the last Xalan release and the accompaning Xerces parser, seemed to work.    To set up Ant:    Download a recent nightly binary and optional task jar of Ant 1.4 from http://jakarta.apache.org/builds/jakarta-ant/nightly/2001-06-27/      Expand Ant and rename top level directory from jakarta-ant-1.4alpha to ant1.4    Place *optional.jar in /ant1.4/lib directory and remove jaxp.jar and crimson.jar    Download Xalan-J 2.1 from http://xml.apache.org/dist/xalan-j/    Extract xalan.jar and xerces.jar and place in /ant1.4/lib    Add jdk1.x/bin, /ant1.4/bin and cvs or wincvs to path    Set ANT_HOME=x:/ant1.4  SET JAVA_HOME=x:/jdk1.x    Running Ant    c:/>ant dom1-init    Will download dom1.zip, extract xml sources and add missing xmlns:xlink attribute.  Will be run automatically by any of the following tasks.    c:/>ant dom1-schema  c:/>ant dom1-dtd    Will generate dom1.xsd or dom1.dtd in ./build directory    c:/>ant dom1-interfaces    Will generate dom1-interfaces.xml in ./build directory    c:/>ant dom1-subjects    Will generate dom1-subjects.rdf in ./build directory        

        An updated coverage report of Xerces-J while running dom1-core,   dom2-core, dom2-events, dom3-core, dom3-ls and dom3-xpath is available   at http://homepage.mac.com/curt.arnold/FileSharing1.html   The   significant packages are org.apache.xerces.dom and   org.apache.xpath.domapi.  If anyone wants to create tests to fill in the   gaps, please let the list known your intentions so we don't duplicate   effort.  I'm hoping to continue to flesh out L&S.        

      > I was under the impression that "auto" will not check for the case.    That would be ignoreCase="true".      > I have the following questions regarding usage of "auto"  > 1. Will the usage of "auto" returns the value in uppercase or is it just  the  > first  character of the return value that is capitalized.  > 2. What is the scenerio where the  return value has to be in uppercase.    ignoreCase="auto" is for  (http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-5353782642)    The HTML case insensitivity is also reflected in the DOM HTML API's in some  ways, for instance, element and attribute names are exposed as all upper  case (for consistency) when used on an HTML document, regardless of the  character case used in the markup.    ignoreCase="false" --> assertTrue(expected.equals(actual))  ignoreCase="true" --> assertTrue(expected.equalsIgnoreCase(actual))  ignoreCase="auto" (for HTML) -->  assertTrue(expected.toUpperCase().equals(actual))                               (for everything else) -->  assertTrue(expected.equals(actual))  >  >  > I will change the testcases so that ignorecase will be false and  will use  CVS  > from next time on to add testcases. I need anyone of your help in setting  up the  > CVS account to be able to do checkin's    I'd be in favor of having you granted commit rights to the CVS repository.  However, Dimitridas would have to request that of the W3C support staff.  You might want to email Dimitriadis a RSA public key.        

        Neil Delima wrote:    >We have a couple of DOM L3 Core, test cases written to conform to the  >DOMTSML for possible future inclusion in the DOM L3 test suite.  Some of  >these have to be updated and some probably need to be added in order to be  >in-sync with the latest L3 Core Working Draft.    >  If these could be added to the CVS in their present state in the near   future, I would be happy to get and keep them in synch.  If they can't   be added shortly, I will start developing tests and I might   substantially duplicate one of your existing tests which wouldn't be the   worst thing in the world.    >Support to write tests for  >new interfaces such as TypeInfo, DOMConfiguration, DOMErrorHandler, etc.,  >and testing XML schema instances has probably been added, right?    >  I'd expect to that we would need to add DOMTS language elements for each   caller supplied interface in the drafts (along the lines of EventMonitor   in the DOM L2 events tests which implements EventListener).  However,   these have not been added yet and I would assume they would be developed   concurrently with the tests that would use them.    >Other  >issues that might have to be addressed include selectively running tests  >with XML1.1/Namespaces1.1 documents, testing optional DOMConfiguration  >parameters, etc.  >    >  After the last teleconference, I'm pretty confident that there will be a   mechanism to disable XML 1.1 specific tests for implementations that   only support XML 1.0.  I'm not sure that there is a similar mechanism   for Namespaces 1.1.      >Thanks,  >Neil Delima / IBM / Toronto  >    >        

      As the tests were originally written earlier NIST suite and in the initial  release, the tests required that non-validating parsers provide default  attribute values.  The DOM WG determined that in the case of non-validating  parsers, providing default attribute nodes was optional (see  http://lists.w3.org/Archives/Public/www-dom-ts/2002Mar/0002.html).    To address this interpretation, I modified the named tests so that the tests  are only applicable to validating processors.        

      The problem that Jason and Mary were experiencing were probably due to calling a method, setTracer, that was just injected into the test page in the previous line of jsUnitRunner.js.  setTracer() is used to pass to the test a Tracer object that enables the warn, debug and inform routines.    The attached zip files contains replacements for main.html, jsUnitCore.js and jsUnitRunner.js from the previous patches.  In these files, instead of the testRunner setting the tracer object, the tests will retrieve the tracer object from their parent when warn, debug and inform are called.    warn, debug and inform are not used by the DOM tests, but can be checked by running the jsUnitTestSuite self-test suite.    Please let me know if this resolves the issue and please confirm that the self test passes appropriately.                      application/x-zip-compressed attachment: inject2.ZIP          

        xml-source.xml from the DOM Level 2 HTML recommendation and from the DOM   L3 Validation working draft reference the previously mentioned URL which   does not respond at the current time.  Most other references to the DTD   are relative and resolve to the DTD provided in the .zip file.    Also, the L2 HTML xml-source.xml file declares a 'us-ascii' encoding but   uses ISO latin characters such as /xA9.    I'll compensate for these in the DOM Test suite build file, but it would   be good to get the DTD available again.        

        The self-hosted in SVG stuff is definitely experimental and I would   appreciate problem reports.  I have been able to run individual tests   in Batik but only able to run in Adobe SVG after manually hacking to   add the test framework into the test document instead of using an   entity reference.  Because of the manual nature of running the   self-hosted tests, I have not attempted to run all the tests and expect   that there are some failures due to framework or production problems.    With KSVG's integration with Konqueror, I assume that you are able to   browse to the test directory and see a whole bunch of green and red   thumbnails.    Any test that depends on the total count of elements in the document   has a high likelihood of problems since the self-hosted tests depend on   inserting script elements into the document that don't appear in the   documents for the additional test suite.    Tests that load more than one document (typically to try to induce   WRONG_DOCUMENT_ERR's or the like) are problematic for the self-hosted   tests.  If the document URL's were identical, the documents returned on   the subsequent calls to load were clones of the initial document.  If   the URL's don't match, then the tests should be skipped.    The Bugzilla for the DOM TS should be used to log problems with the   test suite or the productions (http://www.w3.org/Bugs/Public).  I   haven't seen any traffic on the TS mailing list for quite a while, but   I haven't send anything myself.  If this doesn't hit the mailing list,   I'll follow up with the W3C staff.      On May 5, 2004, at 2:31 PM, Rob Buis wrote:    > Hi Curt,  >  > We started verifying our dom implementation against the dom ts   > testsuites. We are starting  > with the dom core 1/2/3 test svg files, but are intending of also   > testing event implementation etc.  >  > The progress has been quite good recently. However there are a few   > testcases and constructions in the dom1 and  > dom2 core set that we are not sure are 100% correct. For instance I do   > not understand how the multiple document  > loading works, and I think maybe in the translation from xml to svg   > tests some things (like counting the number of  > elements) go wrong. Please note that this is no criticism, it is quite   > possible our implementation is just wrong in  > these cases, but I just want to clear up these issues.  >  > Is there a good way we can discuss some testcases? I tried mailing the   > dom-ts mailing list (twice) but it seems down?  >  > BTW thanks for the work on the overall high-quality testcases!  > Cheers,  >  > Rob.  >        

      The contentType attribute goes on the suite element to specify that the  tests in the suite should be run using they specified contentType.    <suite name="svg_alltests" contentType="image/xml+svg"...>  <suite.member href="alltests.xml"/>  </suite>    The contentType element would be used as a condition when the expected value  differs with contentType, for example:    <if>  <contentType type="image/xml+svg"/>  <assertEquals actual="docElemNodeName" expected='"svg"' id="svgdocelem"  ignoreCase="false"/>  <else>  <assertEquals actual="docElemNodeName" expected='"staff"' id="docelem"  ignoreCase="false"/>  </else>  </if>      ----- Original Message -----  From: Mary Brady  Sent: Monday, December 10, 2001 9:16 AM  Subject: Re: contentType/offline fixes      Okay -- could you refresh my memory -- where  does the contentType go ?        

        One of my tasks from the last WG conference call was to describe how to   write tests when an operation may throw more than one error code.    Examples of such tests are nodeinsertbefore05, 06, and 10.  The basic   formulation is like:     <try>      <insertBefore obj="doc" var="inserted" newChild="newDocType"   refChild="docType"/>       <fail id="throw_DOMException"/>      <catch>          <DOMException code="HIERARCHY_REQUEST_ERR"/>          <DOMException code="NOT_SUPPORTED_ERR"/>      </catch>  </try>      If the operation does not throw an exception, it hits the <fail/> method   which unconditionally fails the test.  If a DOMException is thrown with   either of the specified codes, then the try block is left.  If   DOMException with a different code is thrown, the exception appears not   to be caught (it is actually caught and rethrown) which will cause the   test to fail.  The test-to-java transform produces the following code   for that fragment:          try {        inserted = doc.insertBefore(newDocType, docType);        fail("throw_DOMException");              }        catch (DOMException ex) {                    switch (ex.code) {        case 3 :         break;        case 9 :         break;            default:            throw ex;            }        }        

        I added quite a few (40-50) new tests to L3 LS which cover checks most   of the DOMConfig parameters effectiveness on calls to   LSParser.parseURI.  That is probably only about 1/3 of the tests that   need to be added (probably 20 more tests for parsing and 60 or so for   serialization)        

      I think I'm still encountering problems with Xalan.  There is a null pointer bug that I've been remiss for not submitting.  I've been using Saxon 6.5.2.        

      I've added a dom1-html-matrix target.  I believe matrix production was locking up Xalan-J, at this point, I'd recommend using SAXON 6.5.1 to build the suites.    I added metadata to HTMLAnchorElement*.xml.  None of the existing tests had any <subject> elements which are used to build the test matrix.  Adding the subjects is a clerical task, mostly cutting and pasting the appropriate URL from dom1-subjects.xml to the test.    I made some global replacements in the HTML L1 tests.      Every test defined the variable "doc" as a "Node".  While this is legal and the code does run, we know that "doc" really is a "Document" and declaring it as such removed a whole lot of unnecessary cast operations.    Changed "it's" to "its".    Changed ignoreCase="auto" to ignoreCase="false".  There may be a few cases where ignoreCase="auto" is appropriate, however it is only right in a small minority of cases and not for all but three comparisons in all those tests.    ignoreCase="auto" should only be used in those comparisons when the case of the returned value is dependent on the media type.  For example, using ignoreCase="auto" would be approriate for an assertion on an element's or attribute's name since an HTML processor should have uppercased the name and an XML processor should have preserved the existing case.        

        I've eliminated the use of <patch> tasks in build.xml (except when   producing SVG 1.0 DOM tests) by moving the changes to   Element.getElementsByTagName into existing XSLT transforms such as   dom2-combine.xsl.    I've also added a dom1-errata.xsl that produces a dom1-interfaces.xml   file that contains the additional NO_MODIFICATION_ALLOWED_ERR exceptions   and removed the HTMLBlockquoteElement.  I believe that should allow   resurrecting a few tests that were removed since they didn't validate.        

        As mentioned in a previous message, the correspondence between the   DocumentPosition bits and XPath axes is unclear and use different names   (CONTAINED_BY vs Ancestor, for example) for the same concept.    I would think that Node.compareDocumentPosition would be very prone to   usage errors.  Most scripting languages would not provide symbolic   constants and it would be relatively easy to misuse bit-wise operators.    It would seem a whole lot simplier and more usable to provide boolean   methods that correspond to the XPath Axes,    boolean isChild(Node node);  boolean isDescendant(Node node);  boolean isParent(Node node);  boolean isAncestor(Node node);  boolean isFollowingSibling(Node node); // always false for attribute  boolean isPrecedingSibling(Node node);  // always false for attributes  boolean isSibling(Node node);  boolean isFollowing(Node node);  boolean isPreceding(Node node);  boolean isAttribute(Node node);    Plus the existing isSame(Node node) for the self axis.    descendant-or-self and ancestor-or-self could be handled by or'ing   isSame and the appropriate other axis test.    Adding a method to determine if the nodes are in the same document might   also be helpful.    If you are only interested if the particular pair are, for example,   parent and child, it should be more efficient to only check that instead   of figuring out how they are related.        

        I've made modifications to many of the level1/html/files/*.html files to   make them valid HTML 4.01.  The most common chance was to changed the   public id when the public id identified the document as strict, but it   contained transitional elements or attributes.  Also synchronized id and   name attributes when they differed, removed onfocus and onblur   attributes and added a few summary attributes to tables to avoid warning   messages from JTidy.    I assume there are similar problems in the XHTML documents and in the   level2 fileset, but that is for tomorrow.        

        I've updated the "nightlies" at   http://homepage.mac.com/curt.arnold/FileSharing1.html.    The major new feature is are self-hosted HTML and XHTML versions of the   a subset of the tests to go along with the earlier self-hosted SVG   tests.  Self-hosting requires that the test either not load any files   or only load the same HTML compatible test file.  The self-hosted tests   run on several browsers that can't run the JSUnit hosted tests,   particular IE:mac, Safari, Konqueror, and Palm Web Browser 2.0.  (The   Palm web browser can only run individual tests, but will stall trying   to load the test index.)    To run the self-hosted tests, open the alltests.[x]html in   self-hosted/[x]html/level[n]/[module].  Clicking a link will load the   test document in the second frame which will immediately run a script   and replace its contents with a test report.  If you start logging, run   some tests, and click end logging, the third frame will be filled with   a test report that can be cut and pasted to produce an XML file   compatible with the JUnit xml reports.    Here is a quick summary of my experience running the tests:    Galeon 1.2.8 runs JSUnit, Self-hosted HTML  Amaya 7.2: fails all  Opera 6.0.3 Linux: runs Self-hosted HTML  Konqueror 3.2.0: runs Self-hosted HTML  Firefox 0.8: Runs all  Mozilla 1.7b: Runs all (Windows will crash on L2 HTML suite, fix in   progress)    IE 5.0 for MacOS 9: Runs Self-hosted HTML  IE 5.2.3 for Mac OS/X: Runs self-hosted HTML  Omniweb 5.0b: Runs JSUnit and self-hosted HTML  Opera 7.5 for mac: Runs self-hosted HTML and JSUnit, but JSUnit results   do not successful post to server  Safari 1.2.1: Runs Self-hosted HTML    IE 6: Runs all three  Opera 7.2 for Windows: Runs JSUnit and self-hosted HTML    Palm Web Browser 2: Runs individual self-hosted HTML tests, but will   stall loading alltests.html        

        This appears to be the only exception code in the DOM universe that does   not end in _ERR.        

        I've posted fresh copies of all the test suites at   http://homepage.mac.com/curt.arnold/FileSharing1.html.  I've updated   the documentations for the test suites and would appreciate any   comments on the layout, packaging, documentation et al.    In addition over the last few days, I've been able to do a reasonable   job of generating tests that run within an SVG browser.  In all the   distributions, there is an svg directory that has an .svg and .js file   for each test.  If you load the .svg file into a SVG browser that   supports external entities (Batik Squiggle but not Adobe SVG viewer), a   green box will be displayed if the test passed, yellow if it was not   applicable or red if it failed.   This is in addition to the Batik   support in the Java test suite and SVG plugin support in the ECMAScript   suite.        

      I had intended to commit these changes Friday evening, but there was an announced power outage for the W3C servers.  I hope to do some more work over the next few days and finally get to the point that I can look at Bob's work.    I changed to a handful of the Level 1 HTML tests to fix well-formedness or validity issues.    I have added about 20 tests to level2/events and made corresponding changes to the dom-to-xsd.xsl, dom-to-dtd.xsl, test-to-java.xsl and build.xml.  The tests basically cover most of the prescribed exceptional conditions, but don't yet cover normal event propagation or normal mutation events.  Hopefully, this will get the infrastructure in place for Jeroen to be able to build the Load/Save tests.    dispatchEvent8 - 12.xml demonstrate the use of a stock implementation (EventMonitor) of EventListener to capture and test dispatched events.    dispatchEvent13.xml demonstrates defining a test-specific implementation of EventListener.  The following fragment:  <!-- definition of private class instance that implements EventListener -->  <var name="listener1" type="EventListener">      <!-- instance scope variables,           value attributes are passed via constructor -->      <var name="events" type="List" value="events"/>      <var name="listeners" type="List" value="listeners"/>      <!-- implementation of handleEvent method          any parameters (in this case 'evt') are          predefined -->      <handleEvent>        <!-- method scope variables -->          <var name="target" type="EventTarget"/>          <var name="listener" type="EventListener"/>          <!-- add event to the collection -->          <append collection="events" obj="evt"/>          <!-- remove this and the other listener -->          <currentTarget var="target" obj="evt"/>          <for-each collection="listeners" member="listener">              <removeEventListener obj="target" type='"foo"' listener="listener" useCapture="false"/>          </for-each>       </handleEvent>  </var>      gets converted to:    public class dispatchEvent13 extends DOMTestCase {  ...      private class EventListenerd45e38 implements EventListener {          List events;          List listeners;              public EventListenerd45e38(List events, List listeners) {               this.events = events;              this.listeners = listeners;          }          public void handleEvent(Event evt) {              EventTarget target;              EventListener listener;              events.add(evt);              target = evt.getCurrentTarget();              for(int _index = 0; _index < listeners.size();_index++) {                  listener = ( EventListener ) listeners.get(_index);                  target.removeEventListener("foo",listener,false);              }          }      }    ...  public void runTest() throws java.lang.Throwable {  ...      EventListener listener1 = new EventListenerd45e38(events, listeners );      Changes to the DOMTSML:    added assertImplementationException to capture implementation specific exceptions like NullPointerExceptions.  Changed <EventMonitor.getAllEvents/> and similar to <allEvents/>  Changed xs:key and xs:keyref to not attempt to check for undeclared variables in anonymous classes.    Changes to build.xml    dom2-events-jar will create a dom2-events.jar.  Xerces-J will pass all current tests except dispatchEvent01 which expects an implementation exception for passing a null event.  Will need to see what other implementations do and possibly ask for a clarification.    dom1-html-jar now includes submittedtests/netscapeHTML for evaluation of Netscape submitted tests.    I'm in the process of patching Xerces-J's HTML DOM implementation to work with XHTML and hope to use that to provide another reference implementation for evaluating the HTML tests.        

      I've updated build.xml to download the new DOM 3 Core and AS/LS working drafts and moved the .patch files into a patches directory.    I spent some time trying to get the test suite runnable from the JUnit GUI test runners.  Unfortunately, I'm running into ClassNotFound at run time.  If any of you are masters of the Java class loaders and can diagnose the situation, I would appreciate it.    The idea is that you would be able to do something like:    java -jar junit-run.jar    and would be able to select a TestSuite for the spec, parser and configuration that interests you.  (Only org.w3c.domts.level1.core.TestDefaultParser is implemented now, but would expect to have many similar classes if we can get this working)    However, if you just do that, you will get a ClassNotFound error for DOMTestSink which should have automatically been on the classpath from the junit-run manifest (in dom1-core.jar)    I also updated the snapshoted documentcreatecdatasection.java to remove the .xml extension.  Generating that test would typically break Xalan, so a version prepared by Saxon is copied instead.  But I hadn't updated the copy since the media type changes.        

        Curt Arnold wrote:    >  > Neil Delima wrote:  >  >> <assertEquals actual="param" expected='Boolean.TRUE' id="blah"/>  <!--  >> again possible validation errors -->  >>  >>    >>  > Boolean.TRUE is way too much of a Java-ism.  Write it as   > expected="true" and I'll make sure the transform and infrastructure do   > the right thing.  >    Actually, write it as:    <assertTrue actual="param" id="blah"/>        

        I believe a preferrable alternative to creating patch files and   attaching to the Bugzilla issues would be to create a archived mailing   list for CVS changes (www-dom-ts-cvs@w3.org) and to add the URL for the   archived CVS change message when disposing the bug.  This would   eliminate a couple of manual steps that could introduce discrepancies   between the patch in Bugzilla and the actual changes to the CVS.    I haven't checked Bugzilla yet, but issue status should have a value to   indicate an issue is waiting for WG resolution.        

      Mary Brady wrote:  >Did anyone try the suggestion of creating an internal dtd instead of  external?  >Will this fix the problem without requiring validation?    I would consider those as a distinct new tests.  We do not have clear enough  guidance from the WG to know if default attributes from an internal subset  should be considered "known" and therefore should be provided.    We do know from the WG that they believed the existing tests over-reached  and tested behavior that was not always required.  However, they didn't  state the conditions under which the behavior was required.  If the behavior  was never required, then the tests should be deprecated.  By my changes, I'm  asserting my interpretation that the behavior is required when the parser is  validating since validation presupposed knowing the content of the DTD.    p.s. Marking the tests as requiring validation will only cause them to be  reported as Not Applicable to non-validating implementations.        

      I've got a set of statements at the bottom of this message that I'd like to  have confirmed (a clear yes, or an equally brief reformulation) so we can  close this issue.  But first some digression:    Phillippe Le Hegaret wrote:  > Even if the test suite has a way to determine if the underlying XML  > processor is validating or not, generating an error on the DOM  > implementation may be inappropriate if the default attribute is not  > there since it can be a problem with the XML processor.  Now, if we have  > a way to ensure that the XML processor did the right thing underneath,  > then it is certainly an error. One solution would be to say in the  > documentation that the DOM test suite assumes that the XML processor is  > XML 1.0 conformant (and points them to the XML test suite). Therefore,  > not having the foo attribute would be an error.    Any test could be undermined by the hardware, operating system, the  programming language, the compiler or stray gamma rays.  The fact that we  can't ensure that every layer below the layer under test is working  flawlessly, doesn't eliminate the value of testing a particular layer with  an implicit trust of the lower layers.  That trust might be violated and the  analysis of the test failure should properly identify who was at fault.    >One solution would be to say in the  >documentation that the DOM test suite assumes that the XML processor is  >XML 1.0 conformant (and points them to the XML test suite). Therefore,  >not having the foo attribute would be an error.    That seems to be the only solution.  Since most DOM implementations are  typically tightly bound to a particular parser, an application developer  should not care if the source of the conformance failure is a flaw in the  parser or the DOM implementation.  Either way, his expectations were  violated and it should be of no interest to him if they flaw was due to the  parser implementation team at Example, Inc. or the DOM implementation team  at Example, Inc.    >> If the behavior was never required, then the tests should be deprecated.    >The behavior was never required by the XML specification at the first  >place.    The DOM L1 spec errata:   In addition, if there are known attributes with default values, Attr nodes  representing them are automatically created and attached to the element.    The authors of the original NIST tests and multiple Java implementations  (possibly to  pass the NIST tests) interpreted this to require that the loading processor  provide more than the minimum information required for XML 1.0 conformance,  that the underlying  parser must provide default values even when not validating to produce a  conformant DOM tree.  That is they interpreted "known" as "specified" or  "knowable" instead of "required to be provided by an XML 1.0 conformant  processor"    For example, see  http://xml.apache.org/xerces-j/faq-write.html#faq-7 where they list  defaulting of attributes as being required for both validating and  non-validating modes of operation.  This is a FAQ since many people asked  why Xerces loaded the external subset even when not validating.  The  standard answer was that it was required to produce default attributes  believed (erroneously) to be required in all circumstances by the DOM spec.    Though that interpretation was apparently flawed (acceptible, but beyond the  minimum required of a conformant processor), it was reasonable  interpretation by experienced practitioners.  I think that is worthy of  clearer wording in an errata and/or later revisions.    ----------------    I'd like to have a affirmation or rejection of each of the following  statements:    Providing Attr nodes for default attributes specified in an external subset  is required when loading a document using a validating processor.    Providing Attr nodes for default attributes specified in an internal subset  is required when loading a document using any processor.    Providing Attr nodes for default attributes specified in an external or  internal subset is never prohibited.    The initial form of the default attribute tests*  demanded behavior that was  optional for non-validating parsers and therefore were not valid conformance  tests.    The current form of the default attribute tests (which mark the tests as not  applicable to non-validating parsers) only demands required behavior and are  valid conformance tests.      * attrdefaultvalue.xml, attrnotspecifiedvalue.xml,  attrspecifiedvalueremove.xml, documentcreateelementdefaultattr.xml,  elementremoveattribute.xml, elementremoveattributerestoredefaultvalue.xml,  elementretrieveallattributes.xml, namednodemapremovenameditem.xml,  namednodemapremovenameditemgetvalue.xml        

        My responses to issues that I raised,   http://www.w3.org/2003/06/09-dom-core-issues/issues.html.    arnold-1: NameList: contains and containsNS - satisified    arnold-2: attribute name case:  Satisified pending HTML errata    arnold-3: hasFeature and Core 1.0: satisifed    arnold-4: ordered collection - satisifed    arnold-5: getName vs getLocalName    The description of the resolution in the last call list is a cut and   paste of arnold-4.  It appears the intended resolution was to not   specify the interpretation of name within the interface but require   methods that return the interface to specify whether name was qualified   or local.    arnold-6: exceptions in NameList - satisified    arnold-7: DOMImplementationSource: satisified    arnold-8: actual encoding? - satisified    arnold-9: config or configuration - satisified    arnold-10: documentURI and valid URIs - satisified    arnold-11: recognized XML encoding - satisified    arnold-12: Requirements of standalone: satisified    arnold-13: adoptNode and importNode - satisified    arnold-14: adoptNode return value - satisified    arnold-15: Attributes and rename node - satisified    arnold-16: Position comparison    Not satisified and I will elaborate in another message.  There were   multiple objections only one was addressed in the response.    arnold-17: getFeature and hasFeature - satisified    arnold-18a: isWhitespaceInElementContent() or isWhitespaceInElementContent    Satisified with the change to a read-only attribute.  Still believe the   conditions that a value of true can be expected could be clarified.      From   http://www.w3.org/TR/DOM-Level-3-Core/core.html#Text3-isWhitespaceInElementContent        The text node is determined to contain whitespace in element content      during the load of the document or if validation occurs while using      Document.normalizeDocument().    Determining if a text node is element content whitespace requires   validation in any case, not just when normalizing.  Maybe:        The text node is determined to contain whitespace in element content      if validation occurs during the load of the document or during a      call to Document.normalizeDocument().    Also,        Returns whether this text node contains whitespace in element content,    If validation is enabled and an error handler is registered that ignores   validation errors, you could have a text node where it is known to be in   element content which contains both whitespace and some non-whitespace   characters.  In this case, some of the characters would be element   content whitespace per Infoset and others would not be.  "contains"   would imply that the value should be true as only as at least one   whitespace character appears.  "contains only" might be preferrable.    I believe this attribute will be subject to abuse since there is not a   simple way to determine if a text node contains only whitespace   independently of validation.  Adding CharacterData.isWhitespace readonly   attribute would provide a simple means for determining if a character   data node was exclusively whitespace irregardless of its context or   whether validation was enabled.      arnold-18: isId() or isId    Satisified with changing isId to an attribute.  If the setIdAttribute*   are needed for performance reasons, I would still like to see isId to be   read-write and have the setIdAttribute* convienience functions to be   defined in terms of setting isId.    arnold-19: DOMError clone: Satisified    arnold-20: User data and event handling: Satisified    arnold-21, arnold-22, arnold-23: TypeInfo related issues    Will need to be review and follow up in another message.    arnold-24: handleErrors    Satisified, but there is a minor typo ("he" instead of "The") in the   return value description for DOMErrorHandler.handleError in the working   group draft.    arnold-25: byte and character offsets: Satisified.        

      I've updated dom-to-xsd.xsl to be consistent with the current versions of Sun's Multi Schema Validator (MSV) and XSV from the University of Edinburgh.       A DOM L1 schema can be produced by    ant dom1-schema  ' approx 2 minutes build time    A DOM L2 schema can be produced by    ant dom2-schema ' approx 10 minutes build time    Tests can be validated against the schemas by downloading Sun's MSV (http://www.sun.com/software/xml/developers/multischema) and then running       java -jar \msv-20010910\msv.jar build\dom1.xsd tests\level1\core\*.xml    or     java -jar \msv-20010910\msv.jar build\dom2.xsd tests\level2\core\*.xml    I did check the DOM L2 schema by manually changing the namespace to Level-1 and validating the L1 tests and had no problem (other than 2 tests failing DTD validation against the dom1.dtd due to a missing raise clause in the DOM 1 spec that has been previously discussed).      I've also added interface="Node" to firstChild and similar methods in the tests that become ambiguous in DOM L2 since TreeWalker adds identically named methods.  This should allow the DOM L1 tests to validate against DOM L2+ schemas and DTDs and generate appropriate code.    I did some spot checks with XSV, but doesn't take wildcards for instance documents so it isn't as friendly.        

      There appears to have been a 24 hour delay in messages getting relayed.  It is not just you.    The conformant value is "Y&ent1;" or "Y%ent1" depending on the test.  The test was intended to expose a potential flaw where the parameter was processed through an entity expansion step.  If that flaw existed then "Y&ent1;" would be incorrectly expanded to "Yes", however "Y%ent1" would either not be recognized as anything special or even more unlikely as a incomplete parameter entity reference.  If such a flaw existed, "Y&ent1;" is much more likely to expose it than "Y%ent1".    I believe the use of the same fragment "Y&ent1;" in staff.xml and in the test was intentional, that the test author wanted to do something with a DOM method that looked very much like content in the XML document, but had different results due to the entity expansion step in parsing the XML document and the lack of an entity expansion step in processing values set by DOM methods.    I don't think there is any difficulty distinguishing between the initial state and a conformant state.  After the setValue call, the attribute would have a value that would have required the XML document to have contained "Y&ent1;".    I'm pretty sure that attrcreatetextnode3 does what the author of attrcreatetextnode was wanting to do but didn't quite accomplish.      ----- Original Message -----     From: Mary Brady     To: www-dom-ts@w3.org     Cc: mbrady@nist.gov     Sent: Wednesday, April 24, 2002 8:45 AM    Subject: Re: Testcase attrcreatetextnode2.xml in level1/core does not exercise the test        Hmmm -- not I'm even more confused.  When I looked at     the original test, I thought that the expected result was     supposed to be "Y&ent1;", not the expanded version.  I     don't have the spec in front of me at the moment, but I     believe both it and the comment against it were that the     expected result should not expand the entity, rather be     the text itself.  Thus, there was a problem with the test,     setting the result to "Y%ent1" instead of "Y&ent1;".  At     that point, I would have changed the test to simply use     "Y&ent1;" instead.  After further consideration, it might     be better to change it to be some other entity, maybe     "Y&ent2;", since that particular attribute is already set     to "Y&ent1;" in the staff.xml file -- it's difficult to determine     that the setValue actually did anything otherwise.      --Mary      P.S.  Please for the moment cc: Rick and/or myself or     www-dom-ts issues if you want feedback.  We seem to     be having problems getting mail from this list.        

        Jeroen van Rotterdam wrote:  > I believe there's a naming conflict between the load element of the test  > suite and the load method of DocumentLS in DOM L3 Load & Save.  >   >   > This is what my generated dtd says about load:  >   > <!ELEMENT load EMPTY>  > <!ATTLIST load  > var CDATA #REQUIRED  > href CDATA #IMPLIED  >     uri CDATA #IMPLIED  >     obj CDATA #IMPLIED  >     interface (DocumentLS) #IMPLIED  > willBeModified (true | false) #REQUIRED  >   >   >   > And here's a part of my test:  >   >  <assign var="documentls" value="document"/>  >  <load var="result" obj="documentls" uri="TEST1" willBeModified="false"  > interface="DocumentLS"/>  >   >   > Which has an attribute willBeModified which is added because it is  > required in the dtd. It should be eliminated.  >   > Here's the java code generated by the stylesheet:  >   >   >     documentls = (DocumentLS)  document;  >     result = load("");  >   >   > I assume the stylesheet is looking at the href since it assumes this a  > load by the framework instead of DOM L3-LS.  >   >   > Any idea ?    I committed two small changes to test-to-java.xsl and dom-to-dtd.xsl.   In test-to-java, I changed the test on the template that produces the   framework load from:    <xsl:template match="*[local-name() = 'load']" mode="body">    to    <xsl:template match="*[local-name() = 'load' and not(@interface)]"   mode="body">    That should let an DocumentLS load fall through to the DOM method   generation code.    In dom-to-dtd.xsl, I made willBeModified optional to be consistent with   the schema.    Please let me know if these adequately address the issue.        

      I'd think we shouldn't split the release just to move it up a day.  I don't  know what time zone Edward is in, but I got a flurry of messages about this  time yesterday.  So I'm thinking, he will probably have this morning's  changes in a release in a few hours or so.    ----- Original Message -----  From: "Dimitris Dimitriadis" <dimitris@ontologicon.com>  Sent: Monday, February 11, 2002 8:50 PM  Subject: Re: [Release] Final round      > On second thought, paying respect to the fact that E. Hieatt has indeed  > been responsive and Curt has invested lots of time into the JsUnit  > issue, we may want to consider releasing the Java part of the TS now  > (since we have no issues with it, as far as I can see) and allow for  > some more time in order to release a proper ECMA TS. I think this is the  > safest way to go about.  >  > People's views?  >  > If so, tomorrow mid-day is not to soon, given that we release Java only.  >  > /Dimitris  >  >  > On Monday, February 11, 2002, at 08:35 , Arnold, Curt wrote:  >  > > Edward Hieatt has been very responsive and if the patch that I submitted  > > this morning passes his review, I would expect that he would update  > > JSUnit  > > very quickly.  However, I think that tomorrow mid-day might be to soon  > > to  > > expect an updated JSUnit and I would prefer not to include a JSUnit that  > > does not correspond to a released version.  > >  > > The version numbers are explictly written in the manifest files along  > > with  > > copyright and other information.  I would appreciate someone else  > > updating  > > them appropriately.  They are not part of the transform but are in the  > > java  > > subdirectory (java/dom1-core.mf and java/junit/junit-run.mf, if memory  > > serves).  > >  > > Are you building the distributable with Ant?  There should be a task  > > like  > > dom1-core-dist that would build everything repeatably.  > >  >  >        

          >You want a configuration switch that tells the parser to behave as an  >"application-aware" parser vs. a generic parser. If set to  >"application-aware," and it encounters an invalid element or attribute,  >it would presumably fail in some way, or attempt some kind of recovery,  >etc. If set to "generic," it would succeed as long as the document is  >well-formed (you said "valid" in your message, but I think you meant  >"well-formed," no?), but the downside is that the final result is a  >generic DOM object tree, devoid of any language-specific semantics or  >functionality.  >    >  Sorry, I did mean "well-formed".    >Is that a reasonable elaboration?  >  >In my own work, I've put together a system that instantiates elements  >and attributes on a purely namespace+scoping basis. "Smart" elements are  >instantiated based on their qualified names, and "smart" attributes are  >instantiated based on the combination of their qualified names plus the  >qualified names of the elements that own them (this is necessary for  >SVG, where the same name is used for attributes having different  >semantics when contained within different elements).  >  >If a qualified name is not recognized by the parser, it "falls through"  >and a generic DOM element or attribute object is instantiated. So, in a  >limited sense at least, the parse always succeeds, in that the parser  >never fails because of invalidity. However, it's possible that an  >attempt to insert the wrong kind of content or attribute into an element  >might cause an exception to be raised. For example, assuming my parser  >understands both SVG and XHTML:  >  > <!--namespace declarations omitted for brevity-->  > <svg>  >   <html/>  > </svg>  >  >Here, the <html> element will be instantiated successfully, but an  >exception will be raised upon the attempt to insert it as a child of the  ><svg> element. Note that the exception is not raised by the parser, but  >by the "smart" <svg> element itself, which knows that it shouldn't have  >an <html> element as a child.  >    >    Actually, an SVG implementation is required to ignore all   foreign-namespace elements, so <svg><html/></svg> would be valid SVG,   but <html><svg/></html> would not be valid XHTML.    >Anyway, back to your question: I'm not sure that I would consider this  >to be as much a parser configuration setting as an application  >configuration setting. At least part of my rationale for this is because  >of the way my parser works, as described above--it's left up to the  >"smart" elements themselves, rather than the parser, to decide what's  >right and what's not.  >  >    >    When populating a DOM tree by loading a document using DOM L&S, the   application has no hook to control the type of nodes created during parse.    Consider this scenario, I have a script within an XHTML document that is   loaded into an XHTML browser.  The DOM implementation of the currently   rendered page may have a precondition of semantically valid XHTML,   otherwise the page would not be rendered, and exposes the HTML DOM.  A   script on that page attempts to load another XHTML document using L&S.    The parser has no way of knowing if the XHTML document is semantically   valid XHTML and I'd like to have access to the HTML DOM interfaces or if   the application is an XHTML editor and tolerates semantically invalid,   but well-formed, XHTML and does not expect the HTML DOM interfaces.  The   fact that my host document meets the preconditions for and exposes the   HTML DOM interfaces, does not indicate that any document that I attempt   to load will meet the same preconditions.    I assume the specification would consist of DOM feature names that you   request the resulting DOM tree to expose.  Something along the lines of:    parser.configuration.setParameter("dom-features", "SVG 1.1");                     

      Since expanding entities on load is an acceptible behavior, I've added siblings of all the *NoModificationAllowedErr tests with an EE suffix (for entity expansion) which tests the same behavior using created entity references instead of loaded entity references.    I've made most of the tests safe for different parser settings.  Tests are most commonly affected by expandEntityReferences and ignoringElementContentWhitespace.  Some DOM are hardwired to a particular setting (Xerces-C always expands entity references, Batik ignores element content whitespace).  The harness runs the test suite twice, once with the default settings and then once with complementary settings.    Tests that declare <implementationAttribute> immediately after the metadata element will modify the default DocumentBuilderFactory for the test pass to their needs.  So in the second pass when most tests are expanding entity references, ...NoModificationAllowedErr tests will not expand entity references but will keep all the other settings.        

          On Feb 25, 2004, at 5:43 PM, Andrew Clover wrote:    >  > Curt Arnold <carnold@houston.rr.com> wrote:  >  >> What actions should be expected if a character in the document is not  >> fully normalized?  I'd assume that an error should be dispatched, but  >> the spec doesn't say.  >  > LS specifies a 'check-character-normalization-failure' DOMError.   > Perhaps  > this ought to be in Core, though given the resolution of  > LSSerializer-iucd-issue it probably won't be.  >    Sorry I missed it since I've been trying to finish up the L3 Core suite   at the expense of all the other modules.    >> As far as I am aware there are no implementations supporting either of  >> these parameter being true.  >  > pxdom supports both, but only on Python 2.3; earlier versions of the  > unicodedata module do not provide character normalisation.  >    I would appreciate any feedback on the L3 Core tests added yesterday.        

      I see three specific phases where we could use EARL.  One is the test  results reporting, which is appropriately out of the scope of the test suite  definition.  The second is to capture the relationships between tests and  the debate and judgement on tests after their submission, but we aren't  there yet.  The third is self-description of submitted tests.    In this third use, using EARL and other RDF vocabularies places a pretty  steep learning curve to test submitters and high potential for error in the  test description.    My current thinking is that we keep the <metadata> element that is in my  current schema and continue to allow it to contain an <rdf:RDF/> element for  power users or unanticipated metadata but also allow it to contain elements  from the test definition namespace.  These elements should have the same  semantics as some attribute in an established RDF vocabulary and it should  be straightforward to use XSLT to either generate external RDF or to recast  the test using exclusively rdf expression.    <test>      <metadata>          <creator>John Doe</creator>          <publisher>Example Software, Co</publisher>          <date>2001-05-28</date>      </metadata>  </test>    Then it just becomes of question to identify what properties defined by  Earl, Dublin Core, etc are appropriate for self-description but are not  obvious (such as <dc:format>text/xml<dc:format>) and define a representation  for them in our schemas and/or DTDs.        

      I spent most of the weekend adding support for the specification of contentType in test suites.  Basically, that means now you can test XML, SVG or HTML DOM implementations in a browser by selecting an appropriate test suite (xml_alltests, svg_alltests or html_alltests respectively).  If you just run alltests, then the "default" contentType for the processor under test is used.    The HTML tests can now be run in IE5 using the text/html and in Mozilla using text/xml.  Tests that depend on HTML specific interfaces will fail in IE using text/xml (since it is using the MSXML parser which doesn't implement the HTML interfaces) and will fail (at least on a fairly old nightly build) in Mozilla using text/html due to what appears to be a serious problem in the DOM structure (none of the nodes under body appear to be there).  I haven't had a chance to try it in a more recent build.    The text/html tests will cause unsightly stray windows to appear, if anyone wants to tweak DOMTestCase.js to hide those or make them less innocuous, please feel free.    I have not propagated any of the changes to the Java side, other than adding the ".xml" extension that I removed from all href attributes.  I have also not done anything on moving the patch files or adding descriptions to the tasks in build.xml.    I have however guarded all the <get> tasks in build.xml, so once you have downloaded the DOM specs, subsequent builds do not attempt to check the W3C server to check the timestamp.          

      Thanks for the catch.  Fixed in the CVS.        

        Allen, Michael B (RSCH) wrote:  > Is Xalan-J really was folks are using right now? I checked out the latest everything and it's just not building. I ran into an error building the DTD where $exceptions was in scope but Xalan-J  > apprently didn't know about it yet because it threw a NullPointerException. Strangely adding a value-of to the dom-to-dtd.xsl provoked it to get over that hump.  ...    >   > How do you pass Java options to ant so that I can try the ol' -Xmx512m?  >   > Mike  >   > PS: Hi  >   >     I've been using Saxon 6.5.2.  Ant will automatically use it if placed in   the ant/lib directory and there is not a xalan.jar there.    Obviously, it would be nice if we could reliably build with Xalan-J   since it comes bundled with Ant.  However, it has been pretty difficult   to reproduce some of the problems in isolation.  I hadn't run into the   NullPointerException issue, I'll try to isolate the problem, file a bug   report and tweak the transform.    Use the ANT_OPTS environment variable to pass Java VM options    SET ANT_OPTS=-Xmx512m        

      This is a continuation of an www-dom-ts discussion on whether it would be  allowable for an implementation of node.isSupported to throw an exception  if, for example, the feature name is not an XML name even though the spec  says "No exceptions".    For some background,  http://java.sun.com/docs/books/tutorial/essential/exceptions/catchOrDeclare.  html  http://java.sun.com/docs/books/tutorial/essential/exceptions/runtime.html    Now to the text of Exception DOMException:    The first paragraph, "DOM exceptions only...", is a  general design  principle.  It says the design of DOM prefers to return error values unless  things are seriously wrong.  The example sited is that  nodeList.item(nodeList.length) returns null instead of throwing an out of  bound exception.    The second paragraph (as clarified in errata core-15) could still be  clearer:  Implementations should raise other exceptions under other circumstances. For  example, implementations should raise an implementation-dependent exception  if a null argument is passed when null was not expected.    I would not interpret this as a license for implementations to intentionally  throw exceptions that are not explicitly defined in the spec, but as an  acknowledgement that what would be called a RuntimeExceptions on the Java  platform, such as the mentioned NullPointerException, SecurityException, out  of memory exceptions, etc, might occur without an explicit attempt to raise  an exception on the part of the implementation.  (I think the perceived  intent would be better expressed if "should" were "can" and "other" were  "unanticipated")    For a Java implementation to raise an "implementation-dependent exception"  because the feature is not a valid XML name, the implementer would have to  violate both the DOM design principal mentioned in the first paragraph  (since it is choosing to throw an exception when returning false is  adequate) and to purposefully create an RuntimeException for an explicitly  thrown exception not in runtime code (otherwise the Java compiler would  report an error in throwing a checked exception that was not declared in the  method).    Most other platforms/languages would not enforce the prohibition on throwing  undeclared exceptions, however the principal should still be in effect, you  don't surprise a caller with an exception that you didn't tell them to  expect.        

        Gump (http://jakarta.apache.org/gump) continuously builds a couple   hundred open source projects (http://cvs.apache.org/builds/gump/latest/)   from scratch.  There have been several occassions where our build   process was broken and it was not notices for a substantial period of   time.  I believe the Gump team would be receptive to adding the test   suite to their build list.  Any thougths?        

        http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures        For example, this specification defines the features "Core" and      "XML", and thus for the versions"1.0", "2.0", and "3.0".    The "and thus" appears to be extraneous.  You would expect it to   introduce a statement that would be true because this specification   defined the specified features.        As discussed Mixed DOM implementations, DOM Level 3 Core should be      able to collaborate with subcomponents implementing specific DOMs.      For that effect, the methodsDOMImplementation.getFeature(feature,      version) and Node.getFeature(feature, version)were introduced. If a      plus sign "+" is prepended to any feature name, implementations are      considered in which the specified feature may not be directly      castable but would require discovery through getFeature. Without a      plus, only features whose interfaces are directly castable are      considered.    getFeature ignores any leading "+" sign so introducing the convention of   a leading plus sign within that context is a bit confusing.        

          >In that case, I agree that your proposal makes sense. But I have to ask:  >Won't _any_ parser that's capable of "smart" parsing necessarily contain  >a heavy dose of implementation-dependent features? It seems to me that  >an application-specific DOM tree that doesn't actually do anything isn't  >much more use than a generic DOM tree.  >    >    When executing script in an XHTML page or SVG image, your only available   parser might be the browser viewing the document and getting a generic   DOM tree might be exactly what you want.  However, without a   configuration parameter, the implementation has no way of knowing that.        

      MSV apparently gets confused with dom2.xsd.  If someone could provide another command line alternative for validating multiple files that do not have xsi:schemaLocation attributes against dom2.xsd, it would be useful since schema validation picks up a lot more errors.  Possibly MSXML 4 with Windows Scripting Host?   You can test it by changing "Level-2" to "Level-1" in the namespaces in dom2.xsd and try to validate tests/level1/core/*.xml        

        Jeroen van Rotterdam wrote:  > I expected that I would have to write an ErrorHandler like this:  >   > <var name="errorHandler" type="DOMErrorHandler">  >   <var name='error'            type='DOMError'/>  >   ...  >     <return value="false"/>  >   </handleError>  > </var>  >   >   > The stylesheet produces java code that looks ok.  >   > My generated dom3.dtd however requests the following structure on  > handleError:  >   >   > <!ELEMENT handleError EMPTY >  > <!ATTLIST handleError  >     id ID #IMPLIED  >     obj CDATA #REQUIRED  >     var CDATA #REQUIRED  >     error CDATA #REQUIRED  >     interface (DOMErrorHandler) #IMPLIED  >   >   > Which seems incorrect.  >   > The same counts for DOMBuilderFilter: whatToShow    DOMErrorHandler did not appear in the value of sink-interfaces in   dom-to-dtd.xsl and dom-to-xsd.xsl which specifies which interfaces are   expected to be implemented by the caller.  Since it didn't appear there,   <handlerError> was defined as if it were an implementation provided method.    DOMBuilderFilter was in the sink-interfaces value, but the DTD   generation for user-provided attribute implementations was not complete.    I'll commit the changes to dom-to-xsd.xsl and dom-to-dtd.xsl shortly.        

      Mary Brady wrote:  >Didn't you have an element that could identify conditions under which the  test should be  >run?    Yes, if you place an <implementationAttribute name="enumdProperty"  value="true/false"/> immediately after the <metadata/> element, then the  test will attempt to change the document builder used for the test to be  compatible or will throw an exception in the test constructor and not be  reported as either a pass or a failure.    >How about if we make the harness smart enough to accept as input test  >conditions, and only run the tests that are available for those conditions  instead of  >running through the tests twice?    The reason the tests are run twice, each with a difference set of  conditions, is that the implementation could have, for example, dorked  something with namespace processing and would pass all the tests with, for  example, namespaceAware=false and fail some with namespaceAware=true, even  though none of the tests should need to change their expectations due to  namespace awareness.  Same goes for validation.  Since you would expect that  it would be rare for a bugs to be dependent on two parser configuration  attributes (for example, only occurs when namespaceAware=false and  validation=true), two runs should be sufficient and you don't need to run  all the permutations.    The two run behavior is not in the tests (that is dom1-core.jar), but in the  runners (junit-run.jar and avalon-run.jar).    > It seems as though I remember some other implementations  > that had somewhat different variants of whitespace -- in some cases,  comments and  > "normal" whitespace were stripped, in others, only "normal" whitespace was  > stripped.  Given that these options are not well-defined, we could let the  implementor  > using the tests provide the proper info.    The meanings of the various properties have to have well defined meanings  since the set the expectations between the test and the processor.  However,  there is no obligation for the an implementation to support any of the  properties, if it refuses to provide an implementation with validation =  true or ignoringElementContentWhitespace = true, the tests that required  those properties do not run.    ignoringElementContentWhitespace is the behavior described in JAXP 1.1.  If  the source document has a DTD, MSXML's whitespace processing is compatible.  So for the tests currently written, we would not need to distinguish between  the two.    If an implementations' whitespace elimination mode removes comments, then if  their implementation is JAXP compatible, they should throw an exception when  it is attempted to create a DocumentBuilder with  ignoringElementContentWhitespace = true.  If it is in another platform or  language, they have control on what configurations are tested and they just  don't test that configuration.    At least, it is essential to detect and compensate for  expandEntityReferences since the DOM specs explicitly allows entity  expansion.  Testing the Java parsers in both modes increases confidence in  the tests since the pool of parsers that do not support entity preservation  is pretty small, but non-zero (Xerces-C is an example).    Ignoring whitespace is a very common option and if I remember right, Batik  and maybe Adobe's SVG Viewer, are hardwired to remove whitespace in element  content.    On a related note, MSXML and Oracle's Java parser represent the XML  declaration as a processing instruction.  I don't know if any of the current  tests are affected by that (earlier test suites were), but if they are, I  would suggest addressing it by pruning the XML "PI" before returning from  the load() method        

        Elena Litani wrote:    >  >  >  >The test "DOMInputSourceTest3" is incorrect. According to the spec, the  >encoding info (in LSInput) is ignored if a stringData is passed in the  >LSInput. Instead, the data is treated as UTF-8.  >  >    >  I think it is correct per the current spec.  LSInput.stringData is set   "<foo/>", encoding is set to an arbitrary encoding (UTF-8 in this case),   the document is parsed and then the resulting document is checked that   the encoding is "UTF-16" and not the arbitrary encoding set on LSInput.          

        The description of DOMErrorHandler.handleError mentions that the error   parameter may be reused across multiple calls.  That would suggest the   need for a clone method on DOMError in case a handler wishes to hold on   the error.        

      Actually, in that context you wouldn't even need to go to Unicode  characters, you could use the return value "#default" when the URI matches  the default namespace and leave "" for no match.    The design of element.getAttribute() seems to have anticipated the problem  by explicitly returning "" instead of null when the attribute name is not  found.    For already recommended methods, there needs to be a resolution that  accomodates the deployed implementations where Java implementations return  null and ECMAScript implementations return "".  However, for L3 methods,  avoiding the use of null DOMString parameters and attributes in the  definition would preempt having to deal with it in the bindings.        

      The similarity and overlap between ASException, XPathException and DOMException would appear to be problematic.  If a caller in a loosely-typed binding received an exception, it would be difficult to distinguish between the exceptions.    The overlap in symbolic names that I've noticed are:    ASException.INVALID_CHARACTER_ERR == DOMException.INVALID_CHARACTER_ERR == 5    ASException.VALIDATION_ERR == 6, DOMException.VALIDATION_ERR == 16    ASException.TYPE_ERR == 2, XPathException.TYPE_ERR == 2    The overlap of code values would seem to be totally avoidable,  there is not a shortage of distinct integer values and it should be very easy just to assign, for example, XPathException.TYPE_ERR = 102, so that it will never be misinterpreted as a DOMException.DOMSTRING_SIZE_ERR.        

      > [dd] suiteMember sounds better to me, allows both suites and tests.  >    I ended up going with <suite.member href="..."/>, but I'm not married to the  "." vs camel case.        

      > This isn't a problem. Like all location paths, /svg/rect/@width  > returns a node-set, not a number.    This was specifically in the context of the DOM L3 XPath, not XPath in  general.  Specifying a return type on the evaluate call requires a coercion,  however the how the coercion is done is not as specifically detailed in the  DOM L3 XPath draft as the number(), string() and boolean() functions are in  XPath.    Specifically, what should happen if you do:    XPathResult result = ((XPathEvaluator) doc).evaluate("/svg/rect/@width",  doc,null, NUMBER_TYPE, null);    I do not believe the DOM L3 XPath draft clearly stated what the expected  behavior should be for this case.        

      The same issue should affect NamedNodeMap.setNamedNode which has consistent  wording on the criteria for throwing INUSE_ATTRIBUTE_ERR.  At least in  Xerces-J, the implementation of Element.setAttributeNode is a delegation to  the implementation of NamedNodeMap.setNamedNode, so any changes should be  consistent.    Removing the node from its original location and not throwing an  INUSE_ATTRIBUTE_ERR would potentially break applications that depended on  this behavior.    If I remember the genesis of this test correctly, there was a processor that  was failing the miswritten elementinuseattribute test which would indicate  that there was a processor that was not throwing an exception.  However, I  would need to survey the implementations again to confirm that.    The cost of implementing the no exception on same behavior is trivial since  it would only add an identity check after it is determined that the  attribute is in use.  I think it is remote that any application would be  adversely affected by changing the implementations to no exception on same  behavior, and if they did, they were at risk for depending on behavior that  was not in the spec.        

      elementreplaceattributewithself:    Calls Element.setAttributeNode() with an attribute currently attached to  this element.  The spec says that an IN_USE_EXCEPTION should be thrown if  the attribute is attached to another element, but does not mention throwing  that exception if the attribute is attached to this element.  Fails in both  configurations.  MSXML also fails this test.    *EE tests and documentcreateentityreferenceknown:    These are variants of similar named tests that createEntityReference's  instead of accessing them from the tree so that the same underlying behavior  (primarily NO_MODIFICATION exceptions) can be tested when entity references  are expanded.  All these tests pass when entity references are preserved,  but fail when entity refereneces are expanded since Xerces does not populate  the entity reference with the entity content as it should.      Xerces-J 1.4.3    isCoalescing() == false  isExpandEntityReferences() == false  isIgnoringComments() == false  isIgnoringElementContentWhitespace() == false  isNamespaceAware() == false  isValidating() == false  .........................................  .........................................  ..................................E.......  .........................................  .........................................  .........................................  .........................................  ...  Time: 4.446  There was 1 error:  1)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/elementreplaceattributewit  hself(org.w3c.domts.JUnitTestCaseAdapter)  org.w3c.dom.DOMException: DOM009 Attribute already in use  at org.apache.xerces.dom.AttributeMap.setNamedItem(AttributeMap.java:126)  at org.apache.xerces.dom.ElementImpl.setAttributeNode(ElementImpl.java:504)  at org.w3c.domts.level1.core.elementreplaceattributewithself.runTest(Unknown  Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)      FAILURES!!!  Tests run: 290, Failures: 0, Errors: 1    isCoalescing() == false  isExpandEntityReferences() == true  isIgnoringComments() == false  isIgnoringElementContentWhitespace() == true  isNamespaceAware() == true  isValidating() == true  .............E.........E.......E............  ......E.........E.............F.............  ..............................E..E..E.......  ...E......................................  .........................................  .........................................  ............E.............E......E..........  ...  Time: 2.884  There were 12 errors:  1)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/attrsetvaluenomodification  allowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.attrsetvaluenomodificationallowederrEE.runTest(Unk  nown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  2)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/characterdataappenddatanom  odificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.characterdataappenddatanomodificationallowederrEE.  runTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  3)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/characterdatadeletedatanom  odificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.characterdatadeletedatanomodificationallowederrEE.  runTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  4)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/characterdatainsertdatanom  odificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.characterdatainsertdatanomodificationallowederrEE.  runTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  5)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/characterdatasetdatanomodi  ficationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.characterdatasetdatanomodificationallowederrEE.run  Test(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  6)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/elementremoveattributenode  nomodificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.elementremoveattributenodenomodificationallowederr  EE.runTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  7)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/elementremoveattributenomo  dificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.elementremoveattributenomodificationallowederrEE.r  unTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  8)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/elementreplaceattributewit  hself(org.w3c.domts.JUnitTestCaseAdapter)  org.w3c.dom.DOMException: DOM009 Attribute already in use  at org.apache.xerces.dom.AttributeMap.setNamedItem(AttributeMap.java:126)  at org.apache.xerces.dom.ElementImpl.setAttributeNode(ElementImpl.java:504)  at org.w3c.domts.level1.core.elementreplaceattributewithself.runTest(Unknown  Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  9)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/elementsetattributenomodif  icationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.elementsetattributenomodificationallowederrEE.runT  est(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  10)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/nodesetnodevaluenomodifica  tionallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.nodesetnodevaluenomodificationallowederrEE.runTest  (Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  11)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/processinginstructionsetda  tanomodificationallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.ClassCastException: org.apache.xerces.dom.DeferredTextImpl  at  org.w3c.domts.level1.core.processinginstructionsetdatanomodificationallowede  rrEE.runTest(Unknown Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  12)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/textsplittextnomodificatio  nallowederrEE(org.w3c.domts.JUnitTestCaseAdapter)  java.lang.NullPointerException  at  org.w3c.domts.level1.core.textsplittextnomodificationallowederrEE.runTest(Un  known Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)  There was 1 failure:  1)  http://www.w3.org/2001/DOM-Test-Suite/level1/core/documentcreateentityrefere  nceknown(org.w3c.domts.JUnitTestCaseAdapter)junit.framework.AssertionFailedE  rror: size expected:<1> but was:<0>  at org.w3c.domts.JUnitTestCaseAdapter.assertSize(Unknown Source)  at org.w3c.domts.DOMTestCase.assertSize(Unknown Source)  at  org.w3c.domts.level1.core.documentcreateentityreferenceknown.runTest(Unknown  Source)  at org.w3c.domts.JUnitTestCaseAdapter.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.runTest(Unknown Source)  at org.w3c.domts.JUnitRunner.execute(Unknown Source)  at org.w3c.domts.DOMTestCase.doMain(Unknown Source)  at org.w3c.domts.level1.core.alltests.main(Unknown Source)    FAILURES!!!  Tests run: 290, Failures: 1, Errors: 12        

        Elena Litani wrote:    >  >  >  >The following tests are invalid: entitygetinputencoding03,  >entitygetinputencoding04, entitygetxmlversion03,  entitygetxmlversion04,  >entitygetxmlencoding03, entitygetxmlencoding04.  >    >  >The tests should either be removed or changed so that external entities are  >referenced in the document.  >  >    >  Logged as bug 451, changed tests are now in the CVS.        

      Related to the recent singleNodeValue thread, I'm not sure if the case of multiple matching nodes has been adequately addressed for non-node return types.  For example, asking the query /svg/rect/@width with a number return type on the following document:    <svg><rect width="100"/><rect width="200"/><svg>    The options that I see would be:    a) Following the pattern of number() and string() in XPath and return the first matching value.    b) Throw an exception, though it should be distinct from TYPE_ERR.    c) Separate multiplicity and ordering from the return type parameter and have doubleValue, booleanValue, stringValue (and nodeValue for node snapshots?) return array types.    d) Separate multiplicity and ordering from the return type and have doubleValue, booleanValue, and stringValue have an index parameter.    However, I don't believe the scenario is adequately addressed in the current draft.  My initial leaning would be toward option c, however I would assume that array types are avoided intentionally in the DOM.        

      The Xerces jar that contains L2 interface definitions is on the compile  classpath by default since it is included with Ant.  Since the L3 interfaces  in the version of Xerces that is distributed with Ant will lag the most  current working draft, the build file needs to compile the interfaces from  the W3C sources (which it is apparently doing) and prevent the Xerces  sources from being referenced (which it probably isn't doing).  I'll add it  to the list of things for me to look at this weekend/        

      I guess part of my thought process is to load all the features that I could  possibly envision into the design to see if things start looking weird.  In  this case, continually adding additional flags and parameters to the  evaluteAsNodeSet method started looking pretty nasty.  It became apparent  that XPathExpression was the right place for optimization hints.    > Timeout: Since our API is specifically operating against a DOM, I'd say  > that's not really an XPath issue. Timeout has to be dealt with for _any_  > remote DOM operation. I don't think base XPath implements document()...  and  > of course any extension function plugged in (if we permit that) has to  deal  > with what happens if the function blows up for various reasons.    Even if the DOM is in local memory, a poorly designed (or intentional Denial  of service) XPath expression or a really large document might result in  unacceptible evaluation times.  However, what time period would be  intolerable would depend on the application and might even vary query by  query within an application.    If the query was being processed immediately and on the same thread,  implementing time out behavior could be as simple as:    for each node      check node against query      if elapsed time > timeout throw exception  next node    Definitely timeout behavior would have to be carefully worded.  You  definitely couldn't guarantee a hard time out      > Limiting the return set: The ideal solution would be if the query itself  > was incremental and only computed results as you need them. But as someone  > who's involved in an XPath implementation, I can attest that this is not  > easy to implement for a complicated path. We're trying, but sometimes  we've  > had to compute the whole darned thing before you can return any part of  it,  > due to ordering requirements. I'm not sure that limiting the return set,  > per se, actually opens any significant opportunities for optimization.    Being able to relax the ordering requirements seems like a key enabler for  lazy evaluation (and unlocking the value of a return set limit)    If "first mode" is replaced by "any node" in the definition of  evaluteAsNode, then it could be lazy evaluated and that would be reasonable  since that method would only be called when there is an expectation of only  one node matching the pattern.  That behavior would seem to a special case  of the result set limit and disabling ordering.  I think the by default  ordering should be preserved, but probably should have an option on  XPathExpression when you really don't care about the order.    The more that I think about doing XSLT looks like an essential feature.  In  the previous messages, I had a XPathSortCriteria interface patterned after  the XSLT sort options.  Probably better to put those as properties of  XPathExpression and eliminate the distinct interface.        

      Rick Rivello wrote:   >     I'm not sure I understand.   >     The above test loads applet2.html which has an object attribute   specified.   >     What else is needed to make the test valid?   >    Sorry, it was a long night.  I didn't notice the "2" and thought it was   trying to infer the value for object from the running applet.    I don't know how the "object" attribute was ever used with Java   applets.  It is supposed to be the serialized form of the applet,   however Java serialization is explicitly binary, not character.  I've   attached the serialized form of our org.w3c.domts.DOMTSApplet.  How you   would get that into HTML so that the right binary sequence got to the   applet I don't know (notice the class name is in ASCII, not UTF-16).    The Microsoft documentation does not list OBJECT as a supported   attribute for APPLET, however it appears that they are returning an   object pointer for something.    I'm thinking that the HTMLAppletElement.object attribute might be a good   thing to somehow "undo" from the DOM L2 HTML spec.  If it actually   worked, DOMString would not be the appropriate type, it should be some   kind of byte stream.  Removing it from the spec would not be more of a   breaking change than changing return types from DOMString to long.    If not removed from the spec, I would suggest removing this test from   the suite since I don't see a way that the feature could really be used   as written and if this was the only test that IE failed, then I would   not suggest they change the current behavior just to satisfy this test.    p.s. I updated build.xml to copy the DOMTSApplet.class file into the   HTML L2 build directory like it did for the HTML L1.  I don't think it    changes the results of any tests, but I believe it did make the tests   load faster.                application/octet-stream attachment: applet.serialization          

        Hopefully, I've fixed the problem that caused the recent gump failures.     I added tasks that use JTidy to validate HTML test input files and   generated HTML.  However since JTidy isn't built by Gump, it can't be   forced on the classpath, so the build must be able to operate with it   missing.    I'm in the process of creating clean builds.  These builds were created   using:    Windows XP  Ant 1.6.1  JDK 1.4.2_03  Doxygen 1.5.3    There were no modification necessary.    The commands necessary to build    cd \domts  cvs -d:pserver:anonymous@dev.w3.org:/sources/public login  cvs -d:pserver:anonymous@dev.w3.org:/sources/public co   2001/DOM-Test-Suite  path c:\j2sdk1.4.2_03\bin;c:\apache-ant-1.6.1\bin;c:\Program   Files\doxygen\bin  cd 2001\DOM-Test-Suite  '  the following just to make sure path is right  java -version  ant -version  doxygen -version  '  build dom1-core-dist  ant dom1-core-dist    Repeat for each level/module combo.    build.xml currently downloads a hacked version of JSUnit from   http://home.houston.rr.com/curta/jsunit.zip.  Eventually, it will   either download from the JSUnit distribution page or jsunit.zip will be   in the CVS.    I did not reorganize the distributions, however I did collect some   statistics on the file sizes (compressed and expanded) of the   components in the distribution.  The L1 Core distribution is 6.3 MB tar   gzipped, Java, ECMAScript and Documentation (matrix and doxygen) each   contribute about 2 MB to the tgz.  The distribution expands to 44 MB,   documentation takes around 29 MB, ECMAScript 8 MB, SVG 3.3 MB, Java 2.2   MB and Tests 1.5 MB.    Creating Java + Documentation and ECMAScript + Documentation   distributions doesn't seem appealing to me.  Their tgz file is now 4 MB   instead of 6, but the expanded size of the ECMAScript + Documentation   distribution is only 2 MB smaller that the previous all in one.  It   would make better sense to have a Test documentation tgz (2 MB tgz, 30   MB expanded) and either a combined binding dist (4 MB tgz, 10 MB   expanded) or separate binding tgz's.    I've update the nightly build with a DOM L1 Core, but I'm running out   of steam and will build the others tomorrow.        

        http://lists.w3.org/Archives/Public/www-dom-ts/2003Jun/0011.html started a  fairly lengthy thread, however some of my statements were based on an improper  understanding of the problem.    To summarize my current understanding of the issue:    At issue are the L1 Core tests hc_attrname, hc_documentcreatedattribute,  hc_elementgetattributenode and hc_namednodemapgetnameditem.  Unlike originally  supposed, none of the tests involved case expectations for tag names.      Before the proposed modifications, these tests expected attribute names in all  documents to be returned in lower case which matched the behavior of Internet  Explorer, Mozilla and Safari.    Konqueror 3.1.1 and Opera 7 implemented the behavior specified in the L2 HTML  (http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-5353782642) and returned the  attribute names in upper case for HTML documents resulting in these  implementations failing these four tests.    The L1 Spec does make an explicit statement that in HTML documents tag names  should be returned as upper case, but does not appear to make a statement about  attribute names.    It seems, on this issue, that all five of the mentioned browsers  behavior are be conformant with DOM L1, but only Konqueror and Opera are conformant  with DOM L2.    The attached patch modifies the existing L1 Core tests so that case-insensitive  comparisons are made on attribute names for HTML documents and lowercase is  expected for XML, XHTML and SVG documents.    In addition, versions of the tests that expect upper-case attribute names in  HTML documents were added to L2 Core along with the supporting test documents.    The WG may want to consider an L2 HTML errata that would make the existing  IE/Mozilla/Safari behavior of lower-casing attribute names normative.    p.s. - I've committed the patch and have marked the defect as FIXED.  However as with  all changes, the defect is not closed until reviewed and should not be seen as final.      http://www.w3.org/Bugs/Public/show_bug.cgi?id=236        

        I'd like to double check my interpretations of the ECMAScript binding's    expectations for caller provided object.     From    http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/ecma-script-   binding.html:    > Object EventListener  > This is an ECMAScript function reference. This method has no return    > value. The parameter is a Event object.  >  > function clickHandler(evt)  >   {  >     // Function contents  >   }  >  >   // The following line will add a non-capturing 'click' listener  >   // to 'exampleNode'.  >   exampleNode.addEventListener("click", clickHandler, false);     From    http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113/   ecma-script-binding.html    > Object NodeFilter  > This is an ECMAScript function reference. This method returns a    > Number. The parameter is a Node object.     From L3 Events:    http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/ecma-script-   binding.html    > EventListener function:  > This function has no return value.  The parameter is an object that    > implements the Event interface.     From    http://www.w3.org/TR/2004/PR-DOM-Level-3-Core-20040205/ecma-script-   binding.html    > Objects that implement the DOMErrorHandler interface:  > Functions of objects that implement the DOMErrorHandler interface:  > handleError(error)  > This function returns a Boolean.  > The error parameter is an object that implements the DOMError    > interface.  >  > Objects that implement the UserDataHandler interface:  > Functions of objects that implement the UserDataHandler interface:  > handle(operation, key, data, src, dst)  > This function has no return value.  > The operation parameter is a Number.  > The key parameter is a String.  > The data parameter is an object that implements the any type interface.  > The src parameter is an object that implements the Node interface.  > The dst parameter is an object that implements the Node interface.     From    http://www.w3.org/TR/2004/PR-DOM-Level-3-LS-20040205/ecma-script-   binding.html    >  > Objects that implement the LSParserFilter interface:  > Properties of objects that implement the LSParserFilter interface:  > whatToShow  > This read-only property is a Number.  > Functions of objects that implement the LSParserFilter interface:  > startElement(elementArg)  > This function returns a Number.  > The elementArg parameter is an object that implements the Element    > interface.  >  acceptNode(nodeArg)  > This function returns a Number.  > The nodeArg parameter is an object that implements the Node interface.    > Objects that implement the LSResourceResolver interface:  > Functions of objects that implement the LSResourceResolver interface:  > resolveResource(type, namespaceURI, publicId, systemId, baseURI)  > This function returns an object that implements the LSInput interface.  > The type parameter is a String.  > The namespaceURI parameter is a String.  > The publicId parameter is a String.  > The systemId parameter is a String.  > The baseURI parameter is a String.  >    > Objects that implement the LSSerializerFilter interface:  > Objects that implement the LSSerializerFilter interface have all    > properties and functions of the NodeFilter interface as well as the    > properties and functions defined below.  > Properties of objects that implement the LSSerializerFilter interface:  > whatToShow  > This read-only property is a Number.    It is pretty explicit that a function object is used for EventListeners    and NodeFilters.  Am I right in interpreting that the DOMErrorHandler,    UserDataHandler, LSSerializerFilter, LSParserFilter and    ResourceResolver are passed as objects, something like:    function MyDOMErrorHandler() {  }    MyDOMErrorHander.prototype.handleError = function(err) {  }    var errorHandler = new MyDOMErrorHandler();  document.domConfig.setParameter('error-handler', errorHandler);    This description of LSSerializerFilter could use some clarification    since it says the object has all the properties NodeFilter, but    NodeFilter is a function object.         

      Robert Clary wrote:  > Ok. I will put together an example and post it so we can use it as a  > straw man for discussion.    My first inclination is to allow a JSUnit test page to be able to provide a  configuration page in a frame.  Something like:    1) Select the test from the browse button  2) The contents of the configuration page appears in a frame below the test  selection.  The page would allow you to select implementation and  configuration (validating/non-validating, preserve entities/expand entities,  etc).  The configuration page for the test would either be implied from the  filename or might be determined by loading the test and evaluating a  function.  3) When the test is run, a JSUnit method can be used to obtain the  configuration document.    Whether that is possible cross browser, I don't know.    The boilerplate DOM TS code should hide all the gore from the DOM test  itself.  The tests should be oblivious to the details of implementation  selection.        

        I've been working on getting distributions built for all the various   flavors of the DOM test suites.  I've placed "snapshot" distributions of   the test suites at   http://homepage.mac.com/curt.arnold/FileSharing1.html.  These are   unofficial work-in-progress builds and changes are expected.  I'll   update these periodically and they may be removed at any time.    dom3-core.zip and dom3-events.zip are skeletal distributions since no   significant tests have been committed for those modules.    coverage_report.zip is a Clover generated coverage report of Xerces-J   and Xalan-J being exercised by all the DOM test suites with the   exception of the HTML modules.  The significant packages are the   org.apache.xerces.dom, org.apache.xerces.dom3 and org.apache.xpath.domapi.    I've also substantially reorganized build.xml.  Targets are now   organized by level and module and parameterized targets are used to   implement most targets.    Tomorrow, I'll analyze the L/S test failures for Xerces-J.        

      Switching gears from Core tests on HTML documents to HTML tests on XHTML documents.    I've updated http://home.houston.rr.com/curta/html-hacked-xerces.zip to support both HTML L1 and HTML L2 and made corresponding changes to the DOM HTML L2 suite.    To run the DOM HTML L2 suite with the hacked Xerces-J:    java -cp dom2-html.jar junit.textui.TestRunner org.w3c.domts.level2.html.TestXercesHTML    The test results look similar to those for the DOM L1 HTML.    Hopefully, this will allow Rick to fix problems common to L1 and L2 tests simultaneously.        

      I've spent some time tonight walking through generation of the DTD for the DOM 2 family of specs.    There are a couple of issues that I ran into:    1. expandEntityReferences, which I had been using as an implementation condition, is used as a attribute in the NodeIterator interface.  I renamed the implementation condition to isExpandingEntityReferences in the DTD (not in the schema or code gen yet).      Will probably need to rethink the implementation conditions representation, maybe    <testCondition property="expandEntityReferences" value="true"/>    etc, instead of the existing set of implementation condition elements as there could  be a raft of conflicts with DOM 2 loading.      2. TreeWalker defines firstChild and a few other things as methods that are defined as attributes in Node.  I've taken a shot at addressing this in dom-to-dtd.xsl (again not in schema or code gen), basically the attribute form is produced and the method form suppressed.    As mentioned earlier, I have dropped the RDF and DC namespaces and am using <metadata about="..."/> for data about an external resource.  subjects.xsl now produces an a file that will  validate against dom1.dtd.    dom2-combine.xsl will combine the various DOM 2 Specs (Core, Events, Style, Traversal/Range, Events and HTML) into one dom2-interfaces.xml document that are used in the building of dom2.dtd, dom2.xsl et al.    The generated dom1.dtd and dom2.dtd will have defintions for <suite/> and <suite.member/>    Whitespace in the generate DTD's are much more regular.    DOM 2 artifacts are build identifically to DOM 1,    ant dom2-dtd  ant dom2-schema  ant dom2-interfaces  ant dom2-subjects    I haven't double checked these on Linux, there is possibility that the directory cases aren't perfect.        

      I've added a attrcreatetextnode3 and 4 that should come closer to the stated  intent of the the test and modified the descriptions for attrcreatetextnode  and attrcreatetextnode2.    ----- Original Message -----  From: "Curt Arnold" <carnold@houston.rr.com>  Sent: Saturday, April 20, 2002 11:05 AM  Subject: Re: Testcase attrcreatetextnode2.xml in level1/core does not  exercise the test      > I went back and checked earlier sources and that seems to have been  brought  > over from the original NIST tests.  Definitely the actual test doesn't  > exercise the intent, not only is the semi-colon missing but it uses a %  > instead of a &.  >  > I think the right thing to do is to change the description and admit that  > the test isn't doing what it should be doing and to add additional tests  > that might actually trigger the potentially flawed behavior.  >  > Was there a reason this message was sent off-list?  Could you resent this  or  > the original message to the mailing list to get it in the official record?  >  > ----- Original Message -----  > From: "Nick Efthymiou" <NEFTH@pacbell.net>  > To: <carnold@houston.rr.com>  > Sent: Saturday, April 20, 2002 2:59 AM  > Subject: Testcase attrcreatetextnode2.xml in level1/core does not exercise  > the test  >  >  > >  > > Please review  > >  >  http://dev.w3.org/cvsweb/2001/DOM-Test-Suite/tests/level1/core/attrcreatetex  > > tnode2.xml?annotate=1.2  > >  > > Line 22 states the intention of the test:  > > 22:   child of of the fourth employee and assign the "Y%ent1;"  > >  > > Line 44 sets the value as follows (note missing ";"):  > > 44: <nodeValue obj="streetAttr" value='"Y%ent1"'/>  > >  > > Since no entity is set, the test case does not test what it is intended  > to.  > >  > > The same bug (test does not exercise what is intended) is apparently  also  > > true with attrcreatetextnode:  > >  >  http://dev.w3.org/cvsweb/2001/DOM-Test-Suite/tests/level1/core/attrcreatetex  > > tnode.xml?annotate=1.7  > >  > > Same line numbers (22 vs. 44).  > >  > > Regards,  > >  > > - Nick -  > >  > >  > >  > >  >        

      I spent a few hours over the last few days experimenting with recasting the NIST Java DOM test suite using Junit (http://www.junit.org) and then porting the Junit code the JSUnit (http://www.jsunit.net) and to CppUnit (if anyone wants to experiment with any of the other parallel frameworks at http://www.xprogramming.com/software like the C# one, I'd be interested in hearing your observations).      I've been very encouraged and think that it looks like a very favorable mechanism for testing multiple language implementations without having to do extensive modifications to the tests.    A snapshot of my current experiment can be downloaded from http://home.houston.rr.com/curta/DOMUNIT.ZIP, but I plan to put it in the http://xmlconf.sourceforge.net CVS in the not distant future.     I've basically gotten the attr and characterdata test classes to run under JUnit and JSUnit with only simple regex replacements needed to convert the JUnit test code to JSUnit.  The conversions for CppUnit are more complex but also seem to be doable with easily automatible changes.      Using a diff utility that shows intraline changes will probably give you the best idea of the changes involved between the files, but I'll try to outline the major changes necessary.    The first step was to convert the original NIST Java tests to JUnit (with some specific patterns used to simplify the further ports to other platforms).    In JUnit, any public method starting with test and taking no parameters is considered a test method.  private or protected functions (such as getStaffDocument()) are used to support the tests.  Each test class (such as attr) extends DOM1TestCase which provides common utility routines and DOM1TestCase extends junit.framework.TestCase    Instead of building and returning a TestResults object, the test status will be based any calls to assert...() or fail...() methods (such as assertNull, assertEquals, assertNotEquals...) in the test code.    It is not necessary or desirable to catch unexpected Exceptions, so all unexpected exceptions fall through to the calling code that will give the case an error status (as opposed to a fail or success status).    Expected exceptions are handled with code that looks something like:    public void testSomeExceptionShouldBeRaised() {      //  test set up      try {          //   do something      }      catch(DOMException ex) {          if(expectedException(ex,SOME_DOM_CODE)) {              return;          }      }      fail(desc);  }    To ease porting to JavaScript, helper functions are used to access things that are properties in the ECMAScript binding.  For example, accessing the attribute name would be done as "attr.name" in JavaScript and "attr.getName()" in Java.  To move out of the test code, a "getName(node)" method is used in the test body which is implemented in the DOM1TestCase.java or DOM1TestCase.js file.    Cast operations are done using a "toCharacterData(node)" (for example) helper function as are the inspection of Exceptions.    The JUnit tests can be run (testing any JAXP complient parser) by something like:    java -classpath domjunit.jar;junit.jar;xerces.jar net.sourceforge.xmlconf.domjunit.DOM1TestCase    - or -    java -classpath domjunit.jar;junit.jar;jaxp.jar;crimson.jar net.sourceforge.xmlconf.domjunit.DOM1TestCase    which will run the attr, characterdata and cdatasection tests using staff.xml et al stored within the zip file.    The JSUnit tests can be run (testing MSXML3) by placing the tests in a directory that is a sibling to the jsunit/app directory, loading jsunit/testRunner.html in Internet Explorer 5 and then selecting the attr.html or characterdata.html file.  JSUnit claims Netscape support, but requires an explicit enumeration of the test methods which I haven't done for these tests.    The CppUnit tests compile for Xerces-C (current DOM), but the method bodies have not been written for the support routines.        

      I started trying to do a little code clean up and couldn't help myself.  I just committed a pretty substantial rework of the bootstrapping code that added support for DOM4J and is really close on Batik.    Though the underlying code is pretty radically changed, running tests on the JAXP supporting parsers should be unchanged.    To run the test suite on DOM4J, place dom1-core.jar, junit.jar, junit-run.jar and dom4j-full.jar in the same directory.  Avoid placing another JAXP parser in the directory to allow DOM4J to use the embedded Aelfred SAX parser (things crash when Xerces-J 2 is used instead).  Then either    1a) java -jar junit-run.jar  1b) enter org.w3c.domts.level1.core.TestDOM4J as the class to test    2) java -classpath junit-run.jar junit.textui.TestRunner org.w3c.domts.level1.core.TestDOM4J    Batik appears to fail with IO errors for every test (maybe due to a problem with ent1 , maybe not).  To run it,    1) copy dom1-core.jar, junit.jar, junit-run.jar into Batik lib directory  2) Download Crimson 1.1.3 and replace crimson-parser.jar with crimson.jar  3) java -jar junit-run.jar  4) Select org.w3c.domts.level1.core.TestBatik    Getting Batik to return reasonable test results may require digging into the Batik code and see why it is failing.    The logic that disqualifies tests that are inconsistent with the parser settings are unlikely to be correct, however both Batik and DOM4J fail so many tests that the inappropriate failures are dwarfed by the other failures.    I added a moderate amount of JavaDoc comments and the design is cleaner, so hopefully the automatically generated documentation is now somewhat helpful.        

        I've updated all the "nightlies" at    http://homepage.mac.com/curt.arnold/FileSharing1.html.  The primary   changes in the last few days have been fixes in the self-hosted SVG   framework (bug 704), DOM L2 Core fixes for SVG content (bug 699) and L3   Core fixes (bug 673 and 674).  Nightlies appear in quotes since the   files aren't automatically generated nightly, the just share the   unofficial, might just be broken nature, of typical nightlies.        

      I've just revised dom3.ZIP and dom-to-xsd.xsl to add an <return> element and  remove the returns attribute on anon inner class methods and to fix a late  night typo.    dom2.dtd and dom2.xsd have been produceable from build.xml for quite a  while, however making a snapshot of those available on the web site is a  good thing.  Until a release, however the definitive copy is that built from  the CVS.  I don't expect major changes to the schema, but there might be  some.    dom3.xsd has some serious production issues, but the hand finished version  is better than nothing.        

        NodeList.item(0) could very easily be a character element containing  whitespace (possibly a carriage return) in which case a cast could and  should throw an exception. Check if the values of nodeType, and nodeName  match your expectations?    If you are serious about this, you might consider porting the DOM Test  suites to your implementation. Please see http://www.w3.org/DOM/Test for  more details and if you'd like to follow up please email www-dom-ts@w3.org.        

        I added a substantial number of Load and Save tests to increase coverage   (bug 401).  The additional tests primarily involve the setting and   retrieving configuration parameters, but do not test their effectiveness.    dom3-ls.zip, dom3-ls-xdk.jar and dom3-ls-results.html at   http://homepage.mac.com/curt.arnold/FileSharing1.html. have been   updated.  The results matrix is also available at   http://home.houston.rr.com/curta/dom3-ls-results.html.        

      > The information in the test-matrix.html file  > only captures info regarding the test  > purposes (or semantic requirements), not  > necessarily all of the metadata for a particular test.  > There is an additional description for a test  > that more fully describes what happens in the  > test itself, and should be used to supplement the  > test purpose.  It is this information that resides  > in an older rendition that needs to be brought into  > the metadata file.  I would also suggest that it, along  > with author, possibly creation date, revision date info  > be carried along with each test, and translated into  > prologue documentation -- probably javadoc for the  > java transformation.    nistmeta.xsl was primarily a demonstration of the viability of  determining subject URI's from the description of the test.    It should be possible to extend the concepts in nistmeta.xsl  to put the metadata from the "older" representation  into the body of each test.  Generating Java documentation comments  from inline metadata should be trivial.    I think revision date could be automatically inserted into a comment by CVS.  Not sure if it could be controlled enough to put just the revision date into  the existing format.    >  > I noticed that you are still using rdf.  Why?    At the time I was doing it, it was easier just to convert one  external metadata source into one external RDF document.    Simplifying the metadata in the test definitions help authors, but  there isn't a good reason why external compilations of metadata  extracted from those tests aren't valid RDF.        

        I've been running the L/S test suite against the Xerces-J CVS   implementation.  Xerces-J currently fails the following tests:    DOMBuilderTest1-4:  These tests execute LSParser.parseWithContext which   is not currently implemented.    HasFeature01-02: These tests fail when expecting a true value from   DOMImplementation.hasFeature("LS",  "3.0") and   DOMImplementation.hasFeature("LS", null).    DOMInputSourceTest3:  This test calls Document.getInputEncoding.  The   Document implementation in Xerces-J has not been updated to the latest   DOM L3 Core.    DOMWriterFilterTest2: A filter is applied that should block all Text   nodes.  The test expects all attribute values to have a zero-length   value, however the value is not being filtered.    The following tests were modified:    DOMBuilderTest5:  Used supported-mediatypes instead of supported-media-types    DOMEntityResolverTest1: used entity-resolver instead of resource-resolver    DOMEntityResolverTest0: Expected baseURI on call to resource resolver to   be "base".  There was a base (but not XML Base) attribute with the value   "base" in the source document.  The appropriate value is an absolute URI   for the test6 document.  Changed assertEquals to an assertURIEquals.    DOMImplementationLSTest:  This test checked multiple scenarios for   DOMImplementation.createParser, some of which (asych mode) are option.    Split into DOMImplementationLSTest0-5.    I ran a coverage analysis and reported the results as bug 401   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=401) and will be working   to fill in the gaps.    Oracle's 10g Java parser  apparently implements an earlier version of   the L&S spec.  I will attempt to hack copy of the generated test suite   to compensate so that I have two implementations to compare.        

      I've committed modifications to the Level 2 HTML tests to make the tests valid against the schema for DOM L2 tests and to successfully compile for the Java binding.    I've added a dom-html-gen-java and dom-html-javac targets to build.xml.  Primarily to take advantage of the richer type checking in the Java binding.  I don't know if Xerces HTML implementation is accessible.    Common changes were to remove spurious ignoreCase="auto" from <assertURIElement> elements.  URI assertions are always case-sensitive and to change type="Boolean" to type="boolean" and Int to int.  Also, a few changes to synchronize the test class name and the test file name.    I have not attempted to run the tests yet, but expect to be able to spend some time on it over the weekend.        

      From: "Arnaud Le Hors" <lehors@us.ibm.com> wrote:  > > Two of the tests check if the feature name check is case-insensitive  > > which is vague at best in the DOM Events spec.  >  > This is actually clearly specified in the core spec which is were  > hasFeature is defined:  > http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-5CED94D7  >  > >  In the resolution to  > > bug 1814, it was basically decided that your reading was that the  > > event types were to be compared case-sensitive.  >  > That is also very clearly specified in the Event spec. There is no room  > for interpretation:  > http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event-type  >    Actually, neither of those are directly on point.  The issue is whether  values are acceptible for the eventType argument for  DocumentEvent.createEvent where there are inconsistencies in the description  of the argument  (http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-DocumentEvent-cr  eateEvent)    "The eventType parameter specifies the type of Event interface to be  created."    This sentence in isolation would suggest the argument should be some text  representation of an interface that must be supported by the created event,  for example "Event", "MutationEvent", "UIEvent", "MouseEvent" would be  reasonable interpretations.  Since interface names are case sensitive, this  interpretation would suggest that "event" would not be treated the same as  "Event".  This was the interpretation in the development of the Xerces-J  code base.    "As an example, a user wishing to synthesize some kind of UIEvent would call  createEvent with the parameter "UIEvents".    This example suggests that the argument should be the corresponding feature  name (note the explicit trailing "s") and feature names are intepreted (at  least in the context of DOMImplementation) as case-insensitive which would  suggest that DocumentEvent.createEvent("uievents") should work also.  That  was my and Mozilla's interpretation, they perform a case-insensitive  comparison based on feature names (and reject interface names) at    http://lxr.mozilla.org/seamonkey/source/content/events/src/nsEventListenerMa  nager.cpp#2325    > > The third test checks removing an event listener in the middle of an  > > event dispatch sequence.  The spec says that a listener should recieve  > > no events after removal.  >  > You're right there, that's what the spec currently says. But the spec is  > wrong, though. It is meant to say the opposite. I just double-checked  > with Joe Kesselman who was very much involved in the development of that  > spec and who implemented it in Xerces and he confirmed my fears.  > I will bring it up to the DOM Working Group, I would expect an erratum  > to be published.    I had to jump through some serious hoops to implement it as written in my  personal Xerces-C DOM Events implementation.    >  > > Overall the events implementation seems much improved over Xerces-J 1.  >  > Unless regressions were introduced in Xerces-J 1 I don't see how this is  > possible. The DOM implementation in X2 is the same as the one X1 except  > for the Deferred DOM which was taken out. The only diff is that the code  > hasn't been merged for a while so the version in X2 is outdated.    Sorry, that was based on a vague recollection and I definitely could be  mistaken.        

      Dimitris Dimitriadis wrote:   >As a question, though, what external metadata would be   >expected? I assumed that all relevant metadata would be   >inlined in the test decritpion itself.    Links to pertinent archive email messages discussing the test.  Relationships with tests yet to be developed.  Results of  processors against the test.    >forward to further discussing the possible use of the EARL framework.   >Have you received any feedback from that community?    No, but still hopeful.    >Sure, that could be one way of doing it. I anticipate implementor's  >various harnesses to deal with that to the largest possible extent so as  >not to burden the DOM TS framework.    >I did this some time ago, but haven't received any useful  >information.  Thanks for reminding them, let's just hope that they respond quickly.    I'm hopeful.  If there is not responce to the public query, I'll asj Henry Thompson, though I would prefer to avoid adding anything to his personal burden since I'm sure either he knows the answer or at least the right contact person.  I think it is more likely that they haven't, but it might be a good idea to use it or at least watch us try.        

        Are there any experimental implementations of DOM 3 Validation?  Are   there any there any conformance tests in the pipeline?    Comments:    continuousValidityChecking:    In the description of continuousValidityChecking, "the implementation if   free" should read "the implementation is free".    In addition several parts of that description are awkward.  "continuous   checking ... is enforced" might be better as "the validity of the   document is continuously enforced".  "If the document is invalid" seems   to have gotten separated from the sentence on setting the attribute.    getDefinedElementTypes:    In the description of DocumentVAL.getDefinedElementTypes, "element's   namespace" appears repeatedly, but no clear definition of what element   might be involved.  There is an explicit namespaceURI parameter and   there might be a document element that has a namespace, but not quite   sure what element's namespace would be.    validateDocument:    How would warnings be issued?  There appears to be an interface name   missing between "[DOM Level 3 Core]" and "interface"    isNodeValid:    > Determines if the Node is valid relative to the grammar.   > It doesn't normalize before checking if the document is valid.     "document" in the second sentence looks like a typo.    allowedChildren:     > Note that if no context of this element exists, then this is NULL; it   is an empty list if the element is not in the document tree.    Not clear on the distinction between "no context" and "not in the   document tree".    canSetAttributeNS:    Uses a qualifiedName parameter when similar methods use localName.    canSetAttributeNode:    "with respect to the validity check level" is unique to this method.    contentType:    The values for EMPTY_CONTENTTYPE etc are not defined.  An underscore   between EMPTY_CONTENT_TYPE would be more readable.    isElementDefined and isElementDefinedNS:    Neither method depends on the target element.  Wouldn't these be better   on NodeVAL?    allowedNextSiblings, allowedPreviousSiblings:    There aren't parallel methods that would determine if a character node   could be a previous or next sibling unless there is a special element   name for character nodes.    canDeleteData, canReplaceData, canInsertData:    Would assume that this could throw the same exceptions as deleteData,   replaceData and insertData  if the offset or count parameters are out of   range.    NameList:    I could not locate a definition for NameList.  If it is defined in   another DOM spec, it should have a reference.  If not, then it is   underdefined.  How do you represent a namespace qualified name in a   namelist?        

          On Mar 20, 2004, at 3:06 AM, Jaspreet Singh wrote:    >  > Prompt replies make me so happy :)  >  > I tried returning the documentElement from getFirstChild but it didn't  > work.... What worked was returning the first child of the   > documentElement.  > Is this right?    I would recommend reading a tutorial on DOM.  Almost any good   introductory XML book should have one.  There are also many on the web,   see http://xmlfiles.com/dom/, http://www.xml.com/pub/rg/141,   http://java.sun.com/webservices/docs/1.0/tutorial/doc/JAXPDOM.html     General question on usage should be directed to the users mailing list   associated with your DOM implementation of choice, for example,   xerces-j-users@xml.apache.org.    If you implementing the DOM for a class assignment, you should   investigate using the DOM Test Suite (http://www.w3.org/DOM/Test) to   check your interpretation of the specification.  If you are   implementing the DOM and it is not for a class assignment, then you   might want to reconsider since there are no shortage of existing   implementations for common programming languages and platforms.        

      The interface definitions in the SVG 1.0 spec appear to be defined using an IDL syntax in the prose of the document.  It would be helpful from both a DOM testing and code generation perspective (as well as a documentation consistency with other DOM related technologies), if the ultimate definitions for the SVG DOM in SVG 1.1 were expressed and available in the XML representation used in the DOM specs.    The only thing that looks like it might be an issue is the use of multiple inheritance in the interface definitions, it is possible that the current DOM stylesheets might not support that, but it should be relatively easy to change those to support a space separated list of base interface names.        

      tablecell.html:      Changed BGCOLOR="00FFFF" to BGCOLOR="#00FFFF" and BGCOLOR="FF0000" to BGCOLOR="#FF0000".  A similar change was made 6 weeks ago to tablecell.xml, but the corresponding change to .html wasn't made.  IE6 will apparently "repair" the bad color value and add a "#" and pass the test as it was, however we shouldn't be throwing bad test documents at an implementation.    map.html    map element had both name and id attributes but with different values.  Brought in line with map.xml which was corrected 6 weeks ago also.    font.xml, font.html    Tests expected "arial, helvetica", documents had "arial, helvitica"        

          On Mar 1, 2004, at 11:38 AM, Curt Arnold wrote:    > If we could add a "warning" result to JSUnit, then we could skip the   > listing of compatible and incompatible tests in the test   > configuration.  The incompatible tests could just note that they were   > effectively skipped during test evaluation.  >    Actually, JSUnit 2.0 already has a trace facility, all that would be   necessary is for incompatible tests to note that they were skipped.    Probably use an informative level message.        

      With the changes mentioned in the previous message, the classic Xerces-J (can't remember the exact version) that I've been using as a benchmark only fails one test (elementreplaceattributewithself) in default mode.    elementreplaceattributewithself is a test that I introduced when discovering that elementinuseattributeerr was unintentionally testing this behavior.    From http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-setAttributeNode    setAttributeNode ...    INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. The DOM user must explicitly clone Attr nodes to re-use them in other elements.    elementreplaceattributewithself tests the behavior when setAttributeNode is called with an attribute that is already on use on the SAME object.  Since newAttr does not meet the criteria to throw an INUSE_ATTRIBUTE_ERR, this test expects that setAttributeNode will not throw an exception and to basically do nothing.    I believe the test reflects the wording of the spec.  However, if Xerces-J existing behavior is deemed acceptible, then the phase "another Element" should be replaced with "any Element".        

      "Joseph Kesselman" <keshlam@us.ibm.com> wrote:  > >Being able to relax the ordering requirements seems like a key enabler  for  > >lazy evaluation (and unlocking the value of a return set limit)  >  > Take that up with the XPath group. I think XPath 2.0 has considerered  > allowing that relaxation at user request, for just this reason.    Lazy execution seemed to be a recurring theme in both the working draft  and other messages here.  I've been trying to go out of my way to address  it since it seems to significant motivation for the working draft design.  However, it isn't a big deal in how I think I'd be using an XPath API.    However, thinking through were you would put all the query optimization  bells and whistles people might want has value.  Even if it is premature  to try to standardize these hints, having an exposed object representing a  XPath expression allows implementers to add their own  interface on the same object that has optimization properties that make  sense to it.        

        Andrew Clover wrote:    >Curt Arnold <carnold@houston.rr.com> wrote:  >  >    >  >>Test documentadoptnode28 (unintentionally?) adopts a node into its   >>current document.  Allowing this case seems undesirable  >>      >>  >  >I'm not entirely convinced. I think allowing it could be useful for writing  >simpler code in situations where you want an orphan node and you don't care  >where it's coming from.  >  >Experience shows destination.importNode(source) where source.ownerDocument  >can be destination to be useful even though the spec is (it seems to me)  >equally as unclear on the question of whether "another document" is allowed  >to be "this document". If the user expectation for adoptNode is "like  >importNode but the source disappears" I think it's reasonable to allow it.  >  >    >  I guess that importNode to the same document ends up functionally   equivalent to a cloneNode operation.  In either case, the user's   expectation is fulfilled in that neither the source or the destination   document is modified.    >Certainly it should either be allowed or throw WRONG_DOCUMENT; a no-op or a  >clone are both undesirable as they leave the source document in an  >unexpected state. One shouldn't have the same parentNode after being adopted!  >  >    >  My take on it was that if you were using adoptNode, your interest was in   the target document and you didn't care how badly you mangled or did not   mangle the source document.  That the user's expectation was the target   document was unmodified, the returned node was null or could be inserted   into the target document and any modification to the source document was   just a necessary evil.   A no-op would not result in an insertable node   since you could get an IN_USE error.  adoptNode as equivalent to   cloneNode matched the expectation of no target document modification and   an insertable node, but no longer changed the source document.    adoptNode as equivalent to removeChild had the unexpected affect of   mutating the target document.     Returning null might be a good solution.  adoptNode allows   implementations to return null at their discretion anytime they do not   feel like adopting a node, so good client code should always call   adoptNode in a construct like:    Node newNode = newDoc.adoptNode(otherNode);  if (newNode == null) {      newNode = newDoc.importNode(otherNode);  }    The client code really wanted the source/destination mutation, they   could do:    Node newNode = newDoc.adoptNode(otherNode);  if (newNode == null) {      newNode = newDoc.importNode(otherNode);      if (otherNode.getParentNode() != null) {            otherNode.getParentNode().removeChild(otherNode);     }  }        

      I added a dom2-html-dist task that generates the test matrix, doxygen and the like and produces dom2-html.zip and dom2-html.tar.gz.  The Java compilation tasks run out of memory using Ant 1.4 on my machine, but don't have any problems using Ant 1.5.        

      Sorry, I was reading the specs out of order and thought the lack of a  hyperlink on DOMErrorHandler was an indication that the interface had not  been defined.  Having a hyperlink to the definition in the later versions  would be helpful.    For errors during parsing, it would seem that passing a DOMLocator from the  parser would be much more useful than just a Node.  Whether that would  suggest changing DOMErrorHandler's definition to take a DOMLocator or having  a distinct interface for parser errors, I don't know.    ----- Original Message -----  From: "Elliotte Rusty Harold" <elharo@metalab.unc.edu>  Sent: Monday, February 11, 2002 7:23 AM  Subject: Re: Comments on DOM Load and Save      > At 11:50 PM -0600 2/10/02, Curt Arnold wrote:  >  >  > DOMErrorHandler Interface:  >  > Referenced in DOMBuilder, but not defined in spec.  Called functions  > should be able to throw some type of exception or return an object to  > stop the parse and raise an exception to the caller of parse.  Those  > exceptions would need to be added to the list of potential exceptions  > on the parse calls.  >  >  >  > This is defined in the Core spec:  >  http://www.w3.org/TR/DOM-Level-3-Core/core.html#ERROR-Interfaces-DOMErrorHan  dler  >  > --  >  > +-----------------------+------------------------+-------------------+  > | Elliotte Rusty Harold | elharo@metalab.unc.edu | Writer/Programmer |  > +-----------------------+------------------------+-------------------+  > |          The XML Bible, 2nd Edition (Hungry Minds, 2001)           |  > |              http://www.ibiblio.org/xml/books/bible2/              |  > |   http://www.amazon.com/exec/obidos/ISBN=0764547607/cafeaulaitA/   |  > +----------------------------------+---------------------------------+  > |  Read Cafe au Lait for Java news:  http://www.cafeaulait.org/      |  > |  Read Cafe con Leche for XML news: http://www.ibiblio.org/xml/     |  > +----------------------------------+---------------------------------+  >        

      I've made my (unofficial) stab at a distribution now temporarily at http://home.houston.rr.com/curta/dom1-core.tar.gz (2.5 MB)    This was produced by the new "dom1-core-dist" target which will run most of the other targets, assemble a distribution in build/level1/core and then tar gzip and zip that image into the dist directory.    Things that had previously been build into the dist directory (such as dom1-core.jar, junit-run.jar) are now built into build directory.    The archive contains a patched version of JSUnit.  The patches are in the patches directory and automatically applied during the build process.    The test matrix now has links to both the XML source and Doxygen documentation for each test since Mozilla doesn't display raw XML in a pleasing manner.    index.htm is now stored in docs/level1/core in the CVS (it is copied into the build directory as part of dom1-core-dist).  It has been substantially modified and now I hope it is clearer to read.  I'm sure that I didn't properly trademark some software product names, so if someone else could do the niceities.        

      Another thing that would be useful is a clean-up function that runs after  all the tests have been completed.  The existing jsUnit based HTML tests  leave a large number of windows open since they keep unmodified documents  around for potential later use, however there is nothing to hook to close  them all down when the tests are over.  My recollection is tearDown() fires  after each test and would not be appropriate, but I could wrong on that.        

      > I have sent this to www-dom@w3.org for a couple of days ago,  > but I did not really get an answer that I was satisfied with:    That forum is the appropriate one for issues and ambiguities in the  specification.  The DOM WG is the ultimate arbiter of interpretation and the  test group defers any controversy to them.    There did not appear to be a response to your question on www-dom in the  archive.  So I'm not sure if you got a private response that you aren't  satisified with or you didn't get any response.    There aren't any tests in the current (unratified) test suite that address  your specific scenario.    Code observation suggests that Xerces-J, Crimson, Xerces-C, and DOM4J would  all throw a HIERARCHY_REQUEST_ERR.        

      > I work with Mary Brady at NIST and have been  > running the NIST DOM Level 2 tests through  > SUN's MSV tool and have some questions.  >  > Several tests such as documentcreateattributexmlnsillegalname.xml  > and documentcreateelementxmlnsillegalname.xml  > have failed because a double quote is used as element content  > for one of the member nodes. A "unexpected character literal"  > error is returned.    The regular expression pattern for stringLiteral in dom-to-xsd.xsl had been  "[^"]*", requiring that any string literal start with a quote, have no  interior quotes and have no interior quotes.   It is now "([^"]|\\")*" which  allows you to have  \" in the interior.    >  >  I've tried several different ways  > to escape the double quote and haven't had any luck.  Can  > someone give me a suggestion.  >  > Also the namednodemapsetnameditemxmlnsreplaceitem.xml test    The consensus of the group was that overly expressive test names were a  nuisance and new tests should use simple mixed case names based on the  method under test (or a general capability like EventPropagation) and a  numeric identifier, so this test could be called SetNamedItem01.xml.  The  text matrix generated from the metadata provides sufficient information to  browse the tests by description.   Changing the existing DOM L1 names in the  CVS repository was too much of a nuisance to try to fix, so we were going to  live with them.  See  http://lists.w3.org/Archives/Public/www-dom-ts/2001Sep/0011.html and other  messages in August and September.    > uses an underscore in the values of attributes(ex. ret_node).  MSV returns  > "attribute "name" has a bad value: the value does not match the  > regular expression "[A-Za-z] [A-Za-z0-9]*".  >  > Since Java variable names are valid if they contain underscores shouldn't  > they also be valid for the tests.    The schema is definitely trying to subset the capabilities, not to reproduce  the full capabilities, of any one language.  There are two options here,  either we can add underscore the the regular expression (if anyone knows a  language that doesn't allow underscores in variable names, speak up) or you  could change your variable names to conform to the current regular  expression.  Since underscores in member names are contrary to Java's style  guides, I think it would be better to rename your variables to "retNode" for  example.        

      I did some quick surface testing of NN 6 and got the following results:    hasFeature("XML","") returned true  hasFeature("XML",null) returned false  hasFeature("XML",undefined) return false  hasFeature("XML") throw exception    The behavior is subtlely different from IE that through an exception instead of returning  false for hasFeature("XML",null).  I'm definitely not going to learn how to build Mozilla  to find out if the hasFeature implementation was actually reached for the null case  or something upstream answered false for it.    I believe the underlying implementation is at:    http://lxr.mozilla.org/seamonkey/source/content/base/src/nsGenericElement.cpp#880      nsresult   nsGenericElement::InternalIsSupported(const nsAReadableString& aFeature,  const nsAReadableString& aVersion,  PRBool* aReturn)  {  NS_ENSURE_ARG_POINTER(aReturn);  *aReturn = PR_FALSE;  nsAutoString feature(aFeature);    if (feature.EqualsWithConversion("XML", PR_TRUE) ||       feature.EqualsWithConversion("HTML", PR_TRUE)) {    if (!aVersion.Length() ||      aVersion.Equals(NS_LITERAL_STRING("1.0")) ||      aVersion.Equals(NS_LITERAL_STRING("2.0"))) {          *aReturn = PR_TRUE;  }    In the code, it checks for a zero-length string and for a match with "1.0" and "2.0",  it does not check if the string is null (which from a quick survey of the string classes,   does not seem to be possible).      A brief review of the NS string classes did not show any support for the concept  of a "null" string.  They looked strongly reminiscent of the C++ std::basic_string<>  templates, which also, by the way, have no concept of a null string.    I did explore a source thread from an implementation of createElementNS  that lead to nsNodeInfoManager::GetNodeInfo    http://lxr.mozilla.org/seamonkey/source/content/base/src/nsNodeInfoManager.cpp#250    The key piece of code appears:      if (aNamespaceURI.Length()) {     NS_ENSURE_TRUE(mNameSpaceManager, NS_ERROR_NOT_INITIALIZED);     nsresult rv = mNameSpaceManager->RegisterNameSpace(aNamespaceURI, nsid);     NS_ENSURE_SUCCESS(rv, rv);  }    This would indicate that NN 6 is already treating an empty string as a non-specification of a  namespace in the call.  There is no code that appears to be a check for a null string.    That seems to clinch it for me that everywhere the spec mentions a null string that  it should be an "empty or null string".  If there were calls where you wanted to distinguish between  a null string and an empty string, then a different way of representing the empty string concept  needs to be fabricated.    I'm posting a query on netscape.public.mozilla.xpcom and I'll share any responses I get.        

        I've been able to build and run the load and test suite against the   current CVS of Xerces-J with reasonable results.  I needed to make a   substantial number of tweaks to the tests and expect to commit them   tomorrow afternoon.    I needed to add some new language elements to the DOMTS (all subject to   change):    <getResourceURI var="resourceURI" href='"staff"'/>    This generates a string containing the URL for the specified test file.    For the Java binding, this ends up being something like   "jar:///c:/mydrive/dom3-ls.jar#staff.xml".    <assign var="inputStream" value="outputStream"/>    Assigning an LSOutputStream to an LSInputStream will create a new   InputStream with the contents of the output stream.    <var name="inputStream" type="LSInputStream" value="3C656C74302F3E"/>  <var name="reader" type="LSReader" value="<elt0/>"/>    If the type is LSInputStream, any value will be interpreted as hex   representation of the stream.  If type is LSReader, any value will be   interpreted as a character sequence.  Unfortunately, SAXON 6.5 did not   appear to like that.    Unintentionately, many of the tests passed an uninitialized LSInput to   the parse method which resulted in a NullPointerException with   Xerces-J.  It might be good to have an explicit code for an   uninitialized LSInput and there should be an test that intentionally   passes an uninitialized LSInput.        

      Tests HTMLOptGroupElement* and HTMLSelectElement* will cause Mozilla's XHTML implementation to crash. The select element issues was already reported as <http://bugzilla.mozilla.org/show_bug.cgi?id=125906>. I filed a new report for the optgroup bug as <http://bugzilla.mozilla.org/show_bug.cgi?id=135627>     The alltests case can be run with Mozilla if you first comment out the "function testHTMLOptGroupElement" and "function testHTMLSelectElement"'s that occur around line 18000.     I did a rebuild of the L2 HTML test suite in a clean directory on a different machine than I typically use to see if I could reproduce the problems that Rick was having and was not able to reproduce the problem. I did notice that the contents of the URL that is used to download JSUnit has changed, so now JSUnit 1.2.7 is downloaded instead of JSUnit 1.2.6. The patch applied to JSUnit 1.2.6 will fail, however 1.2.7 incorporates those changes and seems to work fine without patching.     The report shows the results from Mozilla 0.9.9. Notice that all the capitalization failures that were in the NN 6.2 report have been fixed. Almost all of these look like a single bug, perhaps the tag name in the implementation class is not all lower case and is failing on a case-sensitive comparison.     -------------------     Tests with problems (56 total) - JsUnit    1. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLAnchorElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    2. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLAppletElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    3. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLAppletElement05 failed    "codeBaseLink"    Expected ./files/ (string) but was http://xw2k.sdct.itl.nist.gov/brady/dom/files/ (string)    4. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLAreaElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    5. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLBaseElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    6. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLBaseFontElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    7. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLBodyElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    8. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLBRElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    9. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLButtonElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    10. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLDirectoryElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    11. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLDivElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    12. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLDlistElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    13. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    14. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLElement30 failed    "titleLink"    Expected HEAD Element (string) but was (string)    15. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLElement59 failed    "langLink"    Expected en (string) but was (string)    16. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLElement88 failed    "dirLink"    Expected ltr (string) but was (string)    17. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLElement117 failed    "classNameLink"    Expected HEAD-class (string) but was (string)    18. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLFieldSetElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    19. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLFontElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    20. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLFormElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    21. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLFormElement03 failed    "nameLink"    Expected form1 (string) but was (string)    22. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLHeadElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    23. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLHeadingElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    24. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLHRElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    25. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLHtmlElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    26. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLImageElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    27. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLInputElement01 failed    "Asize"    Expected 9 (number) but was 0 (number)    28. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLInputElement08 failed    "checkedLink"    Call to assertTrue(boolean) with false    29. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLIsIndexElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    30. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLLabelElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    31. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLLegendElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    32. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLLIElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    33. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLLinkElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)    34. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLMapElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    35. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLMenuElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    36. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLMetaElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    37. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLModElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    38. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLObjectElement02 failed    "Asize"    Expected 2 (number) but was 0 (number)    39. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLOListElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    40. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLOptionElement01 failed    "Asize"    Expected 10 (number) but was 0 (number)    41. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLParagraphElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    42. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLParamElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    43. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLPreElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    44. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLQuoteElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    45. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLScriptElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    46. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLStyleElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    47. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableCaptionElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    48. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableCellElement01 failed    "Asize"    Expected 4 (number) but was 0 (number)    49. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableColElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    50. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableElement01 failed    "Asize"    Expected 3 (number) but was 0 (number)    51. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableRowElement01 failed    "Asize"    Expected 5 (number) but was 0 (number)    52. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableRowElement07 failed    "bgColorLink"    Expected #00FFFF (string) but was #00ffff (string)    53. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTableSectionElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    54. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTextAreaElement01 failed    "Asize"    Expected 3 (number) but was 0 (number)    55. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLTitleElement01 failed    "Asize"    Expected 1 (number) but was 0 (number)    56. file:///C:/domts/2001/DOM-Test-Suite/build/level2/html/ecmascript/tests/alltests.html:testHTMLUListElement01 failed    "Asize"    Expected 2 (number) but was 0 (number)        

      > If it implements CharacterData, then what does parentNode point to?  >  Some node that it is not a child of, or do we clone the whole tree, and  > have no way to reference the real nodes?  I think that you cannot create  > a coherent pseudo-fragment of the tree without recreating a whole  > separate tree and losing correlation to the real nodes you were  > interested in.    I'll have to think some more on this.  It just wasn't satisfying on  the first read and seems like a gotcha that would catch most  novice XML developers.    > >I think it is necessary that there is a generic evaluateAs(), however I  > >don't think it is necessary or desirable to pass the type as an argument  > >since XPath 2.0 should have the Schema datatype equivalents of  > >string(), number(), etc.  The evaluteAsString, evaluateAsNumber,  > >etc are useful and probably should be kept.  > >  > What object type would the calling application expect to be returned?  >  As I understand XPath 2.0, data type is determined not by the XPath  > expression but by the value space of the actual value, and a return type  > may simultaneously be instance of multiple types.  The purpose of the  > passed-in argument is to tell what object type we need back.  If the  > languages used to implement DOM applications were as untyped as Lisp,  > which seems to be the inspiration for XPath 2.0, then we might not need  > to tell it what type we needed.  But we need to be able to say what type  > we need in the program.  Otherwise, we will have no idea what is being  > returned or how to use it.    http://www.w3.org/TR/query-datamodel/#primvalue appears to describe  an coercion functions that would augment the number(), string() and  boolean()  functions already in XPath 1.0.    For example, if a document has an associated schema and a "time" attribute  is associated with a type derived from xs:time but my application wants  to have it returned as a string, I could write its XPath query as either:    String timeStr = (String) evaluate("string(@time)");    or    String timeStr = (String) evaluate("xs:string(@time)");    Since I have the ability to coerce an XPath expression to any arbitrary  builtin schema type, replicating this capability by an additional datatype  argument on the evaluateAs function seems unnecessary.    Time time = (Time) evaluate("xs:time(" + query + ")");    > >I mentioned that I think NodeSetIterator and NodeSet are better names for  > >ActiveNodeSet  > >and StaticNodeSet.  ActiveNodeSet behaves like an fail-fast iterator on a  > >collection.  StaticNodeSet behaves like a common ancestor to NodeList and  > >NamedNodeMap.  > >  > The methods of these interfaces have changed a bit since I started, so I  > would not be opposed to renameing them appropriately.  I agree that  > ActiveNodeSet behaves like a fail-fast iterator.  But I would be afraid  > of confusion if we called the one type an iterator of the other, when it  > is not.  The ActiveNodeSet does not iterate across the StaticNodeSet,  > but rather across an active result set.  A StaticNodeSet snapshots a  > list of the nodes in the ActiveNodeSet.  While the names might make  > sense in isolation, together they seem quite misleading.  I would be  > more inclined to try something like NodeSetIterator and NodeSetSnapshot.    The fact that NodeSet is a snapshot is really orthogonal to the interface,  it is really  more a quality of the underlying object returned by a particular method.  Likewise  all the text about liveness of NodeList's in the Core spec is really a  quality of the  the object returned by , for example, Element.attributes(), than having  anything  to do with the NodeList interface.  If there were functions in Core that  returned  static lists, I would prefer to be able to manipulate them using a generic  interface  that I could also use for dynamic node lists.    Between the XPath draft and Core, there are three interfaces to manipulate  sets of Nodes, StaticNodeSet/NodeSet[Snapshot], NodeList and NamedNodeMap.  All three interfaces have a length() and item() method, but there is no  common  interface supported by all and there should be.    If being able to determine whether an NodeSet is static or dynamic is  significant,  then NodeSet could have an isDynamic() property and possibly a  createStaticSet()  method:    public interface NodeSet {       public int getLength();       public Node getItem(int index);       public boolean getIsDynamic();       public boolean getIsOrdered();       public NodeSet createStaticSet();  }    Element.getAttributes() could return an object that, in addition to  supporting NamedNodeMap,  would support NodeSet with isDynamic = true and isOrdered = false.  If you  wanted to take  a snapshot of the attribute list, then you could call createStaticSet().  (The members of the set would be fixed, however the properties of individual  members could still change)    Element.getChildren() could return an object that, in addition to supporting  NodeList,  would support NodeSet with isDynamic = true and isOrdered = true.        

        There does not seem to be any provision for the caller to specify a   specific grammar for validation.  Validation depends on the document   containing a document type declaration, a xsi:schemaLocation or equivalent.    A grammar attribute of type Node on DocumentEditVAL could be used to   specify the external grammar (also potentially determine default   grammars located by xsi:schemaLocation attributes, though that might be   add more complication than it is valuable).  DTD's could be associated   by loading a template document and setting DocumentEditVAL.grammer to   the DocumentType node of the template document.  Schemas could be   associated by setting grammer to an Element or Document node containing   a single schema.  Schema collections could be represented by a   DocumentFragment containing multiple xs:schema elements.    validateDocument() would also need a grammar parameter.    The working draft does not discuss the behavior if a schema location   hint is modified or removed.  Would removing a xsi:schemaLocation   attribute on the document element allow you to change the document at will?        

      The xml-source.zip in http://www.w3.org/TR/2002/WD-DOM-Level-3-Events-20020712/DOM3-Events.zip is missing definitions/textevent.xml and definitions/mutationnameevent.xml        

        Jeroen van Rotterdam wrote:  > DOMString types in inner classes appear as a DOMString in a generated java  > source instead of a String.  >   > The same counts for DOMObject.  >   > See also the errorHandler in the attached test.    I have changed that part of test-to-java.xsl to use the "produce-type"   template instead of just emitting the type used in the source.        

         From returns of compareDocumentPosition:        Returns how the given node is positioned relatively to this node      (i.e., "the reference node").     From constants:        DOCUMENT_POSITION_FOLLOWING: The node follows the reference node.    The first sentence would indicate that "this node" and "reference node"   are synonyms.  However, the second sentence expects "the node" to be   distinct from "reference node".    I'd recommend using "this node" (the node on which the method is   invoked) and "other node" (the node passed as a parameter) and remove   mentions of "given" and "reference" nodes in this context.  Like:    Returns how the other node is positioned relative to the node on which   the method is invoked.    DOCUMENT_POSITION_FOLLOWING: The other node follows this node.        

      > I will probably run into some issues when I'm writing tests.  > Right now there doesn't seem to be a short definition for vars(need that  > for constants like MODE_SYNCHRONOUS).    You could add:    <var name="MODE_SYNCHRONOUS" type="int" value="2"/>    into the declarations part of your test, but that could result in a  duplicate definition error depending on the binding.  Entity references  could be used, but I think the current approach of just using the defined  integer value is probably the least trouble.        

        Benjamin C. Chang wrote:    >  >We decided to not divide into 3 feature areas as you suggest, since we  >thought the current implementation was fine as-is.  Implementors  >who wish to implement a subset may be free to do so, but we think  >the entire set of functionality is straightforward to implement and  >should not take that much time to do so.  >...  >    >  > See our previous response about the proposed feature division.  >  >Doc was added for the various exceptions on setting of the  >continuousValidityChecking attribute.  >...  >    >  > We decided to omit the RangeEditVAL interface for now since  >  >the two Validation implementations currently being done were not  >going to implement it and there weren't many "customers" asking  >for these.  >...  >    >  >Yes, this was changed to "Validation".  >    >  I am satisified with the proposed resolutions to these issues.        

      I guess one thing that I would find helpful is a list of issues (other than those that have been raised) about the instance syntax implied by my schema.    For example, I wasn't aware until this afternoon that Mary apparently didn't like the <InterfaceName.propertyName/> tag names.  Her resolution was to use nested elements <InterfaceName><propertyName/></InterfaceName>.  My resolution would have been to drop the interface name except in the handful of cases where it is ambiguous.    Metadata - I assume this is a placeholder until we figure out what RDF constructs we want to use.    Do you have a strong preference for "variable" over "var", I used "var" since it is reminisent (sp) of at least one language?    I'm not sure where you intend to pass the name of the invocation target variable.  In my schema, I had represented that with the attribute "obj".  The only place that I could see in your DTD is to do that within the element content, that is:    <Node><attributes variable="attribs">addressElem</attributes></Node>    I think:    <attributes var="attribs" obj="addressElem"/>    is cleaner.    In my initial schema, I had used an expectException attribute to contain the code of an expected exception code that seems to be similar to the DOMException attribute of nodeValue.  I changed my mind on that since I wanted to have all assertions to have an ID so that metadata could be associated.  If I kept expectException as an attribute on the method, then I would need to require ID's even on method invocations where exceptions were not expected.  I just thought it was cleaner to add an explicit assert element for expected exceptions:    <assertDOMException code="INDEX_SIZE_ERR" id="some_metadata_anchor">      <substringData obj="test" offset="-1" count="5"/>  </assertDOMException>        

      Joseph Kesselman wrote:  > > (Of course, readability of those names is rather marginal anyway. I  > presume  > > people have already considered camelCasedNames...?)  >  > Unfortunately, I had to lose the camel case names that were in the test  > definitions since the .ZIP file names were all lower case.  I've only had  > nightmares trying the change the capitalization of filenames once they  were  > in CVS (note the screwy capitalization in the source for domunit).    Actually wouldn't we prefer UpperCasedNames instead of camelCasesNames?    If a CVS god can repair the file names  (I can produce a list of the  original intended names from the NIST zip file), I could readily get the  content back in synch with the new file names.  However, from my limited  experience with CVS, trying to work with files that only differ in case is  prone to catastrophy.  I think the only approach that would work is renaming  the repository files.    I would recommend that Mary try to preserve the capitalization on their DOM  L2 submission or we can fix it up before committing it to the CVS.  I only  realized the problem once I got to the java compile process which occurred  after the files were in the CVS and a substantial amount of changes to the  test sources had occurred.        

        Hopefully fixed now.    dom3-combine now adds DOM L2 Traversal/Range to dom3-interfaces and   strips namespace prefixes (for example, traversal::) from inherits   attributes.    build.xml updated so that dom3-combine will have DOM L2 specs available.    dom-to-xsd and dom2-to-dtd updated to produce sink attributes and   methods for base classes.        

        I assume the tests are private.  I didn't see any tests by those names    in the CVS and the current CVS builds without complaint.    I've committed a change to test-to-java that will fix the cast to    HTMLDocument issues on load.  The other issues are due to not    specifying the interface attribute when there is an ambiguity.  Running    dom2-html-validate-tests should have identified the tests are invalid.     I also try to Sun's Multi-schema Validator for to schema validate.    Are there any feelings about inquiring about being included in Gump's    (http://jakarta.apache.org/gump/) massive automated build?    On Wednesday, February 12, 2003, at 10:27 AM, Philippe Le Hegaret wrote:    >  > Thanks for the update Curt. I updated the page following your  > instructions:  > http://www.w3.org/DOM/Test/Documents/DOMTSBuild.html  >  > I'm in the process of testing the build process. I got the following  > error for the moment:  >  > dom2-html-javac:  >     [javac] Compiling 614 source files to    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument01.java:69: incompatible types  >     [javac] found   : org.w3c.dom.Document  >     [javac] required: org.w3c.dom.html2.HTMLDocument  >     [javac]       doc = load("anchor");  >     [javac]                 ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:79: incompatible types  >     [javac] found   : org.w3c.dom.Document  >     [javac] required: org.w3c.dom.html2.HTMLDocument  >     [javac]       doc = load("anchor");  >     [javac]                 ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:85: cannot resolve symbol  >     [javac] symbol  : class TreeWalker  >     [javac] location: class    > org.w3c.domts.level2.html.createHTMLDocument02  >     [javac]       headEl = (HTMLElement) ((TreeWalker) /*Node    > */htmlEl).firstChild();  >     [javac]                                ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:87: cannot resolve symbol  >     [javac] symbol  : class TreeWalker  >     [javac] location: class    > org.w3c.domts.level2.html.createHTMLDocument02  >     [javac]       bodyEl = (HTMLElement) ((TreeWalker) /*    > */nodeList).nextSibling();  >     [javac]                                ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:87: cannot resolve symbol  >     [javac] symbol  : variable nodeList  >     [javac] location: class    > org.w3c.domts.level2.html.createHTMLDocument02  >     [javac]       bodyEl = (HTMLElement) ((TreeWalker) /*    > */nodeList).nextSibling();  >     [javac]                                                 ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:89: cannot resolve symbol  >     [javac] symbol  : class TreeWalker  >     [javac] location: class    > org.w3c.domts.level2.html.createHTMLDocument02  >     [javac]       titleEl = (HTMLElement) ((TreeWalker) /*Node    > */headEl).firstChild();  >     [javac]                                 ^  >     [javac]    > /home/plehegar/dev/2001/DOM-Test-Suite/build/java/org/w3c/domts/   > level2/html/createHTMLDocument02.java:92: cannot resolve symbol  >     [javac] symbol  : class TreeWalker  >     [javac] location: class    > org.w3c.domts.level2.html.createHTMLDocument02  >     [javac]       content = (Text) ((TreeWalker) /*Node    > */headEl).firstChild();  >     [javac]                          ^  >     [javac] 7 errors  >  > BUILD FAILED  > file:/home/plehegar/dev/2001/DOM-Test-Suite/build.xml:1305: Compile    > failed; see the compiler error output for details.  >  >  > I'll keep testing the build process and trying to fix it as well. I'd  > like to add the tests submitted by IBM asap.  > I also need to check with Dimitris regarding the JSUnit framework. We  > did discuss the framework at the face-to-face meeting and we concluded  > that the framework from Bob is probably the best to follow. Not sure    > how  > this fits with JSUnit 1.3.3 though.  >  > Philippe  >  > On Wed, 2003-02-12 at 00:57, Curt Arnold wrote:  >> From: http://www.w3.org/DOM/Test/Documents/DOMTSBuild.html  >>  >> Software needed prior to build  >>  >> You will need the following software to build the DOM TS (the Java and  >> ECMA Script code, the DOM TS Markup Language in W3C Schema and DTD    >> form.  >>  >>      * Ant 1.4 as well as the ant-optional.jar  >>      * Xalan  >>      * SED , links to many downloadable SED binaries  >>      * Patch  >>  >> Download the Ant 1.4 and Xalan-J2.1 binaries. In the Ant directory,  >> remove crimson.jar and jaxp.jar from the lib directory and put  >> xerces.jar and xalan.jar in their place. This combination works well;    >> we  >> have noted that other processors get broken by the transforms we use.  >>  >> Make sure you have included ant/bin, sed and patch on your path and    >> set  >> JAVA_HOME.  >>  >> Make DOM-Test-Suite the current directory (or, if you just want to    >> test  >> the build, copy all files from the DOM-Test-Suite directory to a  >> location of your choosing) and do:  >>  >> ant usage  >>  >> to see what options you have to build the DOM TS.  >>  >>  >> ---------  >>  >> Sed and Patch are no longer needed (unless you are generating SVG  >> DOMTSML which is experimental)  >>  >> Ant 1.5.1 is the current version of Ant.  The build requires at least  >> Ant 1.5, 1.4 will no longer work.  >>  >> It is not necessary to remove any jars.  The only modification to Ant    >> is  >> placing saxon.jar from Saxon 6.5.2 (http://saxon.sourceforge.net) into  >> the /jakarta-ant-1.5.1/lib directory.  >>  >> I've been running a xalan.jar built from the Xalan CVS without    >> incident,  >> however Xalan-J 2.4.1 seemed to be churning on some of the transforms    >> in  >> dom1-core-gen-java just a few seconds ago and I had to kill it.  I  >> believe that all the issues with Xalan have been fixed, just need to  >> have another release before we could recommend it for building the    >> test  >> suite.  >>  >> If you get a out of memory error, you can increase heap size on most    >> Sun  >> VM's by setting:  >>  >> SET ANT_OPTS=-Xmx512M  >>  >> jsunit.zip from http://www.jsunit.net will need to be places in  >> 2001/DOM-Test-Suite/lib to build to the jsunit tests.  >>  >> I believe that any Java VM 1.1 or later will work.  I typically use    >> JDK  >> 1.3 on Windows XP.  I've also built the suite on SuSE Linux 8.0 and    >> Mac  >> OS 10.2.3.  >>  >        

        I'd like comments on this if anyone has thought this through.  Assume   that you have an implementation that supports Core on generic XML   documents and application specific DOM, such as L2 HTML, SVG or MathML.    If you automatically created the application specific elements when you   encounted recognized elements, you may incur additional overhead in DOM   building and may reject documents that are valid XML but aren't valid   XHTML or SVG.  However, if you don't automatically do that, you always   get a generic DOM implementation.  I think that doing this right would   require an additional configuration parameter in LSParser, but I haven't   thought through what that would look like.        

        ----- Original Message -----  From: "Dimitris Dimitriadis" <dimitris.dimitriadis@improve.se>  Sent: Thursday, July 05, 2001 4:25 AM  Subject: [General] Status?      > I presume that most people, like myself, will have some weeks off this  > month, so it seems to be a good idea to get a picture of the current  status.  >  > Below you'll find a list of action items with status indicators. Please  > remind me if I have forgotten anything.  >  > (W3C) CVS rights to DOM TS Group. Have all who should received  information?    [ca] I need to get a copy of the documentation for using the CVS at W3C,  members only link at:   http://www.w3.org/Project/CVSdoc/      >  > (Dimitris) I have the update on the process document [done, published at  > http://www.w3.org/DOM/DOMTS-Process]  >  > (Dimitris/All) also I'm looking over both the  > schema and XSL to generate it to sanity check and document further. In  > addition, I want to start putting material on the DOM TS page at W3C, so  > please have one final go at Curt's and Mary's submitted material before I  do  > so. [Unfortunately my timeframe has been a bit limited due to finishing  off  > before the summer. I should be able to send some comments soon, however]  >  > (Dimitris/Mary) From the DOM WG meeting, we have a wish for a simple  harness  > to generate  > straightforward results of at least the ECMA tests. Mary, could we look at  > your older solution? [Mary? Could I have your input on this?]    [ca] Think it is probably easier to do this from scratch.    >  > (Mary) Given that we do indeed finalize this fairly soon, how long will it  > take  > us to translate the existing tests? Mary? [Being done, do we have a date  on  > this?]  >  > (Dimitris/Fred) We have Fred who's volounteered to write the documentation  > together with  > me. I look forward to start doing this once we've finalized the schema.  > [Should we coordinate work on a tutorial, Fred?]  >  > (Dimitris/Curt) We need to look into the resolution/status options for the  > submitted  > tests, eg. by adding a pending option while a test is being investigated  by  > the DOM WG. Also we should decide on whether we submit through a mailig  list  > or SF. [Have we dropped the idea to use SourceForge for _issue tracking_?  If  > not, I should include this to the domconftest. It would also simplify  > packaging, building only with stable tests]  >  > (Philippe) to create a www-dom-ts-submissions@w3.org mailing list. [done]  >  > (Curt/Mary/Dimitris) Rewrite styelsheets for code generation (Java and  ECMA  > primarily, others  > welcome) (NIST for the Java one, ECMA open) [Java published, has anyone  > started work on the ECMA one?]    [ca] ECMA one should be a relatively simple derivation from the Java  transform, however I'd like to get the Java implementation running before  starting the ECMAScript.    >  > (Curt, Dimitris?) Work on the details for test suite packaging  [do we  have  > more input that what has been on the list already?]  >  > (Mary/Dimitris) Produce a test matrix [Pending on my comments on HTML]  >  > (Mary) Produce a list of semantic requirements (Mary, is connected to the  > test  > matrix) [ready by now?]  >  > Kind regards,  >  > /Dimitris  >  >  >        

        Curt Arnold wrote:    > I'll concede that the validation draft may not be the place that needs   > to address this use case, but I would strongly suggest that the use   > case be addressed by one of the specs.  I would be satisified with   > delegating this issue to another subspec as a resolution, however I   > would not be satisified if there was no mechanism in L3 to address   > this use case.    DOMConfiguration.setParameter("schema-location", ...) appears to be   intended to support the use case.        

      I've updated http://home.houston.rr.com/curta/domtest/domtest.zip, this file   contains a schema, DTD and documentation.  I haven't had a chance to double   check it against the DOM specs, so if I got a return type wrong or something,  please forgive me.    Here is a summary of differences between my previous schema.    1. IDL property names instead of Java accessor/mutator names    Read-only properties are pretty simple, both var (the variable assigned the returned value)   and obj (the invocation target) are required.    <nodeType var="nodeType" obj="node"/>    Read-write is more complicated.  obj is still required, var and value are optional.  The question then is how do you interpret the element if both are supplied  or neither is supplied.  When neither is supplied, I'd interpret it as a   a property access and discarding the value.  If both are supplied, for instance:    <Attr.value var="oldValue" obj="attr" value='"New Value"'/>    I'd interpret it as a access followed by a mutation, that is:    oldValue = attr.getValue();  attr.setValue("New Value");    2. Removed interface prefix before non-ambiguous method or property names    There were more ambiguous names that I had previously mentioned, but not  too many.  Here is the list of names used introduced in multiple interfaces that  I came up with:    Document.getElementByTagName and Element.getElementByTagName  Document.getElementByTagNameNS and Element.getElementByTagNameNS  NodeList.item, NamedNodeMap.item  NodeList.length, NamedNodeMap.length, CharacterData.length,   CharacterData.data, ProcessingInstruction.data  DocumentType.name and Attr.name  DocumentType.publicId, Notation.publicId, Entity.publicId  DocumentType.systemId, Notation.systemId, Notation.systemId  ProcessingInstruction.target, Event.target  DOMException.code, EventException.code, RangeException.code    Distinct elements are introduced for each method.  It might be possible  to imply the intended variant from context, but I'd much prefer having  that explicit.    All other DOM properties and methods have had the interface name  removed from their tag name.      I had anticipated using the interface name part of the tag name  in the code generation.  To provide the information lost,   I've added annotation elements into the schema that will provide the  introducing interface and expected type for use by the code generators.    implementation and hasFeature act both as static methods and  instance methods.      <implemenation var="impl"/>    Will give you an DOMImplementation from the implementation under test  to use in tests that build documents from scratch.  While:    <implementation var="impl" obj="doc"/>    will give you the implementation from the specified document.    hasFeature is a little more complicated.    <hasFeature feature="XML" version="1.0"/>    is an implementation conditional that can be used to determine  if a test is appropriate for the processor under test and can  be used in <if> statements.    <hasFeature var="hasEvents" feature="Events" version="2.0" obj="impl"/>    Would be a "traditional" method invocation.      3. Added <metadata> element to tests and asserts    Expected to contain one rdf:RDF element.  Will continue to refine and possibly assert a  required set of EARL or DC properties.    4. Fixed a lot of instances where I had used the DOMFunction complex type instead   of the DOMSubroutine complex type    There were a substantial number of methods that had no return value that I had  inadvertantly used the wrong complex type resulting in unintentional "var" attributes on  void methods.  This may have been the cause of some of the earlier   confusion, I was not aware of it until I started adding return types into  the <appinfo>    5. Changed <assert> to <assertTrue> and synchronized <assertFalse>    JUnit 3.7 deprecated the assert method in favor of assertTrue.  Also  allowed you to assign a conditional expression to a variable with  the <assign/> element and introduced <isTrue> and <isFalse>  so that variable can participate in more complicated logical  expressions.    6. Removed garbageCollect    Confusing and probably unnecessary.  Was intended to be used in   tests that might succeed if some unreachable object had not been  finalized, but would fail if it had.      ------------------  Additional comments regarding schema and DTD convergence:    In an earlier comment, I had thought that the character content of method and property   elements might be used to identify the invocation target since there was no  obvious provision for it.  Not providing an obvious provision was acknowledged an oversight, but  I forgot to follow up on the intention of the character content.    If an invocation target attribute ("obj") was added, you could do something like:    <Node><nodeValue obj="someNode" var="someVar">Some text goes here</nodeValue></Node>    The obvious potential use for the character content is some type of comment  which I had used in my earliest iterations of the schema before I made it public.  However I think it is preferable for the content model to be empty for a couple of reasons:    1. Leaving the content model empty allows for future enhancement.  I've already  encountered a few instances where I needed to add element content to an element  that originally was empty.    2. It provides a tempting place to put information that should be specified in either  the test or assertion metadata.    3. Can complicate schema when you are trying to combine element containing and   character data containing elements into one substitution group.    Without using character content of property and method elements, there are still  three places to put descriptive text:    a) In the metadata for an test or assert    This is the appropriate place for any descriptive text that would be beneficial for a  person running the tests.    b) In [XML] comments in the test definition    This is appropriate for any descriptive text that would help someone examining the  test definition (for example, complaints about the test definition language), but  would not add any value to someone running the tests.    c) In a <comment> element    This is appropriate for any descriptive text that would help someone examining the  generated source code.    Typo alert:  Multiple <!ATTLIST attributes...> where I think you intend to defined the  attributes for a different tag name.        

      The use cases for Node.key are probably covered if an implementation supports the DOM 3 XPath.  The primary use that I saw was to maintain a Map that associated additional data with particular Nodes, if the generate-id() method could be easily invoked on arbitrary nodes (and returned invariant responses despite document mutation which would need to be asserted in the DOM 3 XPath spec), then it would be simple to maintain an external map with data associated with Nodes.        

        David Faure wrote:    >On Thursday 26 June 2003 09:01, Curt Arnold wrote:  >    >  >>I think the most satisifactory solution would be to issue an errata for   >>L2 HTML specifying that tag and attribute names should be returned as   >>lower-case for HTML documents and change hc_staff.html to use upper-case   >>tag and attribute names (to make sure that the implementation forces   >>them to lower-case and not just preserve the source case).  >>      >>  >  >I'm told that IE and Mozilla return uppercase when being in compat mode,  >and lowercase only if the doctype is xhtml or better (as is the case in  >hc_staff.html if I understand this correctly).  >This means that the above change to the spec wouldn't be precise enough,  >it's not "always lowercase".  >  >This looks like a Konqueror bug anyway: we shouldn't return  >uppercase when the doctype is html4 strict.  >  >    >  hc_staff.html isn't an XHTML document.  The  document type declaration   it references is an HTML DTD not an XHTML DTD, however it does XML   compatible things like quoting attributes, closing tags and using   lower-case tag names.    I tested adding a little link to hc_staff.html that displayed the   document element tag name and the result was consistently HTML for IE   even though hc_attrname and similar tests passed which suggests that it   is something after document loading that triggers the switch to "compat"   mode.    Why shouldn't you return uppercase when the doctype is HTML 4 strict?        

        Several XPath tests (for example,   XPathExpression_evaluate_NOT_SUPPORTED_ERR) used the string literal   "dummy" as a namespace resolver.  I believe all of these tests expected   an exception for other reasons and the type mismatch would have   satisified the expectation of an exception.  If Mozilla actually takes a   string literal as an namespace resolver, we should add a test that   asserts that an implementation specific exception be thrown.    Most if not all <load> statements were missing willBeModified   attributes.  The DTD can't distinguish between the inner class load    method definition element and the framework load statement element, so   willBeModified is optional in the DTD.  However, it is required for the   framework load statement element in the schema.    Conformance_Expressions used a lot of <append> statements to add items   to a list of statements.  These were change per the previous message.        

      From: "Mary Brady" wrote:  > Yes, but I know that I haven't added this to any tests -- have you?    No.    The segregation could also be accomplished by suite membership.    You could intentionally run an XML based test or test suite at a HTML DOM  implementation.  If there weren't guards checking if hasFeature("XML") all  the tests would fail, but that isn't a horrifically bad thing.    The downside of putting a guard on every test in is that an implementation  could "pass" an automated test suite by returning hasFeature("XML") false.    I think that there are plenty of opportunities to figure out the to approach  when we get to the HTML tests.        

        The L3 Core test suite now has tests for every method and attribute   added or modified in L3 Core and includes a very recent submission from   IBM.  I've created a "nightly" build at   http://homepage.mac.com/curt.arnold/FileSharing1.html.  I expect DOMTS   to be added to Gump (http://jakarta.apache.org/gump) in the next few   days which will provide real nightly builds using the freshly built   versions of Ant, Xalan, etc.    There should be very little activity on the L3 Core test suite in the   near future.  The only task that I have outstanding on the L3 Core is   to review the issues list and mailing lists for additional tests and to   resolve observed inconsistencies in the test results matrix.    I've only briefly reviewed the results matrix, but did seem some   inconsistencies: some of the test using schema validation fail when   using the new LS test adapter, one test hardcodes an expectation of   "html" for the document element which fails on SVG, and calling   createElement will result in a NAMESPACE_ERR when using the LS adapter.       I would appreciate any comments or test reports on the new suite.        

        No current activity.  Will participate in conference call barring unforseen  conflicts.    I have been disappointed not to hear anything else from David Faure from  MandrakeSoft.  It would be nice to get Konqueror running the test suite, but  there is something (probably simple) that was blocking my earlier attempts  to run JsUnit.        

        From: http://www.w3.org/DOM/Test/Documents/DOMTSBuild.html    Software needed prior to build    You will need the following software to build the DOM TS (the Java and   ECMA Script code, the DOM TS Markup Language in W3C Schema and DTD form.         * Ant 1.4 as well as the ant-optional.jar       * Xalan       * SED , links to many downloadable SED binaries       * Patch    Download the Ant 1.4 and Xalan-J2.1 binaries. In the Ant directory,   remove crimson.jar and jaxp.jar from the lib directory and put   xerces.jar and xalan.jar in their place. This combination works well; we   have noted that other processors get broken by the transforms we use.    Make sure you have included ant/bin, sed and patch on your path and set   JAVA_HOME.    Make DOM-Test-Suite the current directory (or, if you just want to test   the build, copy all files from the DOM-Test-Suite directory to a   location of your choosing) and do:    ant usage    to see what options you have to build the DOM TS.      ---------    Sed and Patch are no longer needed (unless you are generating SVG   DOMTSML which is experimental)    Ant 1.5.1 is the current version of Ant.  The build requires at least   Ant 1.5, 1.4 will no longer work.    It is not necessary to remove any jars.  The only modification to Ant is   placing saxon.jar from Saxon 6.5.2 (http://saxon.sourceforge.net) into   the /jakarta-ant-1.5.1/lib directory.    I've been running a xalan.jar built from the Xalan CVS without incident,   however Xalan-J 2.4.1 seemed to be churning on some of the transforms in   dom1-core-gen-java just a few seconds ago and I had to kill it.  I   believe that all the issues with Xalan have been fixed, just need to   have another release before we could recommend it for building the test   suite.    If you get a out of memory error, you can increase heap size on most Sun   VM's by setting:    SET ANT_OPTS=-Xmx512M    jsunit.zip from http://www.jsunit.net will need to be places in   2001/DOM-Test-Suite/lib to build to the jsunit tests.    I believe that any Java VM 1.1 or later will work.  I typically use JDK   1.3 on Windows XP.  I've also built the suite on SuSE Linux 8.0 and Mac   OS 10.2.3.        

      I was planning to build the DOM 3 schemas and DTD's tonight, but someone  called and invited me over for movie and pizza.  Hopefully tomorrow night  and maybe I get finally get some of my DOM Events tests ported.    Symbolic constants have so far just been represented by their assigned  integer value.  That is, the existing tests don't check if the nodeType for  an element is NODE_ELEMENT, they check that it is 1.    If possible, you'd like to preferentially use stock implementations of the  interfaces instead of using the anonymous inner class form.  For example, in  the xmlconf events tests, most of the test attach the stock "EventsMonitor"  class which captures all the events and allows you to make queries  afterwards.  Only tests that need to do things like call stopPropagation use  the anonymous inner class form.  Don't know what stock objects would be  useful for the DOM L3 L/S, but hopefully you could express most of the tests  using one or two stock implementations for each interface and only use the  anonymous inner classes for the oddball cases.        

      The narratives on a few cases strongly suggest that the test files used are slightly different from those used in the previous NIST test suites.  Until we get those files, working through the test failures is not a good use of time.    Mary, could you provide those files as soon as possible.        

          >>I've fixed the thirdElt problem and stripped test2.xml of whitespace and   >>the XML declaration.  >>      >>  >  >I'm still seeing whitespace - a newline at the end. Probably CVS has done  >this. (Would require a checkin-as-binary to fix?)  >    >  Does the terminal whitespace cause the test to fail?    >>loading a file from the file system, even if its extension is .pdf should  >>not be sufficient.  >>      >>  >  >Well... it might be, on a filesystem that stores media type info in metadata  >(Mac OS does doesn't it?). Whether the extension could be said to constitute  >such metadata on its own is another issue. Anyway, I agree it's probably not  >something TS should be relying on.  >    >  I think I know a way that this test could be done on Java without having   an external resource.  Pretty complicated, so it isn't going to be on   the top of my list until I just need a challenge.  Could add a   contentType attribute to getResourceURI.  If that is specified, it would   create a "x-jar:" URL that would also encode the expected content type.    Would have to register a protocol handler for "x-jar:" that would   extract the content type and delegate to the regular jar: protocol   handler.  For ECMAScript, the content type would be ignored and you   would have to depend on the HTTP server delivering the test files to   provide an appropriate content type.    >    >  >>none of my available implementations can get far enough to fail due to  >>its absense.  >>      >>  >  >SystemId2 works fine for me.  >  >    >  Cool.  Hopefully, it didn't overwrite your home page.     The spec explicitly addresses what should be attempted if the URL is   http.  SystemId1 attempts to write to a file: URL.  I think it   represents a reasonable expectation, but might overreach what is   actually in the spec.  Both of these tests can fail for external   causes.  If you shut down the local http server or change the   permissions, a conformant implementation can fail SystemId2.  If don't   have priviledges to write a temporary file, SystemId1 can fail.    >>LSInput.encoding is set to UTF-8 but document.inputEncoding is   >>expected to be 'UTF-16'.  >>      >>  >  >Hmm. Not sure about this, should a string be considered to have an encoding  >at all? A bit tricky for Python because although DOMString is 16-bit, it is  >bound to native string types, which could equally be 8-bit (in which case  >the encoding would be 'us-ascii'), or 32-bit (in which case it is 'utf-32').  >  >(In practical terms, setting document.inputEncoding when creating a document  >from a string would mean that it would default to being saved as UTF-16  >instead of the usual UTF-8. Not sure this is desirable, but again the spec  >should really clarify.)  >    >  Should raise this to the working group.    >>LSSerializerFilter in the candidate recommendation extends NodeFilter in   >>traversal.  L2 Traversal's NodeFilter uses n as the parameter name.  >>      >>  >  >Ah. You're right: only LSSerializerFilter inherits from NodeFilter, LSParser  >doesn't, which is why the argument names can be different. Oops.  >  >    >    I'd would like it if the names could be synchronized that is renaming   nodeArg to n,    >    >  >>>LSParserConfig8, LSSerializer8: actually tests for xml-declaration instead   >>>of well-formed  >>>        >>>  >>Comment changed.  >>      >>  >  >OK, if these really are meaning to test for xml-declaration, the canSetFalse  >tests should be assertTrues instead of false (which would make sense for  >well-formed).  >    >  I believe these were intended as tests on 'well-formed' and   'xml-declaration' was just a cut and paste error.  I've comitted changes   as a continuation of bug 441.        

      There should be a text node between <bold> and <italic> elements.  It would  seem to a bug in the implementation that you are using, which,  unfortunately, you did not specify either the implementation or version.  You might look for a different version of the parser or a parser  configuration flag like ignoreWhitespace or ignoreElementContentWhitespace  and set that to false in case the behavior was an overaggressive elimination  of whitespace.  It is also possible that the text node but was wrongfully  eliminated when written out to a file.    To report a bug or get help on a specific implementation, you should use an  appropriate newsgroup, mailing list or bug reporting system.  For example,  microsoft.public.xml for MSXML.        

        I've fixed the cause of the gump failure.  Entity references had been   changed from builder.setFilter_myfilter to parser.setFilter_myfilter   but the entity definition had not.        

        I've entered the following bugs for the captialization and debug issues:    http://www.w3.org/Bugs/Public/show_bug.cgi?id=236  http://www.w3.org/Bugs/Public/show_bug.cgi?id=237    In the message Mary quoted, I said that ignoreCase="auto" performs   case-insensitive comparisions.  That is incorrect, ignoreCase="true"   performs case-insensitive comparisions.  ignoreCase="auto" performs   case-sensitive comparisions and the expected value is uppercased for   HTML implementations.    On the debugging issue, is there a preference for a link instead of a   button?     Also, I had previous considered generating an HTML representation of the   test (ala test-to-html.xsl, basically what you would see if you looked   at the test .xml file in Mozilla) into the JSUnit test file.  Unless   there is any objections, I can add that while adding the link or button   to run the test.    I'm also going to revisit bug #228 which enabled support for Opera,   Konqueror and Safari.  That change removed support for loading XHTML   documents using an iframe element on Mozilla.  I should be able to   restore that capability while continuing to support the three new browsers.        

        The item to be added in the append statement had been specified by the   "obj" parameter, such as    <append collection="myList" obj="myItem"/>    The XPath test Conformance_Expressions had a substantial number of   statements like:    <append collection="expressionList" obj='"[floor(.)] > 0"'/>    Though these would produce correct code, they were not schema valid   since there is a keyref constraint on all attributes named obj that they   have a corresponding var declaration.  Since the use of obj in the   append statement is contrary to the nearly universal use of obj as the   invocation target (aka this) of a method or property.  I've changed the   attribute name from "obj" to "item" and changed the attribute type from   variable to variableOrLiteral so that literals can be used.    I'll commit changes to all tests that used the <append/> statement to   switch it to the new form.  If you maintain an independent transform,   you will need to modify your production of the append statement.        

      XSDComp is not an an immediate solution to producing a usable DTD from the  schema.  Would be most expedient to recode my schema using named groups  instead of substitution groups to produce an usable DTD equivalent and then  look at options to develop an optimal DTD.  I can keep the  substitutionGroup's in case we eventual revert.        

        I've added this as bug 551   (http://www.w3.org/Bugs/Public/show_bug.cgi?id=551)        On Feb 20, 2004, at 10:26 AM, Patti Lutsky wrote:    >  > Late in the development of the Validation spec we agreed to change the  > definition of allowedNextSiblings and allowedPreviousSiblings from  > returning "all possible" siblings to the phrase "all that can be   > inserted".  >  > This meant that siblings already in the instance are considered in the  > decision of whether they should be returned.  > It doesn't appear that the tests in the test suite have been updated to  > reflect this.  Will they be updated at some point?  >  > Patti  >        

        A nightly build of xalan can be downloaded from   http://gump.covalent.net/jars/latest/xml-xalan/.    I did not realize that the build errors were occurring only for the   dom2-html-gen-jsunit.  The problem appears to be related   xmlspec-v22-dom.dtd that is expected in the lib/specs/pubtext   directory.  My initial attempt to fix the problem did not work, but you   can work around it by running the "dom3-interfaces" target which will   properly set up that file.  The specs aren't affected by clean, so   running dom3-interfaces once will hide the problem until you manually   clean the specs directory.      On Wednesday, February 12, 2003, at 06:08 AM, Robert Clary wrote:    >  >  > Curt Arnold wrote:  >> I missed committing a changed DOMTestSuite.js.  It would not have   >> have caused the build to fail, but it would have made it unrunnable.  > thanks for the heads up. however I was unable to get the DOM 2 HTML  > tests to build using ant 1.5.1, etc without the error I mentioned  > before. Can you make the version of xalan that you are using available  > somewhere?  >  > thanks,  > bob  >  > <smime.p7s>        

      I have been primarily trying to get the tests fixed and haven't been  spending any time on the ECMAScript stuff recently.    Probably the first thing to do is to get commit access to the W3C CVS  server.  If you do not already have a public key on file with the W3C,  generate one and send it to Dimitris so he can have you added to the  project.  Fred Drake recommended the SSH and CVS set up HOW-TO at the Python  site http://python.sourceforge.net/winssh.txt, the little tidbit about  ssh-keygen failing unless -f is specified was definitely a piece of  information that I wish I had known.    -------    The second thing is to snag the inital domunit release which contained my  initial take on the NIST test suite for ECMAScript.  http://prdownloads.sourceforge.net/xmlconf/DOMUNIT.zip.  In that download,  there should be a jsunit directory which contains JScript based tests.    Download Jsunit from http://www.jsunit.net and expand it into  domunit/jsunit/jsunit    There should be a file like DOMTestCaseConfig.js in the /domunit/jsunit  directory that will need to be edited to provide your base directory and the  parser under test.    Then load /domunit/jsunit/jsunit/testRunner.html in IE, hit the browse  button and file a test file in /domunit/jsunit.  Hopefully you should now be  running tests.    We will probably diverge substantially from that, but that it at least where  I'm starting from.    -------    If you have (or want to setup) the build environment, build the  "dom1-core-ecmascript" target to generate a directory of .js files (I think  it is build/ecmascript/level1/core).  I haven't done any verification of the  code and am not an ECMAScript expert.  Could you examine the files to notice  any significant structural problems such as using language features that  would not be available on all targets.  Is there any tool we could use to  check the generated syntax before trying to run the tests, for example,  could JScript.NET's command line compiler.    I've placed a snapshot of the currently generated ECMAScript at http://home.  houston.rr.com/curta/ecmascript.ZIP    The tests (like the Java implementation) have two parts, the constructor,  which determines if the test is compatible with the capabilities of the  parser under test, and the test itself.  If a test was incompatible (say it  required hasFeature("HTML","") to be true and it was running on just an XML  parser), then it would throw an exception in the constructor and not be  reported as either a pass or a failure.        

      The copyright in index.htm needs to be updated from 2001 to 2002.        

      Here are a couple of issues, I don't have all the details on but it would at  least be good to get the general feeling of the WG.    ---------  Issue 1: ECMAScript and null strings:    This has already partial been dealt with in the errata on  DOMImplementation.hasFeature.  Null is not in the value space of  ECMAScript's string class, C++ STL's std::basic_string and I'm sure other  languages.    I pulled the following list of methods from DOM L2 that have null somewhere  in the description of a DOMString parameter using an XSLT transform.    DOMImplementation.hasFeature() version parameter  Node.nodeValue  Node.isSupported() version parameter  Node.namespaceURI  Node.prefix  Node.localName  Notation.publicId  Notation.systemId  Entity.publicId  Entity.systemId  Entity.notationName  StyleSheet.href  MediaList.item return value  ViewCSS.getComputedStyle() pseudoElt param  DocumentCSS.getOverrideStyle() pseudoElt param  HTMLDocument.domain    Since the Netscape/Mozilla nsString can not represent a null value and a few  tests on MSXML indicate that it returns a zero length string for attributes  such as Notation.publicId, it appears that the deployed ECMAScript DOM  implementations have effectively translating the null in the context of  DOMStrings to an empty string.    It will probably take some verbal gymnastics (maybe introducing a nullString  concept which is mapped to either null or "" depending on the binding), but  I think that there needs to be a solutions something like:    All implementations should be encouraged to process "" equivalently to null  for parameters and when setting attributes the attributes listed.  So  hasFeature("XML","") and hasFeature("XML",null) should both work on a Java  binding.    All return values and attribute retrievals mentioned should return null in  Java bindings (and other bindings where null is in the value space of the  DOMString) and return an empty string in ECMAScript (and other bindings  where null is not in the value space).    ---------------    systemId attribute (DocumentType, Entity, Notation)    At least one implementation returns an absolute URL instead of the relative  URL that is in the source document for Notation.systemId.  Since the file  may have been moved or cached, absolutizing the URL based on the current  location may provide erroneous location.  The submitted NIST test attempted  to compensate for this behavior, however I have removed that URL cracking  code since it imagined string manipulations that weren't in DOMTSML and the  test in the CVS currently only accepts the literal contents of the XML file.        

      Rick had been running into some problems running the in-development L2 HTML suite.  Running that suite currently is a minefield.    If you run "alltests.html" will IE, almost every test will fail.  With the current DOMTestCase.js, the default media type is always "text/xml", which on IE means MSXML, MSXML doesn't support the HTML interfaces almost every test will attempt to use an HTML-specific interface and fail.    To run the tests using the "text/html" DOM, select "html_alltests.html".  You should get a test report like the file that I attached as ie6html2.html.  I assume that most of the test failures in this file are because of problems with the tests, not problems with the implementation.    Running an individual test using "text/html" requires manually editing the test to add the media type (search for text/html).  I've attached HTMLAnchorElement01.html to show how that is done and how to use alert() statements as a poor substitute for a debugger.    The loader in DOMTestCase.js doesn't work for multiple HTML documents in NN6/Mozilla.  So almost the opposite, for Mozilla and the current state of DOMTestCase.js, if you want to run the whole suite, you have to run "alltests.html" which will test the XHTML implementation in NN6/Mozilla.   I've attached nn62html2.html which lists the test failures from Netscape Navigator 6.2 on the same test but using XHTML test documents.  Tests that were failed by both implementations, most probably indicates a problem with the test or the test documents.    Running the tests with Mozilla 0.9.9 or the current nightly build will crash in one of the tests between lines 18750 and 19000.  I haven't finished the half interval search to identify the specific test that causes the crash.    Before running the tests, I committed a global replace of ignoreCase="auto" to ignoreCase="false".  There seem to be only a few tests (HTMLAreaElement06, HTMLTableElement07, HTMLTableElement08, HTMLTableElement09) that were showing behavior consistent with ignoreCase="auto".                text/html attachment: iehtml2.html    text/html attachment: nn62html2.html    text/html attachment: HTMLAnchorElement01.html          

      > Also, after lots of tweaking, I managed to run JsUnit in Mozilla on my  > Mac OS X with Curts inserts. Mozilla tries to give the path to the test  > file using colons instead of slashes, explains most problems. Still no  > luck with IE for Mac, though.    What type of tweaking, did you need to change some of the logic in JSUnit to  handle the format of the Mozilla/Mac file URL?    I'm pretty sure you have to use a different mechanism (not new  ActiveXObject("MSXML2.DOMDocument")...) on Mac IE to parse an XML document,  however I have had no luck on finding what it is.  If anyone knows of any  resources on using XML with Mac IE, please let me know.    ---------------------    You are subscribed to www-dom-ts@w3.org.  If you wish to unsubscribe,  mailto:www-dom-ts-request@w3.org?subject=unsubscribe        

        The dom-spec.xml files in the most recent Core and XPath DOM Level 3 working drafts refer to xmlspec-v22-dom.dtd but the zip files only include xmlspec-v21-dom-dtd.      Could someone email a link to the DTD.        

      I've updated my alternative XML Schema for DOM tests and started writing a few experimental test in preparation of attempting to convert my domunit/junit code to XML.    You can see a very simple Attr test (parentNodeNull) at  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/DOM1/NIST/attr.xml?rev=1.2&content-type=text/vnd.viewcvs-markup    The updated schema is http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/domtest.xsd?rev=1.2&content-type=text/vnd.viewcvs-markup      The files comply with the Oct 2000 Schema working draft since that currently has the best software support.     I think it now has enough (or close to enough) constructs to handle the NIST DOM tests and has elements for all of the DOM 2 Core.    On the test metadata, my personal leaning would be to use the Dublin Core Proposed Recommendation "An XML Encoding of Simple Dublin Core Metadata" (http://dublincore.org/documents/2001/04/11/dcmes-xml/)  This would keep the metadata in a distinct file from the test in a format that was compatible with RDF and provides both a DTD and an attempt at an XML schema for the metadata.  One of the advantages of keeping the metadata distinct from the test definitions is that it is then easy to add additional description, notes, translations, without modifying the test definitions.        

      I was able to get Mozilla (a 11/13 nightly build) to run a modified HTMLAnchorElement04.xml test running loading an XHTML document.  Doesn't solve the longer term issues, but it should allow work to proceed.  Eventually we would need the harness to pick the appropriate test document (.xml for an XHTML implementation and .html for a HTML implementation).  Mozilla would need to be tested with both for example.    implementation.load doesn't load HTML documents, but will load XHTML documents.    A test that works for both XHTML and HTML would need to use lower case tagnames in calls to getElementsByTagName.  Cases that use upper case tagnames would need to be protected so they only run on HTML implementations only which currently can't be done so I'll need to expand the prologue syntax.    I did change a lot of uses of null as a variable name to a reference to a variable declared using <var isNull="true"/> and added some additional schema constraints to catch the problems.  Using null works for Java but would be difficult to implement for bindings (like Xerces-C) that use a stack object to represent a reference to a Node.    isSupported12.xml made calls to isSupported("Core","") and isSupported("Core",null).  Since these tests are a bit controversial (would depend on extending errata core-14 to isSupported), I've removed those tests from isSupported12 and created isSupported13 and isSupported14.        

      >     [style]  file:////home/miallen/p/c/domts/2001/DOM-Test-Suite/transforms/test-to-java.  xsl; Line 326; Column 68; Can not load requested doc:  nodeelementnodeattributes.xml      Try removing xalan.jar from your Ant directory and replacing it with  saxon.jar from Saxon 6.5.1 from http://saxon.sourceforge.net.  Xalan-J is a  little fussy when you load a huge number of documents in one transform.  Maybe we added a few more tests and made it mad.  I'm long overdue on  checking out whether the later versions of Xalan-J work any better.      > This does look pretty freaky. I don't know dirt about XSLT. If I line  > everything up how much are you willing to help with the stylesheet?    If you can post a few hand-ported C versions of Java tests, we can probably  knock it out in a couple of iterations.    > Do you mean gdome2? I'm not particularly familiar with the whole GNOME  > envoronment but I think they could copy and modify my test suites much  > more easily than it will be for me to get mine working.    One step at a time then.        

      I've committed 196 tests in tests/level1/core that are transliterations of the existing L1 Core tests to use hc_staff.xml.  hc_staff.xml and hc_staff.html are valid, but nonsensical, [X]HTML files created by replacing the tag and attribute names in staff.xml with XHTML tag and attribute names.  HTML compatible tests all start with an "hc_" prefix followed by the name of the base test.    HTML equivalents of tests involving extended interfaces (ProcessingInstruction, Entity, EntityReference, Notation) and DocumentType's were not added since HTML implementations are not required to implement them.    My personal build of Xerces-J passes all the hc_* tests which should be equivalent for the purposes of these tests to a build from the Xerces-J CVS.  I have fairly high confidence that the tests are good XML tests, however I suspect there is a decent amount of tweaking ignoreCase attributes to make them good HTML tests.  The next step in the evolution of these tests is to build the JSUnit equivalents and test them with XHTML and HTML implementations.    I've added support for JTidy which provides a DOM L2 Core (but not HTML) implementation for HTML (but not XHTML) files.  However JTidy's DOM implementation is incomplete and can't be currently used as a reference implementation.  To run it download JTidy from http://sf.net/projects/jtidy and place tidy.jar in the same directory as dom1-core.jar and run "java -cp dom1-core.jar junit.textui.TestRunner org.w3c.domts.level1.core.TestJTidy"  The previous (non hc_*) tests are not suppressed (yet), so they should fail and quite a few of the hc_* tests fail.        

        HTMLHeadingElement.getAlign() was misimplemented to always return   "align" instead of the value of the align attribute.    HTMLCollection02-03 and 10-11 appear to have wrong case expectations.  I   believe the expected value should be "select", but ignoreCase should be   "auto".    I'll investigate the implementation of HTMLForm.elements this evening.    It may be the root of the NullPointerExceptions.        

      I've updated the test to Java transform.  The files are available at  http://xmlconf.sourceforge.net/www-dom-ts/test-to-java.ZIP and in the www-dom-ts   module in the CVS.    I've tested the transform with one simple test and was able to generated code.  However, I suspect that there are at least some production bugs.    --------------------------------------      Declaration of Curt Arnold       Curt Arnold hereby grants to the W3C, a perpetual,     nonexclusive, royalty-free, world-wide right and license under any     Curt Arnold copyrights in this contribution to copy, publish and     distribute the contribution, as well as a right and license of the     same scope to any derivative works prepared by the W3C and based on,     or incorporating all or part of the contribution. Curt Arnold     further agrees that any derivative works of this contribution prepared     by the W3C shall be solely owned by the W3C.        

      Currently, the build script patches element.xml to change the name parameter of Element.getElementsByTagName to tagname to make it consistent with the parameter names of Document.getElementsByTagName.  Making an actually change in the spec would be a breaking change for bindings that support named parameters and for that reason changing the spec has been rejected.  However, it simplifies things for the test suite language to have the parameter names identical.  Otherwise, both tagname and name would have to be optional attributes and use of the proper name could not be enforced by the schema.    I can move this change into dom3-combine.xsl which would eliminate the need to regenerate the patch file for subsequent versions.        

        Robert Clary wrote:     > Rick,   >   > Are you running the version from CVS?   >   > I combined and compared our two different results and have attached   as combined-results.txt.   >   > I noticed that the signature of assertURIEquals in DOMTestCase.js is:   >   >   assertURIEquals(assertID,scheme,path,host,file,query,fragment,isAbsolute,actual)   >   > and the call in my HTMLAnchorElement04.html is   >   >   assertURIEquals("hrefLink",null,null,null,"submit.gif",null,null,null,null,vhref);         The DOMTestCase.js in CVS has ten parameters, one more (name) than in   your DOMTestCase.js, which is consistent with the transforms and   generated code.  The "name" attribute on assertURI was added sometime   before the last modification of HTMLDocument04.xml on 30 June 2002.    I won't have any time to fully digest this till the weekend, but here   are a few quick comments/questions.    Is the essential innovation the use of the query string used to launch   JsUnit to configure the test framework?  Are there any other novel aspects?    Would there be any issues using a select box instead of radio buttons to   select the suite or test to run?    The recently generated tests have had an <iframe> element in the test   html file for each document loaded by the test.  As far as I can tell,   your "native" loading uses the one iframe in main-loader.html and would   not support tests that use multiple documents such as   elementwrongdocumenterr.  Is there an issue with distinct <iframe>'s in   the test document?    You mentioned the hc_* variant tests.  These were added after first   release of DOM L1 Core to provide some coverage of the Core for HTML   processors since the original NIST tests required XML documents.  The   tests are a direct transliteration of the NIST types making tag and   attribute name substitutions to make the test documents valid (but   non-sensical) XHTML and HTML.  XML processors show the same results with   these translated tests as with the original tests.  However, there has   not been a thorough review by the team of test failures by XHTML or HTML   processors.  There are at least 4 hc_* tests that attempt to create   elements that have not been changed to use HTML tag names which I'll try   to change in the next few days.        

        > Mozilla & IE both return the nodeName as lowercase, but KHTML returns it   > as uppercase. Am I correct in assuming this is the correct behaviour?    It appears that they Internet Explorer and Mozilla return lowercase   attribute and element names for HTML documents regardless of the case of   the provided document.  The provided hc_staff.html is lowercase, but   switching the test file to upper case did not change the results.    Sombody else will have to explain how to interpret section 1.3 and   whether IE and Mozilla are exhibiting conformant behavior.        

      I've just realized that the tool that I was using to generate DTD from XML Schema is not expanding substitution groups, basically meaning that the DTD's I provided don't allow DOM properties or methods to appear within tests or assertions.    The property and method elements in the DTD are fine.  Tests, if, asserts, and for-each's are missing the meat of their content models.    I have updated the three sample tests from my previous sample.xml, http://home.houston.rr.com/curta/domtest/parentNodeNull.xml ,  http://home.houston.rr.com/curta/domtest/nodeListTraverseList.xml and  http://home.houston.rr.com/curta/domtest/characterDataIndexSizeSubstringNegativeOffset.xml        

        Thanks Rick.    I've posted a copy of my hacked Xerces JARs at  http://home.houston.rr.com/curta/html-hacked-xerces.jar.  I've posted a  message on the xerces-j-dev mailing list to gauge the reaction of changing  the implementation to work with XHTML.    To build the dom1-html-jar target, you may need to raise the maximum heap  size for the Java VM.  For the Sun VM on Windows, you can do that with:    SET ANT_OPTS=-Xmx1000M        

      I've uploaded a variant of the earlier copy.xsl to http://home.houston.rr.com/curta/copy.xsl that now adds <subject> metadata elements for the last method or attribute invoked (assuming that it is the best subject for the test) or any method wrapped in an <assertDOMException>.  For exceptions, it also adds a <subject> for the exception code and for the code within the description of the method.     The transform requires that dom1-interfaces.xml be in the same directory.        

      Manos,    Maybe I have misinterpreted your efforts, but I don't think they address our immediate objective.  Moving staff.xml into modularized XHTML does not address the lack of DOM Core tests for existing (not X) HTML processors.        

      What I was saying was that given existing tests in whatever language, it is  pretty simple to quickly convert them to DOMTS, so if there is someone who  has existing tests and is willing to donate them as-is, we could review them  and then decide whether to convert them to DOMTS.        

        > I'm uploading the new distribution to  > http://www.ontologicon.com/DOMTSL1Core-20020212.zip, should be there any  > minute.     Not there yet.  Is the URL right?    index.htm contains <body onload="init()">, but function init() is not  defined which throws me into a debugger.    > Are you building the distributable with Ant?  There should be a task  > like  > dom1-core-dist that would build everything repeatably.  >  >  [dd] I missed this one completely as it is not listed among the targets  you see with 'ant usage'.    No, there isn't an ant target to build the distribution, but there should be  one.  When I get your distribution, I'll make modify build.xml so that if  you do "ant dom1-core-dist" it will make a replica of the file that you  uploaded.    I played with trying to run JSUnit from the web, but it would require a  serious amount of hacking to JSUnit that I don't think I want to do tonight.  testRunner.html's inline script calls routines that are defined in external  files.  When not run locally, testRunner.html executes the script before the  external files are loaded and displays an error box.  Basically,  jsUnitRunner.js would need to move into main.html and some tweaking would  need to be done to the onload() handler.        

      For the events tests, I designed an instrumented EventHandler called an EventMonitor that was implemented by the testing framework and captured all raised events and allowed the test to make assertions about the number of bubbling events, the properties of the second captured event.  Simple EventHandler's could have been implemented in DOM TS language, however adding the EventMonitor to the framework simplified the tests and kept DOM TS a simpler language.    For the load/save tests, I always expected that we would need to add some similar test framework implemented classes.  However, you are probably in a better position to enumerate the capabilities that you would want.    To start, I think that you would want:    1. A method to create a new byte array output stream  2. A method to create a new input stream from a URL  3. A method to create a new input stream from a string variable  4. The ability to create a new input stream from an output stream    That much could be accomplished by tweaking the semantics of the existing <var> and <assign> elements.  For example,    <!--   creates new byte array output stream   -->  <var name="outStream" type="DOMOutputStream"/>    <!--  creates new input stream from URL   -->  <var name="inStream" type="DOMInputStream" value="staff.xml"/>    <!--  creates new input stream from string   -->  <var name="inStream" type="DOMInputStream">  <assign var="inStream" value='"<staff/>"'/>    <!--  creates new input stream from out stream  -->  <assign var="inStream" value="outStream"/>      Could you list other capabilities that you would want and any suggested syntax.        

      > > [dd] OK, so, Required, with null as a default value?    I'd really prefer required but null as a prohibited value (at least for  now).  Since passing null into a DOM method is a fairly rare occurrance,  I don't think the slight increase in the test complexity in those  rare instances is worth a substantial increase in the complexity  of the transform.    > > [dd] No problem for me, it's just terminology. It could also be good  idea  > to  > > have a pending flag while the DOM WG considers a tests and its relation  to  > > the specification.  > >  >  > [mb] No problem with these categories, although I agree that we should  have  > the ability to distinguish between Received and "Pending on clarification  > from WG"    Status Pending is used for items that need feedback from the submitter.  I  misused  it earlier.  Any item that was made "Pending" would revert to "Open" if the  submitter  made a comment.    One way would be to create distinct SourceForge accounts for the TS  moderator  and/or for the WG.  If the test is assigned to the TS moderator, then the  test  has passed any preparation and is pending discussion within the TS group.  If the test is assigned to the WG id, then the test has been referred to the  DOM workgroup.        

        Robert Clary wrote:  >   > Contents  >   >   DOM Test Suite task force  >   DOM Test Suite Process  >     Bugzilla  >     Change Control  >   Call for Volunteers/Nominations  >   >   > DOM Test Suite task force  > ==================================================  >   > I have been invited to chair the DOM Test Suite task force  > with the objective of managing the work required to complete  > and release the DOM Test Suites for DOM Levels 1, 2 and 3.  >   > I would like to outline some of the basic changes in how  > the project will be managed and ask for nominations and  > volunteers to help complete the DOM TS.  >   > Please feel free to make comments or suggestions regarding  > these changes.  >   > Changes to the DOM Test Suite Process  > ==================================================  >   > The existing procedures for the DOM TS are outlined in  > <http://www.w3.org/DOM/DOMTS-Process>.  >   > In order to for the DOM TS to be completed, we need to know  > what work needs to be completed, who is responsible for  > completing the work and have some degree of control over  > what changes are made to the project.  >   > In order to achieve this, we will manage all work through  > Bugzilla.  >   > <www-dom-ts@w3.org> will continue to be used for general  > discussion.  >   > Bugzilla  > --------------------------------------------------  >   > The public W3 instance of Bugzilla <http://www.w3.org/Bugs/Public/>  > will be used to identify and track each task required for the  > completion of the DOM TS.  >   > A new Bugzilla product "DOM TS" and the following Components  > have been created:  >   > Component     Description  > ---------     -----------  > Process       This component would be used to manage changes  >               in the process used to manage DOM TS project.  >   > Documentation This component would be used to manage the  >               <http://www.w3.org/DOM/Test> site as well as  >               any other documentation related to the DOM Test  >               suites.  >   >               Any changes to the public web site will be made  >               by Philippe Le Hegaret after approval of the  >               full document by the DOM WG.  >   > Java Binding  This component would manage the maintenance of  >               the XSLT and build processes used to create the  >               binding of the tests to the Java Test harness.  >   > ECMAScript    This component would manage the maintenance of  > Binding       the XSLT and build processes used to create the  >               binding of the tests to the ECMAScript Test harness.  >   > DOM Level 1   This component would be for all issues related  >               to the DOM Level 1 test suite.  >   > DOM Level 2   This component would be for all issues related  >               to the DOM Level 2 test suite.  >   > DOM Level 3   This component would be for all issues related  >               to the DOM Level 3 test suite.    build and schema/DTD generation are probably worthy to be components.    There were good intentions to do transforms and frameworks for other   "unofficial" bindings (Python, Xerces-C, libxml, System.Xml, et al).  It   would be good to clarify whether they can be done within the context of   the W3C effort and if so to define components and a process for   developing or accepting test suite generation for other bindings.    It might be better to organize the components by sub-spec (Core, HTML,   Events, LS, XPath) than by level.  The Level 1 owner isn't going to have   much to do.      > The Component Owner is responsible for either performing the  > work required to resolve the bug or for assigning the bug to  > an appropriate member of the DOM TS community and scheduling  > it to be resolved.  >   > Ownership of each DOM TS Component has been temporarily assigned  > to myself until suitable owners can be identified.  >   > Change Control  > --------------------------------------------------  >   > If we are to complete the DOM TS, each change to the TS must  > be managed. Therefore, before any change is committed to the  > DOM TS:  >   >   * The reason for the change must be documented as a bug in  >     Bugzilla  >   >   * For changes to existing files, the change must be attached  >     to the bug as a patch. For new files, the files must be  >     attached to the bug.  >   >   * Each change must be reviewed by a person who has been  >     given reviewer status. If the reviewer suggests modifications  >     or otherwise does not approve the change to the DOM TS,  >     then the change must not be checked into CVS.    That might be appropriate for the later phases of a test suite's life,   but it would seem to severely hinder collaboration in the development of   new test suites.  I've been troubled that there has been very little   visibility and collaboration in the development of the initial LS and   XPath test suites and such a lock-down would reinforce the tendency for   new test suites to be developed in hiding.    There needs to be some middle ground between tests on one developer's   machine and code that has implied sanction of the WG.  If our releases   were more frequent, then we could tolerate the CVS containing a few   controversial tests awaiting review by the WG.  To have more frequent   releases, we would need some incremental status for releases.  The   progression could be from a nightly build, to working-draft release, to   a last-call release that the task force and WG approved to a definitive   release.  Has there been anything in the QA WG on test suite lifecycles   that might be appropriate?    Except for code freeze periods, the review before commit seems terribly   pessimistic.  If a committer is considering something controversial or   that touches a lot of files, good manners would suggest that it be   brought up on the mailing list for discussion before being committed.   In the, hopefully rare, case that a committer did not think a particular   change was controversial, but it was, it would not be difficult to undo   the change until there was consensus.  Maybe I'm insensitive since I   would be the most likely offender, but I do not believe that we have had     abuses of committer priviledges to warrent such a strong corrective.    The most effective review of a proposed change would be a nightly (or   more frequent build) that would validate all tests against the   appropriate schema, build the bindings, and possibly run the tests   against benchmark implementations (which would probably be limited to   Java bindings at this time).  To effectively review before commit, the   reviewer would be forced to apply the patch to his local copy and run   through such a build process semi-automatically.  To review after   commit, the reviewer could rely on the automated build to find any   structural problems with the change and would only need to verify that   the change is consistent with the spec.  I would not suspect that it   would be difficult to get the DOM TS added to Gump's   (http://jakarta.apache.org/gump) roster.      >   * Changes committed to CVS must include a comment containing  >     the bug number, the reviewer and a short description of  >     the change.  >   > A hierarchy of component owner, reviewer, DOM TS chair, DOM WG  > will be responsible for making decisions regarding changes to  > the DOM TS.  >   > If at any point, a decision is questioned, the decision will  > be bubbled up to the next highest level of authority.  >   > The final authority for any decision regarding the DOM TS is  > the DOM WG.  >   > Repeated violations of the CVS check in rules would be grounds  > for revocation of CVS commit privileges.  >   > Call for Volunteers/Nominations  > ==================================================  >   > We need people to help complete the DOM TS as:  >   >   Component Owners  >   >     Component Owners are responsible for managing the work  >     involved in each component.  >   >   Component QA  >   >     Component QA are responsible for verifying that RESOLVED  >     bugs/issues in Bugzilla are in fact resolved  >     as described in the bug.  >   >   Reviewers  >   >     Reviewers are responsible for ensuring that any changes made  >     to the DOM TS are appropriate.  >   >   General Contributors  >   >     General Contributors help by filing new bugs, helping to  >     resolve existing bugs or by contributing documentation.    Component Owners seem a generally good idea.  However, if, for example,   a change was committed in the DOM L3 TS that broke the build or was not   schema valid, it would be good for a committer to fix the problem   without requiring an assignment of the defect by the component owner.    Breaking down QA by components might be overkill, maybe an QA role that   can mark any bug as closed with an possible informal division of   responsibilities.    There should be no criteria to be a Reviewer (in the monitor change, not   the veto change sense) or a general contributor.  Anyone who wants to   subscribe to www-dom-ts@w3.org or access the CVS should be encouraged to   do so.    Those with commit rights to the CVS (aka Developers) should be a   separate class.    I'd see the roles break down like:    Community/Public: Anyone interested in the DOM TS work.  Can subscribe   and post to www-dom-ts, access the CVS, subscribe to CVS change   notifications, access Bugzilla.    Developers: Public rights + CVS commit rights.  May research bugs and   commit changes to CVS corresponding to bugs.  Should not make   potentially controversial changes to CVS without raising the issue on   www-dom-ts.   When there is a controversy (either before or after a CVS   change), any committer can block (or rollback) the change until WG or WG   liason resolution, accept the change pending WG or WG liason resolution   or accept the change without escalation to the WG liason.  Votes on task   force interim releases.    QA: Monitors Bugzilla, can mark issues as closed.    WG liason: Can block or rollback changes to the CVS.  Coordinates issues     resolution with the WG.  Votes on task force interim releases.    WG: approves formal releases of test suite.    The most crucial role that we have been missing coverage has been   implementation representatives.  It would be great to have someone who   is the go to person for issues specific to Xerces-J, Safari, Konqueror,   Palm Web Browser, etc.    >   > If you would like to be involved in one of these areas or know of  > someone you think would be a good candidate, please contact me.  >   > Bob Clary        

      Dimitris Dimitriadis wrote:  >I've also run into problems with two editors I use, XML Spy and XML  Authority, that  >don't have a uniform way of expanding substitution groups (either in schema  form or as  >etnities in DTD), which of course leads to the only serious alternative:  text editor.    Actually, there is another possibility.  About a year or so ago, I did an  XML Schema "compiler" in XSLT that did all the inclusions, resolved all the  links, built all the substitution groups and produced a "compiled"  representation from which would could build code, documentation, or  conversions to other schema representations such as DTDs.  I've been asked  to revive that from time to time, potentially as a path from XML Schema to  Schematron.  I'm pretty sure that I could tweak the DTD generation to  represent named groups and substitution groups as parameter entities.  An  significantly out of date version is at  http://sourceforge.net/projects/xsdcomp/        

      I've updated http://home.houston.rr.com/curta/domtest/test2java.xsl.  Now it produces attributes and method calls, but very few framework constructs (which should be pretty trivial).  Most of the logic in the code is determining when explicit casting is required.  I'm sure there is some additional tweaking needed, but it is a lot closer than last night.        

      Okay, maybe it will all come to me when I get some time this weekend.    I don't see a use case for ActiveNodeSet that justifies the apparent  complexity.    For any moderately complex XPath expression, it would seem to be very  difficult  to detect whether a document change would invalidate the NodeSet without  recomputing  the results and comparing it element by element or just throwing it away  if any modification occurs.        

        I've updated the DOM L1 Core, L2 Core, HTML and Events with a modified   version of JSUnit that should valid HTML 4.01.  While making those   fixes I stumbled across the reason why test documents were never   reported as loaded when running the test suite from Opera and have   changed the test suite to use a different mechanism to accomplish that   goal.  See bug 600 for details.    p.s. Opera, like several of the Mac versions, does require running the   tests from an HTTP server and not off the local file system due to some   issue in JSUnit's handling of file URL's.        

      Minor clerical issue.  It would be helpful if the XML sources for DOM L3 distinguished between interfaces that the DOM implementation is expected to provide (almost all interfaces) and the few that the application might provide (EventListener, for example).  Just some other little attribute on the <interface> element that is usually omitted would be all that is necessary.        

      I've added a few transforms and a new target, "dom1-core-matrix" which will create a rudimentary HTML text matrix that displays methods and attributes that do not appear to be tested, will list all tests associated with each method and attribute in the DOM 1 core and all methods and attributes associated with each test.  All this info is based (and only as good as) the <subjects> elements in the tests.    If somebody wants to right some easy tests, there did not seem to be any (now there are two) tests that set Node.value.  For Node types that are defined as having a null value, setting Node.value is supposed to have no effect (in DOM L1 Second Edition), however I have seen implementations throw exceptions on the attempt.  Look at nodedocumentsetnodevalue.xml for an example of setting.    If someone wants to beatify the test matrix or start cleaning up the subjects, please speak up.        

      I'm really got to get to real work having been up way too late last night.    I guess part of the issue comes from the expectations that were raised by text in the invitation that said that the framework and tests were going to be publically developed. In my mind, that means there should be freedom to discuss shortcomings and alternative formulations before a particular path is locked in.    I mentioned some (but not all of the issues I had with the NIST DTD) of http://lists.w3.org/Archives/Public/www-dom-ts/2001May/0006.html.  The responses seemed like we were talking past each other, It didn't seem like others were getting my points and I wasn't getting theirs.  Building the schema was an attempt to help crystalize my thoughts on the issues and to try to more clearly communicate what I envisioned.    On visibility, I wasn't trying to throw stones at NIST or Dimitris, since they have been about the only other people discussing things on the mailing list.  However, some of Dimitris comments have hinted that there are others doing significant work and making significant decisions outside of public view.        

        Interface DOMStringList:    "ordered collection of parallel pairs of name and namespace values"    This phrase also appears in the description for NameList.    Interface NameList:    "ordered collection... values"    Maybe "ordered collection of qualified names"    The description for the return values of getName and getNamespaceURI are   identical, though from the context you could guess that one is a name   and the other a NamespaceURI.    getName does not define whether the return value is a local name or   might contain a namespace prefix.  I'd would assume that local name   would be preferrable.  Changing the name to getLocalName() would be   clearer and consistent with XPath.    Exception clauses of getName() and getNamespaceURI() contain "number of   nodes in the list" though the list does not contain nodes.  The expected   behavior for negative indexes is not defined.  Throwing an exception on   out of range indexes is not consistent with DOMStringList and other   lists.   I can understand the motivation since getNamespaceURI() could   be null before the end of the list, however you could distinguish   between a null namespace and end of the list since getName would be null   at the end of the list.    Interface DOMImplementationSource:    I dislike the form of this interface for a couple of reasons:  it   requires that each implementation source to parse the features list   which could have been done once for all implementation sources and it   enables the implementation source to return inconsistent first   implementation sources.  I'd suggest something like    interface DOMImplementationSource {      DOMImplementation getDOMImplementation(DOMStringList features,   DOMStringList versions, unsigned int index);  }    I believe that eliminates any use of DOMImplementationList so that   interface could be eliminated.        

      Jeroen van Rotterdam wrote:  >With the limited knowledge I've got now from the DTD I'm trying to image how a test for   >a DOM L3 LS call would look like.  >  >example:  >  >void       writeNode(in DOMOutputStream destination, in Node node) raises(DOMSystemException);    >Would probably something like <DOMWriter.writeNode var="........    I think this is similar to problems that you would also encounter in writing tests to test event   dispatching and probably traversals (but I don't know traversals).  Definitely I don't think we want   our little language to grow to the point that we can extend arbitrary interfaces.    I did a few initial tests for event dispatch and the approach that I thought was reasonable was to  have a build-in implementation of the listener (or in this case DOMOutputStream) that captured  all the events (or output) and allowed you to insert code into the event handler.  You could  make assertions in the event handler or after event dispatching was complete.    I started with some event tests in Java with Junit:      http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/JUNIT/NET/sourceforge/XMLCONF/DOMUNIT/dom2/events/eventtarget.java?rev=1.1&content-type=text/vnd.viewcvs-markup    and then added the minimal language constructs that allows to be represent that test.  Which in my schema was the <declare><onEvent/></declare>, the EventMonitor.* elements and the EventMonitor datatype.    I would assume a similar approach would work for Traversals and Serialization.  Determine what you  want to test and prototype a few in the language of your convienience and then add a few constructs  to support those types of tests.        

      Maybe the place to deal with some implementations representing with XML declaration with a PI node is in the definition of the "bootstrapping" part of DOM Level 3.  Basically, say that if a document is loaded through the DOM Level 3 "bootstrapping" binding, XML declarations are not represented (or at least not represented as a PI).  When accessed through their existing APIs, implementations can continue their current behavior to avoid breaking compatibility with applications that depend on that behavior.        

      I've made up a little XSLT transform that creates RDF metadata for  the NIST tests by analyzing the Test Matrix at  http://xw2k.sdct.itl.nist.gov/brady/w3c-dom/test-matrix.html  I first needed  to make that document a legal XML document by adding an /> to <br> and <col>  elements.    Seems to generate garbage for the HTML tests, but does an okay job on the  XML tests.  Basically, it scans the description of the test for any  parameter name, exception code or 'returns' and emits a corresponding  <dc:subject> element for the parameter, exception code or return values with  a resource URI that should be the same as the corresponding entry in  subjects.rdf.  For example:    <rdf:Description  about="level-both/xml/nodeAppendChildNewChildDiffDocument.xml">  <dc:title>nodeAppendChildNewChildDiffDocument</dc:title>  <dc:description>The appendChild method raises a WRONG_DOCUMENT_ERR  DOMexception if newChild was created from a different document than the one  that created this node.</dc:description>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  ID-184E7107"/>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  xpointer(id('ID-184E7107')/raises/exception[@name='DOMException']/descr/p[su  bstring-before(.':')='WRONG_DOCUMENT_ERR'])"/>  <dc:subject  resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#  xpointer(id('ID-184E7107')/parameters/param[@name='newChild'])"/>  <dc:creator>NIST</dc:creator>  </rdf:Description>    The nistmeta.xsl is in the xmlconf CVS (viewable at  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/nistmeta.x  sl).  The sample of the generated output is at  http://home.houston.rr.com/curta/domtest/tests.rdf    The metadata processing code could append extracted in-test metadata with an  external metadata source to produce an overall external metadata file that  would be used for the test matrix and other generation.    The values of the about parameters would need to be generated to reflect the  eventual w3.org locator.    What it the significance of level-both?  Wouldn't any test that tests "both"  levels really be a DOM level 1 test?        

          On Feb 28, 2004, at 12:34 AM, Curt Arnold wrote:    >  > To whom it may engage...  >    Our first nag from Gump.  These will be sent with my return address but   originate with one of the Gump build machines.  The first attempt at   the automated build failed since dom3-events.jar was mispelled as   dom3-evants.jar.  I've fixed that in the CVS but I do not know if that   means that we have failed the publically available nightly build or if   this nag was from one of the early warning machines.    When it does start to work nightly builds can be found at   http://jakarta.apache.org/gump.        

        I've been banging in L3 L&S tests at a pretty frantic pace over the   last few days.  I've stopped adding tests and would appreciate any   feedback especially from implementations that support character   normalization.        

        The description of these methods do not specify what units (bytes,   UTF-16 units) are used to report the position and total size.    There should be a mechanism (a value of -1 for example) to indicate that   a totalSize could not be determined or estimated.        

      > make index.htm valid.    Amen.    >  > > The distibution to check is  > > http://home.houston.rr.com/curta/dom1-core.tar.gz  >  > also, remove xerces 2.0 from the java directory.    Unintentional, would not have been present if an "ant clean" was done before  "ant dom1-core-dist".    > java -classpath dom1-core.jar junit.textui.testRunner  > org.w3c.domts.level1.core.TestDefaultParser  > returned  > Exception in thread "main" java.lang.NoClassDefFoundError:  > junit/textui/testRunner  >  > java -classpath dom1-core.jar junit.swingui.testRunner -noloading  > org.w3c.domts.level1.core.TestDefaultParser  > returned  > Exception in thread "main" java.lang.NoClassDefFoundError:  > junit/swingui/testRunner    Capitalization errors, should have been "TestRunner" not "testRunner"    > for ECMAScript:  > [[  > open the JsUnit test runner in the browser you want to test, then enter  > "tests/alltests.html"  > ]]  >  > I add to browse into ecmascript/test/alltests.html. entering  > tests/alltests.html doesn't work.  > (idem with SVG tests)    Change text to describing browing for alltests.html.    >  > Didn't work with my nightly build of Mozilla. wasn't maybe a good idea  > to install a nightly build version. Did someone try it with 0.9.8?  > (idem with SVG tests)    I tested with 0.9.7 (which I thought was a couple week old nightly build) on  Windows with no problems.    I'll let Dimitris fix these up and do the next candidate.        

      Mary Brady wrote:  > [mb] Have we asked the working group what should happen if the iterms were  > represented as an internal subset?  I'd rather get a concrete answer and  fix  > the  > problem than provide a work-around.    I'd love to get a concrete, consise statement from the WG on this matter,  too.  I have raised it on this list, but I don't know if Dimitriadis has  either taken it back to the WG or if he can clarify the existing position  from member confidential material.    Might finally be time to fire up the bug tracker from our SF alter-ego to  keep track of open issues.    If default attribute nodes should be provided when for default attributes in  the internal subset, I would still recommend adding new tests for that  behavior and leaving the existing tests as is.  Basically, creating an  is_staff.xml (for internal subset) and is_ versions of the 9 tests.        

        http://www.w3.org/Bugs/Public/show_bug.cgi?id=410    Several tests (including some L&S tests not mentioned in the bug)   perform case-sensitive comparisions when testing encoding values.  The   IANA reference indicates that there should be no distinction between   upper and lower case letters which would suggest that a case-insensitive   comparision is appropriate.    I would appreciate any comments.        

        ElementEditVAL:contentType is currently a method, though it seems like   it would be better as a readonly attribute.        

      Thought it is pretty obvious to us, index.html should make it clear that the test suite currently only tests XML and SVG implementations of DOM L1 Core.  That when you are running the ECMAScript tests in IE, you are testing the MSXML2 component (or Adobe SVG if you select svg_alltests.html) and when you are running the ECMAScript tests in Mozilla, you are testing their XML parser.  Later revisions will add tests for DOM L1 conformance for HTML implementations.        

      From DOM Level 1 Second edition (and L2 Core and L3 Core)  http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-F68  D080    "The value of this node, depending on its type; see the table above. When it  is defined to be null, setting it has no effect. "    (The original DOM L1 didn't have the "When it is defined to be null.." and I  didn't see the corresponding errata in the errata list, but its inclusion in  L1 Core Second Edition would imply that there was an errata.)    In the referenced table, Document, DocumentFragment, DocumentType, Element,  Entity, EntityReference and Notation are defined to be null.    Since NO_MODIFICATION_ALLOWED_ERR is mentioned as a possible exception when  the node is read-only, there is a ambiguity in the case where the nodeValue  is defined as null and the node type is readonly.    Document, DocumentFragment, and Element (except when a child of Entity or  EntityReference) nodes are clearly not readonly (and the corresponding tests  for these nodes were not an issue).    DocumentType Node (test nodeValue04):  http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-412266927    The sentence "The DOM Level 1 doesn't support editing DocumentType nodes."  (and similar in DOM L2) implies that a DocumentType node is not readonly by  nature, but only that DOM does not provide a mechanism to modify the  DocumentType.  It would apparently be acceptible for a implementation  specific interface to change the DocumentType node.  Since DocumentType does  not appear to be readonly, there is no conflict between the "defined as  null" clause and the NO_MODIFICATION_ALLOWED_ERR and test nodeValue04 seems  to be valid.    Notation Node (nodeValue08)    From http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5431D1B9,  "The DOM Level 1 does not support editing Notation nodes; they are therefore  readonly."    This EXACT sentence appears also in DOM L2 and L3 Core.  It seems out of  place for the DOM L3 to say that Notation nodes are readonly since there is  no way of editing them in DOM L1.    However, there at least seems to be the potential for conflict between the  "when defined to be null" clause and the raises NO_MODIFICATION_ALLOWED_ERR.    Entity node (nodeentitysetnodevalue, nodeValue07):    DOM L2 explicitly stated that Entity nodes were readonly (DOM L1 explicitly  mentioned children of entity nodes but not the Entity node itself).    Entity Reference node (nodeValue03):    Same as Entity node.    Some other links:  http://lists.w3.org/Archives/Public/www-dom-ts/2002Feb/0142.html  http://www.geocrawler.com/archives/3/318/1999/7/50/2480234/  http://lists.w3.org/Archives/Public/www-dom/1999JulSep/0022.html  http://lists.w3.org/Archives/Public/www-dom-ts/2001Oct/0029.html    I had thought there had been a definitive resolution from the WG, but I  couldn't locate on in the mailing lists.    If it was intended for exceptions to be raised on Notation, Entity,  EntityReference and DocumentType then the phase "When it is defined to be  null, setting it has no effect" would only be true for 4 of the 8 node types  where nodeValue is defined to be null.  Since the authors of the DOM spec  should be aware that many of the nodeTypes that are defined to be null are  also read-only, I'd take that as a clear indication that they wanted the "no  effect" clause to supercede the read-only exception.    Some of these tests (the ones that aren't nodeValueXX) have existed in the  NIST test suite for some time and previous versions of Xerces-J and Crimson  successfully passed them.  It seems undesirable (even if allowed under the  recommendation) for Xerces-J to change its behavior on these cases.  However, a definitive opinion would have to come from the WG.      ----- Original Message -----  From: <nddelima@ca.ibm.com>  Sent: Thursday, February 14, 2002 4:10 PM  Subject: setNodeValue tests      > I downloaded and ran the DOM test suite against XercesJ2.0.0 ( a nightly  > snapshot about a day or two old) and noticed the following new test case  > failures...  >  > nodeentitysetnodevalue  > org.w3c.dom.DOMException: Entity nodes are read only  > at org.apache.xerces.dom.EntityImpl.setNodeValue(EntityImpl.java:331)  > at  >  org.w3c.domts.level1.core.nodeentitysetnodevalue.runTest(nodeentitysetnodeva  lue.java:65)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue03  > org.w3c.dom.DOMException: Entity Reference nodes are read only  > at  >  org.apache.xerces.dom.EntityReferenceImpl.setNodeValue(EntityReferenceImpl.j  ava:316)  > at org.w3c.domts.level1.core.nodevalue03.runTest(nodevalue03.java:56)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue04  > org.w3c.dom.DOMException: DocumentType nodes are read only  > at  >  org.apache.xerces.dom.DocumentTypeImpl.setNodeValue(DocumentTypeImpl.java:36  9)  > at org.w3c.domts.level1.core.nodevalue04.runTest(nodevalue04.java:56)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue07  > org.w3c.dom.DOMException: Entity nodes are read only  > at org.apache.xerces.dom.EntityImpl.setNodeValue(EntityImpl.java:331)  > at org.w3c.domts.level1.core.nodevalue07.runTest(nodevalue07.java:60)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue08  > org.w3c.dom.DOMException: Notation nodes are read only  > at org.apache.xerces.dom.NotationImpl.setNodeValue(NotationImpl.java:217)  > at org.w3c.domts.level1.core.nodevalue08.runTest(nodevalue08.java:60)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > As per my understanding of DOM Level1 spec, the DocType, Notation, and  > descendants of Entity and EntityReference nodes are read only.  DOM Level  2  > goes further to state that Entity and EntityReference nodes and their  > descendants are readonly.  Calling Node.setNodeValue(...) on readonly  nodes  > should result in a NO_MODIFICATION_ALLOWED_ERROR which Xerces appears to  be  > doing.  So I'm not quite sure if these are valid failures.  >  >  > Thanks for all your effort and a great job with the test suite.  >  > Neil.  > IBM  - Toronto Lab,  > e-mail: nddelima@ca.ibm.com  >  >        

        IE 6 and Mozilla return lower-case tag and attribute names for HTML   documents.  It appears that they intentionally convert to lower-case   since changing the source document had no effect.  Konqueror returns   upper-case tag and attribute names.  Opera fails hc_attrname which   suggests that it returns upper-case, but since it is not yet possible to   see the failure message it is hard to be sure.  Safari passes   hc_attrname, so it appears to have deviated from the Konqueror code base.    It appears in this case, the L2 HTML specification appears to be in   conflict with the dominant browsers and an implementor has to make a   decision to adhere to the spec or to maximize compatibility with   existing scripts.    I think the most satisifactory solution would be to issue an errata for   L2 HTML specifying that tag and attribute names should be returned as   lower-case for HTML documents and change hc_staff.html to use upper-case   tag and attribute names (to make sure that the implementation forces   them to lower-case and not just preserve the source case).        

        actualEncoding:  Not adequately explained.  Is this the encoding at the   time of parsing?  Do subsequent saves change the value?  initialEncoding   might be better.    config: Using an abbreviation is unusual.    documentURI: Should it be possible (or required) for an implementation   to raise an exception if a new value is set that is not a valid URI.    xmlEncoding: Can an implementation raise an exception if it does not   recognize the encoding on setting?  How is this affected by saves?     Does this affect saves (which would be in the L/S spec)?  Maybe it is   cleaner just to allow the encoding to be specified on the save request.    xmlStandalone: What occurs when this attribute is set to true and the   document does not satisify the requirements for standalone="yes".    adoptNode:  The difference between adoptNode and importNode is not immediately   obvious.     "from its parent child list" should be "from its parent's child list" or   better "from the child list of its parent"    "or null if the operation fails, such as when the source node comes from   a different implementation".  This seems to be a opening for an   implementation to always return null.  The expected failure scenarios   should be enumerated as exceptions.    getElementsByTagName:  "The special value "*" ... For XML, this is is   case-sensitive"  "this is" should be "the tagname parameter" or the sentences should be   rearranged.    normalizeDocument: "Note that this method does not generate fatal errors"    Should this be "does not raise exceptions"    renameNode:  What is the behavior when attempting to change the   attribute name to the name of an attribute that already exists on the   element.        

      Ray Whitmer (>) and Bob Foster (>>) wrote:    > further feedback).  We are talking about the actual DOM nodes returned  > from an xpath expression, and what to do when XPath says there should be  > a single node, having discarded information, but DOM has fragmented it  > across multiple nodes.  Answer: in case of fragmentation, return just  > the first node.    That doesn't sound good.  If I have a text content, I don't want to get  partial  information if the implementation doesn't expand entity references.  I'd  would think  an object that exposes the appropriate interfaces (say CharacterData and  Node) but represents the underlying node list and that pseudo-node could  be used to update the content or remove the entire set.  If I set the value  of the pseudo-node, then all the existing text and entity references would  be replaced.    > >3) If you are going to add a method to the DOM, it would be far better to  > >introduce a variant of normalize() that coalesces adjacent text (that is,  > >Text and CDATA) nodes exactly as described in the XPath specification.  > >  > While such a normalize function is a good idea, it is not sufficient in  > cases where stripping out all CDATASections and EntityReferences is not  > an option.  It is also questionable whether XPath inquiries should only  > function correctly on a completely normalized tree.    If you were only interested in getting the value, you could do that by  adding string() around your XPath query.  You could already do that using string() in your XPath query.  Unfortunately,  that would not give you an object that you could use to modify the tree  or set a listener on.    > While enumerating all types is impossible for XPath 2.0, I still think  > there is no reason to in the common cases of String, integer, or boolean  > to force users to muck with untyped object returns and native coercion,  > when well-defined system primatives can be supported.  >  > For XPath 2.0, we should probably consider adding:  >  > Object evaluateAs(<type>, ...)    I think it is necessary that there is a generic evaluateAs(), however I  don't think it is necessary or desirable to pass the type as an argument  since XPath 2.0 should have the Schema datatype equivalents of  string(), number(), etc.  The evaluteAsString, evaluateAsNumber,  etc are useful and probably should be kept.    > >6) Some responses seem to think that the Node-returning variant is meant  as  > >a hint to XPath that at most one node need be returned. If this is the  sly  > >intention ("There is nothing to stop an XPath implementor from taking  > >advantage...") it should be made explicit. I agree that this is a common  > >case and a useful optimization (you can slap a /.[1] at the end of any  node  > >locator, but you can't stop most XPath implementations from grinding out  and  > >testing all n nodes). It just shouldn't sneak in the back door.  > >  > The call is not a "hint", but a very clear statement that one node is  > requested.  The implementation may or may not be "sly" about only  > computing the first node, just as it may be sly enough to evaluate  > ActiveNodeSets incrementally as the caller requests additional nodes, in  > which case this method wasn't needed to avoid computation.  There are  > quite a few gains, and some of the best ones have to do with not  > returning a NodeSet, and are just as true of evaluateAsString, for  > example.  It is not clear to me that we should spend a lot of time in  > the specification discussing these implementation optimizations which  > may or may not be available.  Implementations will choose how sly they  > should be.    This is really more an optimization external to the XPath evaluator.  Even  if the processor  grinds through the entire document, using a evaluateAsNode saves the  construction and interface negotations for the NodeList and probably a  couple of calls.    I'd definitely in favor of keeping this one.    > >7) [Interface ActiveNodeSet] For simplicity and concurrency reasons,  > >ActiveNodeSet should be eliminated entirely in favor of StaticNodeSet.  > >Without explicit synchronization of access to the DOM, the useful  lifetime  > >of an ActiveNodeSet cannot be determined. It is possible a returned  instance  > >might already be invalid.    I mentioned that I think NodeSetIterator and NodeSet are better names for  ActiveNodeSet  and StaticNodeSet.  ActiveNodeSet behaves like an fail-fast iterator on a  collection.  StaticNodeSet behaves like a common ancestor to NodeList and  NamedNodeMap.        

      I am aware of the strange include paths in the .html files.  I think I can get JSUnit to dynamically add its support libraries to the test files and eliminate the need for the tests to know the (relative) location of JSUnit.  I won't be able to do that until next week, so if somebody wants to work on that and submit a patch to the JSUnit maintainer in the interim, please feel free.    Thursday is Thanksgiving in the US.  Most offices will be closed both Thursday and Friday and I'm sure most US participants will not be checking the email at least not as often over the holiday.        

      The problem with firstChild was due to firstChild being both a method (of TreeWalker) and an attribute (of Node), the transform didn't like that too much.  I've also cleaned up indenting and a long term problem with the spurious /* undefined */ comments.  Have not made the corresponding changes to test-to-ecmascript.xsl    I removed the setNodeValue() tests that I recently added to some of the documentCreate* tests and created distinct tests (nullnodevalue01-09) that create or access each of the node types that have nodeValue permanently set to null.    staffNS.xml was not present, so most all the test fail.    Several of the tests create a list of responses to unrelated evaluations, append the results of the evaluations to a list and then compare the lists.  That is undesirable since it unnecessarily complicates the tests.  List comparisons should only be used when there is an iteration involved.  Most of these look like they are badly formulated anyway.    isSupported12 looks pretty weird, it appears to be testing if the parser under test supports all know DOM modules (Core, Events, HTML) and both level 1 and level 3!!!!.  No parser in existance would pass this test.  I did rewrite it to eliminate the nested <foreach> since I haven't supported nested <foreach> in the code generation.    Several tests had unnecessary while statements and were depending on <plus> to do string concatenation.  I simplified these by adding the concatentated string to the literals in the array members and removing the whiles.    All the tests seemed to have spurious line feeds which I have cleaned up.    All committed to the CVS.        

      I've put two transforms on my home page, http://home.houston.rr.com/curta/domtest/extract.xsl will extract just the interface definitions from the DOM recommendation (haven't tested against DOM2 or SVG)    http://home.houston.rr.com/curta/domtest/test2java.xsl is a start at a transform to create Java code from a test definition and the output of extract.xsl.  Still a long way from finished, however getting started was necessary to figure out what is missing, wrong or awkward with the test definition language.        

      p.s. The evalute() method would still need a namespace prefix resolver  parameter and the behavior of a range object that exposed the CharacterData  interface would not be unlike the current behavior of an AttributeNode  object when the attribute contains entities.        

      Dimitris Dimitriadis wrote:  > [dd] Was that the xsl:choice one? I was just getting ready to submit an  > updated version, won't be necessary if you've spotted it.    That was it.  > >  > [dd] I can make available weekly revisions from the main page. As long  > as the transform used to produce the schemata stay the way they are, not  > changes will occur. I'll put a note on the page explaining this in any  > case.    I don't anticipate any significant changes for the dom2 schema and dtd,  other than to bring the DTD into line with the schema changes from last  night.  However, I expect that there will be changes to dom-to-xsd.xsl and  dom-to-dtd.xsl to resolve the production issues with the DOM3 schema.  Feel  free to update dom-to-dtd.xsl if you'd like, otherwise I'll do it tonight.    > > dom3.xsd has some serious production issues, but the hand finished  > > version  > > is better than nothing.  > >  > >  > [dd] OK, I trust Jeroen (X-Hive) has seen the link?    Haven't had any direct response, however producing an initial dom3 schema  was intended to support his development of Load/Save tests.  As long as it  is clearly stated that the schema is experimental with known issues and  subject to frequent change, I think it would be good to have it available on  the web page.        

        http://www.w3.org/TR/2004/PR-DOM-Level-3-Core-20040205/core#parameter-   validate-if-schema    "validate-if-schema"  ...    false  [required] (default)    No schema processing should be performed if the  document has a    schema, including internal subset processing. Note that validation must    still happen if  "validate"  is true.    The "including internal subset processing" appears to contradict     http://www.w3.org/TR/2000/REC-xml-20001006#proc-types and    http://lists.w3.org/Archives/Public/www-dom-ts/2002Mar/0050.html where    default attribute values from internal subsets are expected even if the    processor is not validating.        

      Got Mozilla testing working.  Kinda kludgy, but it seems to work.    Mozilla doesn't support sychronous loading and would be pretty complicated to rework the tests to work asynchronously.  To work around this, a couple of test documents are loaded before the tests are initiated and test documents are loaded in anticipation of future use.  When there is not a test document already available, an message box is displayed to stall the tests until the test document is loaded.    Target dom1-core-gen-jsunit will build the tests, target dom1-core-jsunit-zip will build a zip file.  A copy of the zip file can be downloaded from http://home.houston.rr.com/curta/dom1-core-ecma.zip    To run the tests, load lib/jsunit/testRunner.html in either IE 5 or Mozilla 0.9.3.  Then select build/ecmascript/level1/core/alltests.html (will crash Mozilla) or mozsafe.html (eliminates 3 tests that crash Mozilla) and press run.    Quite a few tests will fail apparently since document.docType apparently returns null.  The tests will not work with Netscape 6.0 or Netscape 6.1.        

      I'll add it to the CVS this afternoon (unless somebody beats me to it).        

        I lumped fixes related from   http://lists.w3.org/Archives/Public/www-dom-ts/2003Dec/0029.html and   http://lists.w3.org/Archives/Public/www-dom-ts/2003Dec/0030.html as bug   447 (http://www.w3.org/Bugs/Public/show_bug.cgi?id=447).  All of   Xerces-J's current test failures appear to be legitimate implementation   problems.    The bug report has blow-by-blow details of the changes.     Of particular interest is a change in the base URL for http related   tests.  The default base is now http://localhost:8080/webdav/ which can   be overriden by specifying   -Dorg.w3c.domts.httpbase=http://www.example.com/domts/ or similar.  This   (hopefully) simplifies configuration of the supporting server.  All that   should be necessary to use Tomcat should be to change the webdav folder   to read-write in the web.xml file and to copy testpdf.pdf to the webdav   directory.  DOMBuilderTest5 now checks that testpdf.pdf can be   successfully parsed before specifying supported-doctypes-only, so   testpdf.pdf has to be a valid XML file for the test to pass.  I've added   testpdf.pdf (a duplicate of test0.xml) to the ls/files directory.    There were a few minor changes to the test framework,   <createTempHttpURI/> and <createTempFileURI/> were replaced by   <createTempURI scheme="file|http"/> and a scheme attribute was added to   <getResourceURI/>.    Elana had complained about the file: URI's generated by   File.toURI().toString() causing SystemId1 to fail.  The current Xerces-J   CVS attempts the following around line 687 in   org.apache.xml.serialize.DOMSerializerImpl    FileOutputStream fileOut = new FileOutputStream(new File(uri));    Where uri would be the value of LSOutput.getSystemId().    This code does not check the scheme of the URI before attempting to   create a File object, so http: uri's should be expected to throw an   exception and I see nothing in the JDK documentation that would lead me   to believe that I should be able to pass a string containing a file: URL   to new File().  If I replaced that line with the following JDK 1.4   specific code:    URL parsedURL = new URL(uri);  if ("file".equals(parsedURL.getProtocol()) {      fileOut = new FileOutputStream(new File(new URI(uri)));  } else {      throw new Exception("unsupported scheme");  }    Xerces would then pass SystemId1.  If there are legitimate changes to   make the generated URL's compatible with your file: URL parsing code   that might be used by a non-public implementation, please provide a   patch for org.w3c.domts.DOMTest.    SystemId2 would require filling in the else clause with something   appropriate for HTTP URL's.        

      Jeroen wrote:  > The output files are temporary. I need a scratch directory for round-trip  > tests which can be easily resolved to a relative url.    That could make things interesting.  In the existing java tests, relative  URL are resolved in reference to jar: URL.  You would not have write access  to the test .jar file.   In the browser based tests, you may not have access  to the file system.  Might have to add a framework function that will give  you a URL to a writable temporary file.  Will probably have to look at some  proposed tests and figure out how to deal with the situation.        

        I've just created the infrastructure for a DOM L3 Core test suite and   committed one trivial test (impl.hasFeature("XML", "3.0") == true).  If   anyone has DOM L3 Core tests in progress or ready to submit, please let   the list know.  Unless there is some significant contribution coming,   I'll try to add a few tests every couple of days.        

      Thanks for giving it a shot, however they were quite what I wanted.  I committed test-to-html.xsl which does about what I wanted.  I tested it with Mozilla by adding an <?xml-stylesheet href="test-to-html.xsl" type="text/xml"?> to the top of a few tests.  My problem this morning that that I had the wrong extension on tests.xslt.    Unfortunately, I've dorked my associations and if I load xml docs from IE, it starts Mozilla, so I'm not able test IE's display of the style'd tests.  I switched machines and did uncover a bug in dom-to-dtd (ATTLIST equals appeared a second time where ATTLIST notEquals was intended) since IE complained the ID attribute being defined twice.    build.xml was updated to copy test-to-html.xsl to the tests directory.    For the upcoming NIST commits, if it is not too difficult, please added stylesheet PI.  If not, we can add it after the tests are initially committed very easily.        

        David Faure wrote:    >  >  >>From DOMTestCase.js:  >  >function toUpperCaseArray() {  >    var upperCased = new Array(expected.length);  >    for(var i = 0; i < expected.length; i++) {  >        if (expected[i].substring(0,1) != "#") {  >            upperCased[i] = expected[i].toUpperCase();  >        } else {  >            upperCased[i] = expected[i];  >        }  >    }  >    return upperCased;  >}  >  >"expected" isn't defined. I think this should be  >  >function toUpperCaseArray(expected) {  >...  >}  >  >    >  Logged as http://www.w3.org/Bugs/Public/show_bug.cgi?id=235 and fix   committed to CVS.        

      I made a series of small changes to the transforms and build files in the CVS to account for the change of resource file locations, to remove unnecessarily required ID's in the DTD and to remove the package and targetURI attributes.    A zip file with a sample test and the current DTD's and schema are at http://home.houston.rr.com/curta/sampleTest.zip    I intentionally used all the metadata elements (well except for relation) for demonstration purposes.        

        Being able to pass in either a JS function or an object sounds   desirable in those instances sounds desirable, but I don't see   justification for it in the current ecmascript binding description.  I   assume that you do not anticipate any implementation difficulties if it   took either form.      On Mar 11, 2004, at 12:12 AM, Johnny Stenback wrote:    >  > Curt Arnold wrote:  > [...]  >> It is pretty explicit that a function object is used for   >> EventListeners  and NodeFilters.  Am I right in interpreting that the   >> DOMErrorHandler,  UserDataHandler, LSSerializerFilter, LSParserFilter   >> and  ResourceResolver are passed as objects, something like:  >  > I would argue that it should be able to pass a JS function as any   > callback interfaces that contain only one method (i.e. one method, no   > attributes, but constants are ok). That would mean that one can pass a   > JS function as a DOMErrorHandler, UserDataHandler, or   > LSResourceResolver, but not as a LSSerializerFilter nor as a   > LSParserFilter.  >  > --   > jst  >        

        Over the past few days, I've also added 48 tests for   TypeInfo.isDerivedFrom.  I had commented that I thought that the spec   was underdocumented, especially when dealing with derivation trees that   involve multiple method of derivations.  Basically, the tests reflect   the following algebra:    If    <simpleType name="b">        <restriction base="a"/>  </simpleType>   (or equivalent complexType>    then:    b.isDerivedFrom(otherType, method) =       ((method & METHOD_RESTRICTION != 0) && otherType == a) ||   a.isDerivedFrom(otherType, method)    If    <simpleType name="c">        <union memberTypes="a b"/>  </simpleType>    Then:    c.isDerivedFrom(otherType, METHOD_RESTRICTION) =        a.isDerivedFrom(otherType, METHOD_RESTRICTION) &&   b.isDerivedFrom(otherType, METHOD_RESTRICTION)    c.isDerivedFrom(otherType, METHOD_UNION) =        otherType == a ||        otherType == b ||        a.isDerivedFrom(otherType, METHOD_RESTRICTION) ||        b.isDerivedFrom(otherType, METHOD_RESTRICTION)    c.isDerivedFrom(otherType, METHOD_EXTENSION) =        false    c.isDerivedFrom(otherType, METHOD_LIST)        a.isDerivedFrom(otherType, METHOD_LIST) &&   b.isDerivedFrom(otherType, METHOD_LIST)        If    <simpleType name="b">        <list base="a"/>  </simpleType>    b.isDerivedFrom(otherType, METHOD_RESTRICTION) =       otherType == xsd:anySimpleType || otherType == xsd:anyType    b.isDerivedFrom(otherType, METHOD_UNION) =        false    b.isDerivedFrom(otherType, METHOD_EXTENSION) =        false    b.isDerivedFrom(otherType, METHOD_LIST)        otherType == a ||        a.isDerivedFrom(otherType, METHOD_RESTRICTION)        If    <complexType name="b">        <extension base="a"/>  </complexType>    b.isDerivedFrom(otherType, METHOD_RESTRICTION) =       otherType == xsd:anySimpleType || otherType == xsd:anyType    b.isDerivedFrom(otherType, METHOD_UNION) =        false    b.isDerivedFrom(otherType, METHOD_EXTENSION) =        otherType == a || a.isDerivedFrom(otherType, METHOD_EXTENSION)    b.isDerivedFrom(otherType, METHOD_LIST)        false      For two non-zero integers, i and j    a.isDerivedFrom(otherType, i | j)       a.isDerivedFrom(otherType, i) || a.isDerivedFrom(otherType, j)    This algebra should result in the following desirable features:    if a.isDerivedFrom(otherType, METHOD_RESTRICTION) then every member of   the value set for a is also a member of the value set of otherType.    if a.isDerivedFrom(otherType, METHOD_LIST) then every member of the   value set for a is a list of members of the value set of otherType.    if a.isDerivedFrom(otherType, METHOD_EXTENSION) then every element that   is valid for type a is not missing any required content or attributes   for otherType.        

      I'm satisfied with the resolutions of these issues.        

      >[mb] It's not a matter of do I like the name or not -- Dimitris had  indicated that  >he would like to see as much reuse as possible, and I agree.  I have raised  the  >inheritance issue several times -- the current proposal allows for this --  >quite honestly, I don't like having to specify  <Node><method ...></Node>  >either, but I do like the reuse that this approach affords us.    [ca] I'm all for reuse, but I like minimization better.  I tried to respond  to your inheritance issues  in a couple of messages.  The only piece of information that I see that is  necessary  to have for code generation is the interface in which a method or property  was  introduced.  If you needed to distinguish between Comment.data and  CharacterData.data  to generate the code then the nested elements would be a good approach,  but I forsee no need to do that (apart from the cast check which could be  done  as a distinct assertion).  I never had any intentions of adding, for  example,  <Element.nodeType/>, for example.    [ca] I actually was getting tired of using Node.getNodeName too.  Since with  the exception  of the getElementByTagNames and code's, all property and method names are  unique, the defining interface is unambiguous and doesn't need to be  expressed  in the test document.    [mb] I have no preference -- I wasn't looking directly at your schema when I  started typing.  Maybe it should be returnVar -- so that it is not confused  with  your next point.    [ca]I like having the consistancy with <assign/> where returnVar would no  feel right since there  is nothing being called.    [mb]  No, this was just an oversight.  Thanks for pointing it out.  Initially, we tried to get away without this -- since most of the methods  actually  operate on the returnVar of the previous invocation, the transformation  could do this for us.  Unfortunately, there are a few cases where you are  not operating on the returnVar of the previous invocation -- so I agree, it  is much cleaner to put it in -- does everybody like obj, or should it be  something else.  Maybe we could have the best of both, and put it in as  optional -- if it is there, use it; otherwise use the returnVar of the  previous invocation.    [ca]I don't like the complexity that "temporary variables" would add to the  code  generator or to the generated code.  You'd also have to be able to imply the  type of the temporary variable from the context and generate names for  the temporary variable.        

      Philippe Le Hegaret wrote:  > One solution would be to request the type in the XPath expression  > itself:  >  > evaluate(".//h1") returns  >  XPathResult.XPathSequenceResult    I don't have any problems with pushing any type coersion operations up into  the XPath query itself.  I think I suggested it myself a few times, just  didn't remember it this time.    > evaluate(".//h1[1]") returns  >  XPathResult.XPathSingletonResult(nodeValue)    I'm not sure about this, You would not want the result type changing based  on the number of nodes that matched a query and this is just a special case  of a query that never matches more than one node.  I think you've got to  flag that you want only a node and not a sequence outside of the query.    > Agree with the approach of valueTypeNamespaceURI/valueTypeLocalName.  > However, I still note that this solution forces the implementation to  > encapsulate the Nodes into XPathResult objects in case of a node set.    Yep.  To do otherwise, I'd think you'd have to have one pair of  snapshotItem/iterateNext for nodes and one for atomic values.        

      Some feedback on the DOM level 1 core testsFreek de Bruijn wrote:    >Would it be a good idea to combine multiple tests into one class, instead  of using a  > separate class for each test? This would reduce the huge number of classes  that are  > generated at the moment, making the test suite more manageable and  improving  > performance as well. The original NIST test suite has 15 classes  > (one for each interface), which is a lot easier than the 250+ classes we  have now.    I think that we want to maintain the definition of one test == one XML  document since that gives us a revision history of each test instead of a  revision history of all tests for a particular interface.  In addition,  hopefully we will have tests from different sources and trying to have  different authors working in the same file is just not a pleasant thing.    The one test == one Java file/class flows out of that since it is most  natural to do a case by case conversion using XSLT.  If it class bloat is  really a significant issue, we could address it.  But I can't see  performance being a crucial factor in running the suite as long as a run is  less than a few seconds.    >In tests characterdataappenddatanomodificationallowederr.xml,  >characterdatadeletedatanomodificationallowederr.xml,  >characterdatainsertdatanomodificationallowederr.xml, and  >characterdatareplacedatanomodificationallowederr.xml the tagname in the  following statement >should probably be "gender":    Did a global change of "geneder" to "gender"    >For tests characterdataappenddatanomodificationallowederr.xml,  >characterdatadeletedatanomodificationallowederr.xml,  >characterdatainsertdatanomodificationallowederr.xml,  >characterdatareplacedatanomodificationallowederr.xml, and  >characterdatasetdatanomodificationallowederr.xml the comment tells that the  third gender >element should contain an entity reference, but this is not  the case in the older version of the >staff.xml document.    I held off on this one till we can get a clarification about the resource  files from NIST.    >In documentcreateentityreferenceknown.xml, the type of newEntRefNode should  probably be >EntityReference (instead of Element):    Changed    >Several tests seem to test equivalence of two lists where one list contains  a String and the other >contains an Integer. Some tests also try to assert  null values of nodes with a String value of >"null" in a list, maybe it's  better to use assertNull. Since I don't have access to the cvs server  >(but who has ;-), could somebody fix these issues?    Changed those you mentioned plus one more (nodeclonenodefalse).    I did take some editoral liberty with documentcreateprocessinginstruction.  There was a discussion on the www-dom-ts mailing list much earlier  http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0020.html about the  inappropriateness of testing createProcessingInstruction with a target  ("XML") that is an illegal value per the XML spec.  I have changed the  target to an innocuous value "TESTPI".    Most DOM implementations will create a PI with an "XML" target, but MSXML  will reasonably raise an exception.  Joe Kesselman's suggestion  (http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0020.html ) was to  change the target and but not to add a negative test for an "XML" target  until the Level 3 effort where the appropriate behavior will be prescribed.        

      I've been laying the groundwork to move over the DOM L2 Events tests that I  wrote as part of the xmlconf effort.  Actually, testing an events  implementation is what drew me into this to start with.    I should be able to transliterate the xmlconf events tests shortly (both  from Java and from staff.xml to hc_staff.xml) and was intending to use that  as to test the enhancements to the code generation templates that will be  needed for any of the specs that have user supplied interfaces, such as  load/save or traversal/range.    Is anyone in the work group committing to Abstract Schema?        

        David Faure wrote:    >  >Hello,  >  >Many tests fail in Konqueror (and almost certainly Safari, maybe other   >browsers too) due to a capitalization issue.  >For instance hc_attrname.html expects "class" but since the document  >is HTML, we return "CLASS", as per the HTML specification.  >  >According to Curt Arnold this would be (from memory) because the  >spec says uppercase, but since Mozilla and IE return lowercase,  >the tests were changed to expect lowercase.  >  >But this completely screws up any browser that attempts to actually comply  >to the DOM spec, which is what this is all about, isn't it?  >If the tests accept that Mozilla and IE return lowercase, why not simply  >accept both (the "Mozilla and IE" way, and the "compliant" way, i.e. uppercase)?  >  >  >PS: congratulations for the improvements to the test suite. It looks much  >more complete now, it catches many little unimplemented things - which  >I'm fixing one by one :)  >  >    >  I'm digging into this right now, my recollection is fuzzy and I've not   been able to find the "spec doesn't say what it appears to say" message   that I recalled.    David's observation is about test failures with Level 1 Core hc_* tests.     hc_attrname is an example of one of the tests that is failing on   Konqueror where it checks the nodeName of a "class" attribute.  The   original version of hc_attrname.xml   (http://dev.w3.org/cvsweb/2001/DOM-Test-Suite/tests/level1/core/hc_attrname.xml)   which was checked in by dom_ts_2 (Rick Rivello?) on 8 March 2002   specified ignoreCase="auto" which would have required an HTML   implementation to return "CLASS" (as Konqueror is now doing).   On 10   June 2002 (as part of a massive update to the HTML compatible Core   tests), I checked in a modified version that specified   ignoreCase="false" that would require an HTML implementation to return   "class" (which is the case of the attribute in the source document).     By my reading of   http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-535378264,   ignoreCase="auto" (upper case for HTML implementations, lower case for   XHTML) would be correct.    I have recollections of ignoreCase being misused   (http://lists.w3.org/Archives/Public/www-dom-ts/2002Mar/0020.html point   5) in the initial L1 Core HTML compatible tests.  So the change from   ignoreCase="auto" to ignoreCase="false" might be a side-effect of a   global change to reset everything to the most restrictive setting with   the intention of later restoring those that should have had other settings.    Here is a listing of previous messages that touched on the subject of   case in HTML DOM's:    http://lists.w3.org/Archives/Public/www-dom-ts/2002Mar/0056.html  http://lists.w3.org/Archives/Public/www-dom-ts/2002Jun/0039.html  http://lists.w3.org/Archives/Public/www-dom-ts/2002Feb/0009.html  http://lists.w3.org/Archives/Public/www-dom-ts/2002Feb/0023.html  http://lists.w3.org/Archives/Public/www-dom/2002JanMar/0093.html  http://lists.w3.org/Archives/Public/www-dom/2002JanMar/0095.html  http://lists.w3.org/Archives/Public/www-dom/2002AprJun/0171.html  http://lists.w3.org/Archives/Public/www-dom-ts/2003Feb/0012.html  http://lists.w3.org/Archives/Public/www-dom-ts/2003Feb/0020.html  http://lists.w3.org/Archives/Public/www-dom/2001JulSep/0179.html      I'm continuing to explore this issue.        

      Typos free of charge, http://home.houston.rr.com/curta/sampleTest.ZIP        

      I've got the test suite working tolerably with Internet Explorer 5, MSXML 3.0 and JSUnit.  I'll try Netscape Navigator 6.x next and then IE5 + Adobe SVG Viewer.    To run the suite:    1) ant dom1-core-gen-jsunit  ' this will build *.html files for JSUnit in build/ecmascript/level1/core    2) Load lib/jsunit/testRunner.html in IE 5    3) Select Browse and load build\ecmascript\level1\core\alltests.html    4) Press Run    Conformance issues with MSXML 3:    documenttypegetentities and documenttypegetentitieslength:    Not discarding duplicate entities.    Several issues involve null strings as previously discussed here and on the www-dom mailing list.    domimplementationfeaturenoversion fails since "" is not recognized as a "unspecified" version number.  (See http://www.w3.org/2000/11/DOM-Level-2-errata#core-14)    domimplementationfeaturenull attempts to pass null as a feature argument and results in a type mismatch error.  I believe NN will also fail this test.  I do not believe this test is appropriate for bindings where null is not in the value space of String (i.e. appropriate for Java not for JavaScript).    entitypublicidnull, notationpublicidnull and notationsystemidnull all fail since the implementation returns "" instead of null.  Again I believe that NN will also fail these tests.    Several other issues that need more research.        

      I submitted a bug (http://nagoya.apache.org/bugzilla/show_bug.cgi?id=3132) on the problem that required us to replace the parser distributed with Ant with the Xerces parser.  It will apparently be fixed in the Ant 1.4 Beta 2 that is due out shortly.  At least with formal betas, we don't have to tell people to get nightly builds.        

      I updated test-to-java.xsl and DOMTestFramework.java in the CVS to correct the "if" production, the initial problem was that I had left off the mode="body" attribute on the template.    test-to-java.xsl page in CVS browser: http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/test-to-java.xsl    DOMTestFramework.java: http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/org/w3c/dom/testing/DOMTestFramework.java    Here is my (partially) corrected version of nodeCommentNodeName.xml:    <?xml version="1.0" encoding="UTF-8"?>  <!DOCTYPE test SYSTEM "dom1.dtd">  <test xmlns="http://xmlconf.sourceforge.net/domunit/2001-05-17" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance" targetURI="http://xw2k.sdct.itl.nist.gov/brady/w3c-dom/xml/nodeCommentNodeName.xml" package="net.sourceforge.xmlconf.domunit.dom1" name="nodeCommentNodeName">  <var name="doc" type="Document"/>  <var name="elementList" type="NodeList"/>  <var name="commentNode" type="Node"/>   <var name="nodeType" type="int"/>  <var name="commentNodeName" type="DOMString"/>  <load var="doc" href="staff.xml" willBeModified="false"/>  <childNodes obj="doc" var="elementList"/>  <for-each collection="elementList" member="commentNode">  <nodeType obj="commentNode" var="nodeType"/>  <if>  <equals actual="nodeType" expected="8" />  <nodeName obj="commentNode" var="commentNodeName"/>  <assertEquals actual="commentNodeName" expected='"#comment"' id="nodeCommentNodeNameAssert1" ignoreCase="false"/>  </if>  </for-each>  </test>      Partial list of changes: tagname in DOCTYPE, DOMString instead of String, fixed two mismatched variable names (elementList and commentNodeName)    Things left to fix:     test namespace:     My last transform built the test namespace by adding #test-definition to the spec URI.  For example:    http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001#test-definition    for DOM Level 1.  The test-to-java.xsl transform was rewritten so it doesn't depend on the namespace of the test, however the namespace could be used to select the appropriate version of interfaces.xml.    package name:    Since we will probably have to avoid name collisions for JavaScript, putting all the tests into one unnamed (or fixed named) package might be expedient.    I'll try to build up an Ant script that will download the DOM specs, generate the schemas, and transform and compile tests.  But that will be tomorrow.        

        Having attributes that allow you to readily determine if the type is   complex vs simple or named vs anonymous would seem to be helpful.  Such as:    readonly attribute boolean isSimple;  readonly attribute boolean isAnonymous;  (may be redundant with typeName   == null)    XML Schema Datatypes has equivalents for the DTD attribute types which   could be used instead of null and attribute type property.  The current   definition would not provide an easy way to distinguish between:    <!ATTLIST foo name CDATA #IMPLIED>    and    <!--  contrived, no namespace schema   -->  <xsd:schema>  <xsd:simpleType name="CDATA"/>  ...  <xsd:attribute name="name" type="CDATA"/>       An anonymous type could be nested many levels down in the content model,   a containingElements NameList attribute could be used to enumerate the   element names.  For the schema:    <xsd:schema targetNamespace="http://www.example.com/typeinfo">  <xsd:element name="hello">      <xsd:complexType>           <xsd:choice>               <xsd:element name="world">                     <xsd:simpleType>...</xsd:simpleType>               </xsd:element>    The TypeInfo associated with the world element in <hello   xmlns="http://www.example.com/typeinfo"><world/></hello>    Would have    typeName == null,  typeNamespace == null,  isSimple == true,  containingElements.getNamespace(0) == "http://www.example.com/typeinfo",  containingElements.getName(0) == "hello"  containingElements.getNamespace(1) == null (if elementFormDefault =   false) or "http://www..."  containingElements.getName(1) == world        

        Philippe Le Hegaret wrote:    >On Fri, 2003-08-01 at 04:35, Susan Lesch wrote:  >    >  >>White space is two words (see all prose and productions in XML 1.0  >>except one typo in 1998 and the Infoset since WD-xml-infoset-20010202).  >>I don't know why it wound up being one word in [element content  >>whitespace]. Do you?  >> isWhitespaceInElementContent [2] could (should?) be  >>isWhiteSpaceInElementContent and whitespace-in-element-content [3] could be  >>white-space-in-element-content. If Last Call is too late to change those,  >>perhaps at least the prose could match XML and the Infoset to say "white  >>space" (rather than "whitespaces").  >>      >>  >  >DOM Level 1 used two words (one occurence).  >DOM Level 2 used one and two words (one occurence for each).  >DOM Level 3 is also using both (several occurences for each). I don't  >have a personal opinion on that one. As an additional information,  >googlefight tells us that "white space" wins for the moment. I would  >propose following the Webster in the prose, and the Infoset for methods  >and attributes naming.  >    >  JAXP and Xerces's seem to exclusively use "Whitespace" instead of   "WhiteSpace" (in method definitions) and "whitespace" in prose.    The .NET frameword defines System.Xml.WhitespaceHandling,   System.Xml.XmlWhitespace and System.Xml.XmlSignificantWhitespace but   uses "white space" in the prose.     MSXML defined DOMDocument.preserveWhiteSpace.    Current usage favors "Whitespace" over "WhiteSpace" in property names   but is split on prose.        

        I started working on JSUnit after I got the HTML compatible Core tests done  10 days ago, but was only able to put a few hours into it.  Hopefully, I'll  be able to spend some more time on it this weekend.    What I would like to align JSUnit more with JUnit.  JSUnit mimics the most  common JUnit pattern of tests as functions, but does not mimic the pattern  of tests as instances of a test class.  Using instances should make it  easier to provide anciliary test information like document names,  configuration panels, and test URI's.    ----- Original Message -----  From: "Dimitris Dimitriadis" <dimitris@ontologicon.com>  Sent: Thursday, June 20, 2002 5:50 AM  Subject: Running DOM L2 HTML on IE and Mozilla      >  > All,  >  > The DOM WG has a face to face meeting next week, during which it would  > be good to be able to run the DOM L2 HTML TS on IE and Mozilla. SInce we  > are still dealing with framework issues and, if I remember correctly,  > the TS does not run as is on the new framework, what would need to be  > changed so that the L2 HTML TS could be run? Has anyone succeded in  > tweaking the JsUnit alpha in order to do that?  >  > /Dimitris  >  >        

      I raised a similar issue with DOM L3 XPath.  It could be difficult to distinguish between a DOMException and a ExceptionVAL in a weakly typed language since the code values overlap.  It would be beneficial if code values not used by other DOM Exceptions could be assigned to NO_GRAMMAR_AVAILABLE and VALIDATION_ERR.        

      I've set up a prototype test submission using SourceForge's tracker mechanism.  Dimitris, Mary and Fred have tech and admin rights (that is when they are logged on).  I've set it up where the public can submit and that all transactions email me (eventually it would go to a mailing list).  This is strictly to see if this is an adequate approach, not for real submissions which would go on a potential www-dom-ts SourceForge project.    I used Category to identify the Recommendation (Level 1 Core, etc) and Group to identify the interface.  Admins have the ability to set a resolution and status from fixed lists(Fixed, Invalid, Won't Fix, Duplicate, Accepted, Rejected...)  (Open, Closed, Pending, Deleted), respectively, that stretch to fit to most of our needs and then we can defined "canned responses" for anything that doesn't fit.    Review tests  http://sourceforge.net/tracker/?atid=393518&group_id=8114&func=browse          Submit new tests  http://sourceforge.net/tracker/?func=add&group_id=8114&atid=393518    A specific test  http://sourceforge.net/tracker/index.php?func=detail&aid=429498&group_id=8114&atid=393518    I'll be out of town this weekend, but should check email early Saturday AM CDT.        

        Joseph Kesselman wrote:    >  >  >  >    >  >>Would it be possible to state that WRONG_DOCUMENT_ERR should be  >>thrown on attempt to adopt a node into the same document?  >>      >>  >  >I'm not convinced that this is a Good Idea. It turns a mostly-harmless  >operation into an error condition, and prevents adoptNode from being used  >as a general safety net prior to insertion of a node obtained from an  >untrusted source.  >  >Making adopting a node into its own document be a no-op would seem to be a  >cleaner fix for Curt's concern about the side-effect... though leaving it  >as it now stands also strikes me as acceptable.  >    >  I'm not sure if adoptNode() as-is on a node's source document is   "mostly-harmless".  The preconception behind adopt node is that we are   willing to cannibalize the source documents in order to build our target   document.  In all cases expect the same document case, there is no   mutation to the one document that we care about.    If you were using adoptNode as a "safety net" on an insert operation, a   malicious caller may exploits adoptNode's behavior to move or remove   existing nodes by attempting to insert them insignificant places.    Maybe the best solution is to specify that adoptNode in this scenario is   equivalent to cloneNode.  If you just returned the source node, you   could get an IN_USE error on an attempt to insert that you could never   get if adopted from a foreign source.        

      Your question involves the specific behavior of one parser (my guess is  Xerces-J) and so it would be more appropriate to ask on the xerces-j-user  mailing list or another mailing list specific to the parser that you are  using.    The mechanics of creating a document object model from a XML document is  outside the scope of current Level 2 DOM specs, though it is in the scope of  the Level 3 Load and Save working draft.  However, that draft is only  experimentally implemented at this time.    There are a couple of issues with your sample, first the URL for the DTD  (C:\cs.dtd) is not a valid URL since backslashes are not allowed.  See  http://xml.apache.org/xerces2-j/faq-common.html#faq-1.  Some parsers are  forgiving when you use Windows UNC's, but that causes interoperability  problems.    Second, even if you aren't validating, some information from the DTD such as  entity definitions and default attributes are required to properly build the  DOM.  See http://xml.apache.org/xerces2-j/faq-write.html#faq-5    If you want, you could register an EntityResolver with the parser (assuming  Xerces-J or another DOM implementation layered on a SAX implementation)  which will get called to resolve the reference to the external DTD.  In the  resolver, you could return an empty stream that would make it look like the  file was empty which should allow parsing to continue.        

        The build.xml file has been updated for this working draft.  You will   need to delete lib\specs\DOM3-Val.zip or the build file will continue to   use the previous working draft.        

      > I believe it would be more useful to use constructs like <div  class="employeeid"> and <a class="domestic" href=2xx">  >    That would require more substantial changes to the body of the test, since  the set up in most of the tests use a getElementsByTagName() to locate the  element that is the focus on the test.  If there is not a one-to-one  correspondance of an existing tag name to an HTML tag name, then a different  mechanism would have to be used to locate the focal element and the existing  tests and the HTML compatible tests would diverge more than necessary.  In  addition, all tests that retrieved tag names would have to be changed to  retrieve that class attribute.    Also, I'm not sure why the differentiating on "class" would be more  "useful".      p.s. The file that I suggested last night does display identically in Opera,  Mozilla and IE.  It can be accessed from cvsWeb at  http://dev.w3.org/cvsweb/~checkout~/2001/DOM-Test-Suite/tests/level1/core/fi  les/hc_staff.html?        

      I'm still not quite clear what the motivation is.  If the motivation is to be able to run the suite on an implementation whose ECMAScript does not support try/catch clauses, then that places the requirement that the test framework not use exceptions internally either.    I wouldn't go through that effort for obsolete browsers, while it might be interesting to see how well IE 3 conformed to the HTML DOM, the benefit of the test suite is to improve the conformance of existing and forthcoming implementations.    De-selecting is already in place.  If you declare that a test requires entity preservation and the implementation expands entities, then the test will be skipped.  We might need to create some new implementationAttributes, but I'm not sure what would be needed.    The best user experience is to run all the tests for a particular spec and have no test failures or at least only a few.  The best way to achieve that is to improve the conformance of the implementations.  Dividing the test suites up, so the user only sees a few issues per section doesn't make things substantially better.        

        That will require defining of a framework utility class.  For example, to  support the events tests, I created a framework provided class named  "EventMonitor", that would capture all the events that were dispatched to it  and could be queried later.    For example, dispatchEvent10  ...  <!--   special type, implies construction    -->  <var name="monitor" type="EventMonitor"/>  ...  <load var="doc" href="hc_staff" willBeModified="true"/>  <!--  EventMonitor implements EventListener   -->  <addEventListener obj="doc" type='"foo"' listener="monitor"  useCapture="false"/>  <addEventListener obj="doc" type='"foo"' listener="monitor"  useCapture="false"/>  <!--   DocumentEvent and EventTarget methods   -->  <createEvent var="evt" obj="doc" eventType='"Events"'/>  <initEvent obj="evt" eventTypeArg='"foo"' canBubbleArg="true"  cancelableArg="false"/>  <dispatchEvent var="preventDefault" obj="doc" evt="evt"/>  <!--  EventMonitor method, gets all events where .phase = AT_TARGET   -->  <atEvents obj="monitor" var="atEvents"/>  <assertSize id="atCount" collection="atEvents" size="1"/>  <!--  EventMonitor method, gets all events where .phase = BUBBLED   -->  <bubbledEvents obj="monitor" var="bubbledEvents"/>  <assertSize id="bubbleCount" collection="bubbledEvents" size="0"/>  <capturedEvents obj="monitor" var="capturedEvents"/>  <assertSize id="captureCount" collection="capturedEvents" size="0"/>  </test>          You would want to do a similar thing for Load/Save, define a framework  implemented class that makes the tests as simple as possible.  I would  assume that the utility type for the load-save tests would implement  DOMInputSource and DOMOutputStream.  If you could provide a definition of  your ideal utility class, then I can work it into the markup language and  into the framework.  Otherwise, you could commit your tests, but comment  where something "magical" happens and we can fit a utility class to do the  magic things.      ----- Original Message -----  From: "Jeroen van Rotterdam" <jvrdam@xs4all.nl>  Sent: Tuesday, August 13, 2002 2:33 PM  Subject: byteStream, characterStream etc...      >  > Hi,  >  >  > Any idea how to obtain a:  >  > - DOMInputStream  > - DOMReader  > (see dom level 3 DOMInputSource)  >  > In the test framework ?  >  >  > How will we organize absolute URI's for parsing test documents ?  > (see dom level 3 DOMInputSource systemId)  >  > In the case of a systemId on DOMInputSource, the uri can't be a relative  > URI since the behaviour is then implementation dependant.  > Jeroen  >  > =====  > X-Hive Corporation  > Jeroen van Rotterdam, CEO  > e-mail: jeroen@x-hive.com  > phone: +31 10 7108600  > http://www.x-hive.com  >  >  >  >  >        

        ----- Original Message -----  From: "Vincent Hardy" <vincent.hardy@sun.com>  Sent: Wednesday, November 28, 2001 9:38 AM  Subject: Integrating the DOM test suite in the Batik test infrastructure      > Curt,  >  > We talked a while back about Batik and its DOM implementation. As you  > may know, we have our own test infrastructure into which I would like  > to integrate the DOM level 1 and DOM level 2 tests you have created in  > the DOM WG test effort.    Actually, the tests were primarily created by NIST.  I created most of the  implementation.      >  > However, I have poked around:  >  > http://dev.w3.org/cvsweb/2001/DOM-Test-Suite/  >  > and looked at your ReadMe.txt and I am not too sure what I am up to...    I didn't write and haven't read the readme.txt (it is pretty new) and open  for comments.    > It seems that your tools currently generate tests for JUnits a some  > other frameworks. Could you tell me if this was done by writing  > adaptors for these frameworks (but in the end you are running the  > same tests) or if you have different stylesheets  > for each framework?    There are distinct stylesheets for different bindings.  For example, there  are distinct stylesheets for Java and ECMAScript (and hopefully Python, C++,  C#, etc).  The Java tests are written to use an interface that abstracts the  functions required from the test framework.  The produced jar's can current  be run using either JUnit or Avalon testlet by matching the test jar with an  adapter jar (either junit-run.jar or avalon-run.jar).  Probably the most  appropriate approach would be to create a similar adapter for your regard  tool.  Look at the sources in either DOM-Test-Suite/java/junit or  DOM-Test/java/avalon and hopefully it will be moderately obvious.    >  > I'd like to scope how difficult/easy it is going to be to integrate  > your test suite into our regard (regression guard) tool.  >    Hopefully with an appropriate adapter classes you can use the standard  distribution .jars to test the Java implementation.    Philippe Le Hegaret was looking at testing Batik using the existing  JUnit/Avalon adapters by using the DOM 3 Load/Save interfaces.    I would also love to see a SVG/ECMAScript test suite.  I was thinking that  you could build a grid for a particular test suite and the squares would  turn green or red as the tests progress and hovering over a test would put  any messages in a text box at the bottom of the page.    > Thanks in advance for your advice.  > Vincent Hardy.        

          >>normalizeDocument: "Note that this method does not generate fatal errors"  >>  >>Should this be "does not raise exceptions"  >>      >>  >  >No, normalizeDocument does not declare exceptions anyway. This method  >generates DOMErrors instead. Since we have 3 categories of errors on  >DOMError, we needed to be explicit that receiving a fatal error DOMError  >when using normalizeDocument will never happen, unlike the load  >operation in LS.  >  >[other issues added to the issues list]  >  >Philippe  >   >  >  >    >  Without having spent much time with DOMError, my first interpretation of   "fatal error" is along the lines of:    System.out.println("Fatal Error");  System.exit(1);    "fatal DOMError", "does not dispatch fatal errors to the   DOMErrorHandler" or something along those lines would have provided a   clue that the traditional definition was not intended.        

      From DOM Level 1 Second edition (and L2 Core and L3 Core)  http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-F68  D080    "The value of this node, depending on its type; see the table above. When it  is defined to be null, setting it has no effect. "    (The original DOM L1 didn't have the "When it is defined to be null.." and I  didn't see the corresponding errata in the errata list, but its inclusion in  L1 Core Second Edition would imply that there was an errata.)    In the referenced table, Document, DocumentFragment, DocumentType, Element,  Entity, EntityReference and Notation are defined to be null.    Since NO_MODIFICATION_ALLOWED_ERR is mentioned as a possible exception when  the node is read-only, there is a ambiguity in the case where the nodeValue  is defined as null and the node type is readonly.    Document, DocumentFragment, and Element (except when a child of Entity or  EntityReference) nodes are clearly not readonly (and the corresponding tests  for these nodes were not an issue).    DocumentType Node (test nodeValue04):  http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-412266927    The sentence "The DOM Level 1 doesn't support editing DocumentType nodes."  (and similar in DOM L2) implies that a DocumentType node is not readonly by  nature, but only that DOM does not provide a mechanism to modify the  DocumentType.  It would apparently be acceptible for a implementation  specific interface to change the DocumentType node.  Since DocumentType does  not appear to be readonly, there is no conflict between the "defined as  null" clause and the NO_MODIFICATION_ALLOWED_ERR and test nodeValue04 seems  to be valid.    Notation Node (nodeValue08)    From http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5431D1B9,  "The DOM Level 1 does not support editing Notation nodes; they are therefore  readonly."    This EXACT sentence appears also in DOM L2 and L3 Core.  It seems out of  place for the DOM L3 to say that Notation nodes are readonly since there is  no way of editing them in DOM L1.    However, there at least seems to be the potential for conflict between the  "when defined to be null" clause and the raises NO_MODIFICATION_ALLOWED_ERR.    Entity node (nodeentitysetnodevalue, nodeValue07):    DOM L2 explicitly stated that Entity nodes were readonly (DOM L1 explicitly  mentioned children of entity nodes but not the Entity node itself).    Entity Reference node (nodeValue03):    Same as Entity node.    Some other links:  http://lists.w3.org/Archives/Public/www-dom-ts/2002Feb/0142.html  http://www.geocrawler.com/archives/3/318/1999/7/50/2480234/  http://lists.w3.org/Archives/Public/www-dom/1999JulSep/0022.html  http://lists.w3.org/Archives/Public/www-dom-ts/2001Oct/0029.html    I had thought there had been a definitive resolution from the WG, but I  couldn't locate on in the mailing lists.    If it was intended for exceptions to be raised on Notation, Entity,  EntityReference and DocumentType then the phase "When it is defined to be  null, setting it has no effect" would only be true for 4 of the 8 node types  where nodeValue is defined to be null.  Since the authors of the DOM spec  should be aware that many of the nodeTypes that are defined to be null are  also read-only, I'd take that as a clear indication that they wanted the "no  effect" clause to supercede the read-only exception.    Some of these tests (the ones that aren't nodeValueXX) have existed in the  NIST test suite for some time and previous versions of Xerces-J and Crimson  successfully passed them.  It seems undesirable (even if allowed under the  recommendation) for Xerces-J to change its behavior on these cases.  However, a definitive opinion would have to come from the WG.      ----- Original Message -----  From: <nddelima@ca.ibm.com>  Sent: Thursday, February 14, 2002 4:10 PM  Subject: setNodeValue tests      > I downloaded and ran the DOM test suite against XercesJ2.0.0 ( a nightly  > snapshot about a day or two old) and noticed the following new test case  > failures...  >  > nodeentitysetnodevalue  > org.w3c.dom.DOMException: Entity nodes are read only  > at org.apache.xerces.dom.EntityImpl.setNodeValue(EntityImpl.java:331)  > at  >  org.w3c.domts.level1.core.nodeentitysetnodevalue.runTest(nodeentitysetnodeva  lue.java:65)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue03  > org.w3c.dom.DOMException: Entity Reference nodes are read only  > at  >  org.apache.xerces.dom.EntityReferenceImpl.setNodeValue(EntityReferenceImpl.j  ava:316)  > at org.w3c.domts.level1.core.nodevalue03.runTest(nodevalue03.java:56)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue04  > org.w3c.dom.DOMException: DocumentType nodes are read only  > at  >  org.apache.xerces.dom.DocumentTypeImpl.setNodeValue(DocumentTypeImpl.java:36  9)  > at org.w3c.domts.level1.core.nodevalue04.runTest(nodevalue04.java:56)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue07  > org.w3c.dom.DOMException: Entity nodes are read only  > at org.apache.xerces.dom.EntityImpl.setNodeValue(EntityImpl.java:331)  > at org.w3c.domts.level1.core.nodevalue07.runTest(nodevalue07.java:60)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > nodevalue08  > org.w3c.dom.DOMException: Notation nodes are read only  > at org.apache.xerces.dom.NotationImpl.setNodeValue(NotationImpl.java:217)  > at org.w3c.domts.level1.core.nodevalue08.runTest(nodevalue08.java:60)  > at  org.w3c.domts.JUnitTestCaseAdapter.runTest(JUnitTestCaseAdapter.java:50)  >  > As per my understanding of DOM Level1 spec, the DocType, Notation, and  > descendants of Entity and EntityReference nodes are read only.  DOM Level  2  > goes further to state that Entity and EntityReference nodes and their  > descendants are readonly.  Calling Node.setNodeValue(...) on readonly  nodes  > should result in a NO_MODIFICATION_ALLOWED_ERROR which Xerces appears to  be  > doing.  So I'm not quite sure if these are valid failures.  >  >  > Thanks for all your effort and a great job with the test suite.  >  > Neil.  > IBM  - Toronto Lab,  > e-mail: nddelima@ca.ibm.com  >  >        

      From: "Richard Schwerdtfeger" <schwer@us.ibm.com> wrote:  > It appears that you are complaining about issues that are a direct result  > of the DOM working group including only part of the requirements I had  > placed on you for PF.    Could those requirements be made public or could you provide a link?  (I'm  not a W3C member)  I, like Ray, was very troubled by the current working  draft's proposal in that it seemed to have very obvious negatives but didn't  not seem to be adequate to solve any problems.    > >How does the user select these, by binary address?  >  > Again, when I wrote the requirements for the PF group, I had asked that  the  > event type be available.  >  > >How does the application construct the proper event, by trial and error?  >  > First, an authoring tool ought be able to do this. How might you expect a  > person to create an application without this capability? I also believe  > this may be implementation dependent.    So, say you had an SVG drawing embedded in an HTML page that connected mouse  over in the drawing events with a Java applet and a .NET applet, you'd  expect one accessibility tool to figure out what type of mouse movement you  would need to fake at bring up a specific dialog embedded in one of the  applets.    > >What if the user chooses to invoke functions that should never be user  > >accessible, such as mutation events.  >  > If you new the "type" of event you could selectively pick those which you  > fire. So what might happen if the mutation event was fired. ... probably  > nothing since the application would look to see what changed.    The mutation events contain both the old and new value, spurious mutation  events could have serious side-effects.    >  > >How does the DOM Level 3 script know which event type definition applies  > >to the function, or which listeners must only be invoked in concert?  >  > Another requirement that I had placed on DOM 3 for PF was to be able to  > have a description for each event. Currently, there is no mechanism in  > script to store a description of the event function executed so I when I  > met with PF for DOM 3 I had asked that the function name be stored. Lauren  > Wood thought this was not an unreasonable request at the time.    For non-script event listeners, the method name is always "handleEvent".    >  > These are all fine questions. The bottom line here is that the DOM working  > group only implemented part of the requirements. There is not much I can  do  > about that except that that if DOM 3 needs to be an interim step to where  > we want to go then lets take it. I would love to have had the DOM working  > group include all the PF requirements but you are going to do what you are  > going to do.  >  > What the DOM WG needed to do is:  >  >    Enumerate all events by type  >    For each event provide a description for future script writers to be  >    able to store a text description. For now DOM implementers should store  >    the function name here. (We had discussed this when I met at the face  to  >    face)  >    Allow the user to be able to fire each event based on the information  >    received from the type and description.  >  > What WCAG needs to do is:  >  >    Define industry standard techniques for storing functional descriptions  >    in web content.  >    Come up with standard descriptions for common functions.  >    Document a way for DOM implementers to retrieve them.  >    Work with standards bodies, like that for ECMA script, to hav them  >    accepted.  >  > People working in accessibility have had to fight for every beach head  they  > can get. If the DOM working group implements part of what we asked in  level  > 3 then it is easier to get the rest in 4.    I think everybody that has been involved in this thread is trying to be  helpful.  However, a bad partial solution doesn't help    The key questions that I have are:    a) Is the desire to make it possible for an accessibility tool to make  behavior embedded in hostile web content accessible?  Or is it sufficient to  enable web content that discloses information that can be used by an  accessibility tool?    b) Is the DOM the right place to do this?  Accessibility tools will still  have to mine the HTML content to find content that implies non-script  actions (like submit buttons).  Would it be reasonable to have content  provide non-visible elements that provide accessibility clues?        

      One more tweak:    If    <complexType name="b">         <extension base="a"/>  </complexType>    b.isDerivedFrom(otherType, METHOD_RESTRICTION) =  -     otherType == xsd:anySimpleType || otherType == xsd:anyType  +     otherType == xsd:anyType    b.isDerivedFrom(otherType, METHOD_UNION) =         false    b.isDerivedFrom(otherType, METHOD_EXTENSION) =  -      otherType == a || a.isDerivedFrom(otherType, METHOD_EXTENSION)  +      otherType == a || a.isDerivedFrom(otherType, METHOD_EXTENSION) ||  +          a.isDerivedFrom(otherType, METHOD_RESTRICTION)      b.isDerivedFrom(otherType, METHOD_LIST)         false        

      Transform test-to-java.xsl will lock up with some versions of Xalan-J on documentcreatecdatasection, I've put a pre-built documentcreatecdatasection.java in the tests directory and will copy it over instead of transforming.  I'm tracking down another bug in Xalan right now.        

        I've logged bug 441 for the (hopefully) non-controversial items and have   committed changes as described.    Andrew Clover wrote:    >Sander Bos <sander@x-hive.com> wrote:  >  >    >  >>I now finally ran the LS tests (from CVS) against our implementation.  >>      >>  >  >Coincidentally, I just finally ran them against mine too!  >  >Speaking of which, if anyone is interested in running DOMTS against Python  >implementations, this may be useful:  >  >  http://www.doxdesk.com/file/software/py/domts.zip  >  >    >  >>that can explain some of the errors (e.g. in the missing  >>parameter department), but not all...  >>      >>  >  >Indeed. I've got a whole bunch more issues, which I'll dump here on the list  >for the moment (because its a bit much to file single Bugzilla reports on).  >  >----  >  >DOMBuilderTest3: there is whitespace in test2.xml, but the test assumes it  >will be ignored for some reason. Also the final <nodeName> refers to  >secondElt1 when clearly it should be thirdElt. On a related note, is it  >safe to put a <?xml text declaration at the start of a file used by  >parseWithContext? As far as I can see, the LS specification says nowhere  >whether an 'XML fragment' is the same thing as an external parsed entity.  >(If it's not, files like this could fail due to an invalid processing  >instructions.)  >    >  I've fixed the thirdElt problem and stripped test2.xml of whitespace and   the XML declaration.  However, the question on exactly what parser with   context needs to support is a good one and worthy of independent tests.    >DOMBuilderTest5: the DOMConfiguration parameters are wrong, containing  >underscores instead of hyphens. Also supported-media-types-only is an  >optional feature - should check canSetParameter first.  >    >  The underscores are in the names of the local variables that contain the   string values.  The values themselves should have hyphens.  I have   changed the test to support the optionality of   supported-media-types-only.  Fully running the test would require   accessing an HTTP server that reports an unsupported media type, loading   a file from the file system, even if its extension is .pdf should not be   sufficient.  I've put in a temporary http://localhost URL.  Several of   the serialization tests also require a properly condifigured HTTP   server, however none of my available implementations can get far enough   to fail due to its absense.    >DOMBuilderTest6: I don't see where the spec states that parsing an empty  >input results in null - it only mentions null return values for async parsers.  >An empty Document or some kind of error might also be possible?  >    >    This should result in an fatal error being reported to the error   handler.  I've assumed that any fatal error during a parse would result   in a null return value, there is no provision for throwing a checked   exception (such as an io exception) and returning a partial document   would break XML's requirement that you can't ignore fatal errors.    However, the spec should be more explicit on the return value and/or   exceptions expected during parsing failures.  I'll try to flesh out more   failure tests and then raise the issue to the WG.  Oracle throws a   INVALID_STATE_ERR though it isn't a scenarion described in the   exceptions list, Xerces-J throws a NullPointerException.    >LSInput but actually creates one, effectively doing the same thing as  >DOMBuilderTest6.  >    >    Removed the extraneous createLSInput.    >DOMEntityResolverTest1: assumes external entities are actually resolved.  >Should add a 'validating' implementationAttribute.  >  >    >  Done.    >DOMImplementationLSTest1: has a hasFeature 'temporarily commented out' that  >should probably be put back in.  >  >    >  The earlier version of Oracle that I've been using doesn't return true,   though it appears to support async loading.  Since it is my only   available implementation with any support for asych loading, commenting   out the hasFeature allows me to actually run the body of the test.    >DOMImplementationLSTest3: assumes the implementation supports schemas. This  >is not required. Could raise NOT_SUPPORTED_ERR.  >  Done.    >DOMInputSourceTest3: invalid. Document.inputEncoding should not be affected  >by the original LSInput.encoding unless a byteStream was used.  >    >  The spec is explicit that LSInput.encoding should be ignored.  I've   split the test into two parts (3 and 6), one for characterStreams and   one for strings, since ECMAScript bindings don't support character   streams.  LSInput.encoding is set to UTF-8 but document.inputEncoding is   expected to be 'UTF-16'.    >DOMWriterFilterTest0: acceptNode's parameter should be 'nodeArg', no longer  >'n'. (does this require fiddling with TSML?)  >    >  LSSerializerFilter in the candidate recommendation extends NodeFilter in   traversal.  L2 Traversal's NodeFilter uses n as the parameter name.  Why   do you think it should be nodeArg.    >DOMWriterFilterTest1: tries to use SHOW_ATTRIBUTE, but this is not declared  >anywhere (should be in &filterVars;). Then tries to test for the acceptance  >of the attr1 node, but this should actually be filtered out according to the  >given LSSerializerFilter: unlike with LSParserFilters, Attribute nodes and the  >document element node are, I believe, supposed to be passed to acceptNode.  >Spec is currently unclear on what happend if a filter declines to be SHOWn  >an element; in Range 2.0's NodeFilter, this would result in a SKIP, not an  >ACCEPT, but I don't now if this is supposed to apply to 3.0 LS too.  >  >DOMWriterFilterTest3: SHOW_COMMENT again not defined in &filterVars;.  >    >    I've added SHOW_ATTRIBUTE and SHOW_COMMENT to dom3tests.ent.  If they   had been used outside of an inner class, they would have been detected   by schema validation.  However, in this case schema validation did not   catch them and since the inner class extended NodeFilter, Java didn't   complain either.    Both Xerces-J and XDK pass this test apparaently assuming that if not   shown an node the response is assumed to be accept.  This seems to be   the desirable interpretation, but if you don't think the spec is   explicit enough, please raise it as an issue in the spec.    >CharacterStream1, SystemId1: tries to create an LSParser with mode 0. No such  >mode, should be 1.  >    >    Done.    >LSParserConfig6: the description gives the wrong parameter name, it is in fact  >testing infoset. However, it tests to see whether you can directly set it to  >false - which should have no effect. To test it with a false value, set one of  >the other parameters it affects to the 'wrong' value.  >    >  Late night cut and paste.  I've modified the test for infoset's   peculiarities, please review.    >LSParserConfig7: tries to set namespaces true and then tests it is false. Oop.  >(ah, you noted this one already)  >    >  Done.    >LSParserConfig8, LSSerializer8: actually tests for xml-declaration instead of  >well-formed  >  >    >  Comment changed.    >LSSerializerConfig1: xml-declaration should be true by default, not false,  >surely?  >    >  Done.    >LSSerializerConfig2: normalize-characters is listed twice. So the result will  >be 22, not 23.  >    >    Done.    >LSSerializerConfig6: ignore-unknown-character-denormalizations shoud be true  >by default, not false. The canSet test and the values in the  >assertDOMException are hence also the wrong way around.  >  >    >  Done.    >----  >  >And here are the test results for pxdom 1.0-pre, WITHOUT fixing the tests  >for the above issues. The remaining failures are mostly to do with pxdom's  >lack of support for ResourceResolvers, which are omitted for the moment as  >they're a bit pointless until external entities are fully supported.  >  >PASSED 43 tests  >FAILED 21 tests:  >  DOMBuilderTest3: Assertion nextSibling_after_add failed. Expected elt2, go...  >  DOMBuilderTest4: Assertion previousSibling_after_insert_before failed. Exp...  >  DOMBuilderTest5: Calling setParameter on <pxdom.LSParserConfiguration inst...  >  DOMBuilderTest6: Assertion documentIsNull failed. Got <pxdom.Document inst...  >  DOMBuilderTest7: Assertion throw_ImplementationException failed. Exception...  >  DOMEntityResolverTest1: Assertion count_elt1_before_applying_entity_resolv...  >  DOMImplementationLSTest1: Calling createLSParser on <pxdom.DOMImplementati...  >  DOMImplementationLSTest3: Calling createLSParser on <pxdom.DOMImplementati...  >  DOMInputSourceTest3: Assertion encodingstringcheck0 failed. Expected ISO-8...  >  DOMInputSourceTest5: Calling parse on <pxdom.LSParser instance at 0x00BC50...  >  DOMWriterFilterTest1: Calling writeToString on <pxdom.LSSerializer instanc...  >  DOMWriterFilterTest3: Calling writeToString on <pxdom.LSSerializer instanc...  >  CharacterStream1: Calling createLSParser on <pxdom.DOMImplementation insta...  >  SystemId1: Calling createLSParser on <pxdom.DOMImplementation instance at ...  >  LSParserConfig6: Assertion setFalse failed. Got 1  >  LSParserConfig7: Assertion setTrueIsEffective failed. Got 1  >  LSParserConfig8: Assertion canSetFalse failed. Got 1  >  LSSerializerConfig1: Assertion xml-declaration-is-false failed. Got 1  >  LSSerializerConfig2: Assertion definedParameterCount failed. Expected 23, ...  >  LSSerializerConfig6: Assertion defaultValue failed. Got 1  >  LSSerializerConfig8: Assertion canSetFalse failed. Got 1  >  >    >        

        None of these are my implementations and in no way do I speak for any   of the development teams. In addition to Mozilla, the DOM L3 XPath   implementations that I could find:    Xalan-J (http://xml.apache.org) : Contains an experimental   implementation the 28 March 2002 L3 XPath Working Draft.  Since the   initial commit of the work last September, there has been no obvious   activity.  This implementation provides an XPathEvaluator that can work   with an arbitrary DOM implementation.  The DOM test suite has an   adapter to support Xalan-J + Xerces-J, but most tests fail due to   changes in the spec.    Pathan and Pathan-P   (http://software.decisionsoft.com/pathanIntro.html): Implementation of   8 Feb 2002 WD on that acts on a Xerces-C DOM implementation.    gdome2 (http://gdome2.cs.unibo.it): C implementation of 8 Feb 2003 WD    Saxon 7 (http://saxon.sf.net) contains an XPathEvaluator class that is   documented as being "loosely based on the proposed   org.w3c.dom.xpath.XPathEvaluator interface, though it does not actually   implement this interface at present."        

        There is no description of the expected behavior of the implementation   if an exception is thrown during an invocation of DOMErrorHandler.handle   or UserDataHandler.handle.  EventListener has the following as part of   its description:        Any exceptions thrown inside an EventListener will not stop      propagation of the event. It will continue processing any additional      EventListener in the described manner.    It might be appropriate for an exception thrown in the context of a   DOMErrorHandler.handle to be equivalent of returning false and for   exceptions thrown during UserDataHandler.handle to be ignored.        

      Dimitris Dimitriadis wrote:  > Given that ECMA is not a language that does not support exceptions, a  > system that is built with ECMA support and does not support exceptions  > cannot be considered conformant to the DOM. If a system does not use  > ECMA and therefore not exceptions, it is a non-issue for the DOM WG.  > Thus, the DOM TS framework will be rewritten and the workaraound must be  > removed.    Changed in DOMTestCase.js rev 1.14.  DocumentBuilder.isDOMExceptionCode(ex,code) now returns (ex.code == code).  This results in every test where an expection is anticipated to fail for all  COM-based implementations accessed from JScript.      > Default attributes: According to the DOM level 1 specification, it's not  > an error no to load default attributes. Later versions of the DOM  > require the explicit loading of default attributes. So, not loading  > default attributes should raise a warning, not an error.    If a test's expected behavior is deemed to not be required by DOM L1 Core  but to be required by DOM L1 Core, then the test should be removed from the  DOM L1 Core conformance test suite (that is removed from alltests.xml) and  added to the DOM L2 Core conformance test suite.  We also could create an  nonnormative test suite for tests failure of which is undesirable but would  not constitute a non-conformance.    However, I'm not sure what the magic phrase that makes providing default  attributes required in DOM L2 and optional in DOM L1+Errata.  It would be  good if DOM L3 could be extremely clear on the conditions, if any, that a  conformant processor could not provide attribute nodes for default values.    For example:  http://www.w3.org/DOM/updates/REC-DOM-Level-1-19981001-errata.html (Section  1.2 Interface Document)    >  > ---  >  > General reports: I did have a series of meetings with representatives  > from Microsoft and Netscape, mainly, where they indicated interest in  > our work and promised to help out as much as possible. Specifically:  >  > Netscape reiterated their commitment to help out on the framework, which  > we have seen in Bob's interest. I look forward both to resources and of  > course the tests we were promised.  >  > Microsoft wants a less discriminating loading mechanism of tests (I  > spoke to a representative of the IE for Mac group), and indicated that  > they will look into this and help out. One idea was to use DOM "level 0"  > for document loading to allow for testing of more than the currently  > supported browsers. Given Jason's previous work I feel certain we'll  > manage to run the tests smoothly in IE for both these platforms. I look  > forward to a submission of ideas and code.  >  > DOM WG: I (again) raised the issue of having to get more tests submitted  > from member companies, especially as we want to move along as a WG to  > reach Recommendation of DOM level 3. The DOM WG members promised to look  > into this and try to allocate resources. I also brought the issue that  > there have been very limited resources working on the DOM TS to the DOM  > WG's attention, indicating that this cannot continue indefinitely if we  > want to ensure some sound quality requirements for the DOM TS.  >  > W3C:  >  > Let's draw some experiences from the work done so far:  >  > I'm still personally very pleased to see that we not only managed to  > work together in a pleasant way, but especially that we produced  > something which we can all be happy with (it is of course subject to  > improvement). However, I want to flag for a few things I've observed:  >  > As a general principle, the companies interested in the DOM TS must  > allocate resources to the DOM TS group for solving specific issues (eg.  > loading, framework, assuring test quality, test submission and so forth)  > as it is in their immediate interest. As the coordinator of this effort  > I don't want to see any more drainage of individuals to solve platform  > and implementation specific problems (or framework issues for that  > matter), especially if representatives for those platforms and  > implementations do not allocate resources to aid in solving issues. We  > are all working in good faith and a spirit of cooperation, and I want  > this to be reflected in the resource allocation. Especially considering  > the obvious value a sound and thourough DOM TS has for implementors, I  > look forward to having a broader group than the current one working on  > future version of the DOM TS.  >  > The framework is now up and running, and there is a clear communication  > channel for submitting tests and discussing framework issues. Given that  > the release two weeks ago was our first one, I understand that issues  > were raised and now (hopefully) solved, and I look forward to discussing  > more issues and taking them to the DOM WG for resolving as they are  > raised.  >  > However, we need to steer clear of pitfalls in order to ensure that we  > release at regular intervals and with a decent coverage.  >  > One such pitfall, as I've indicated, is more tests. We already see some  > good intentions in this area, and I look forward to receving more  > submissions from organizations other than the ones who launched the DOM  > TS activity.  >  > Another pitfall is that we cannot ensure that the framework run on every  > single platform if we don't have enough feedback and resources from the  > platform's organization. It goes without saying that if the only option  > we have is to use a generic simple framework, it will be quite difficult  > for any given implementation to endorse any claim on conformance with  > the DOM Specification if the framework does not run a for that  > implementation and its representatives have not aided in ensuring that  > the particular implementation support the framework.  >  > If what needs to be done in order to avoid this is more frequent builds  > for testing the DOM TS so that members of the DOM TS group can gain  > insight, this is what we'll do. If there is anything else we can to do  > comment and constructively criticise the DOM TS, please advise (such as  > better documentation, better reporting from me, etc.).  >  > I'll get back to the list with a more detailed agenda of action items  > that need to be dealt with, and I'll propose a divison of labour which  > I'll be happy to discuss. In the meantime, I very much look forward to  > your comments on what I say above and again stress that we all have the  > best of intentions in this effort.  >  > Best,  >  > /Dimitris  >        

      In off-list discussions with Dimitris, I mentioned that we still had not  received a resolution for the createEntityReference issue needed to complete  the L1 test suite.  I had mentioned a vaguely recalled message from David  Brownell, but had not been able to locate the appropriate message.  It  apparently was  http://lists.w3.org/Archives/Public/www-dom-ts/2001Nov/0055.html   which discussed this issue in addition to the interpretation of "*" when  used as a namespace parameter.      >    Quite a number of the tests that try to verify behavior for  >    readonly nodes produce errors because instead of using  >   such nodes as found in the document, they try to create  >    new entity refs    Many of these tests intentionally use createEntityReference since the  read-only behavior would be untested when the processor or application  chooses to expand entity references.    >    ... such refs are created with no children.    They are in GNUJAXP, but not in Xerces-J.    >  (This is an area where IMO there are longstanding API  >   deficiencies in DOM.  First, you can't mark subtrees as  >   readonly.  Second, entities and entity refs, in their entirety.  >   I recall discussions late in DOM L1 to ensure it was legal  >   to never populate these nodes, yet these tests insist that they  >   must always be populated.)      From DOM L1 Core (Second Edition)  http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-392  B75AE    >createEntityReference  >Creates an EntityReference object. In addition, if the referenced entity is  known,  >the child list of the EntityReference node is made the same as that  >of the corresponding Entity node.    All the entity definitions are in the internal subset so the sections that  allow external subset entity definitions to be ignored for non-validating  parsers should not apply.      ----- Original Message -----  From: "Dimitris Dimitriadis" <dimitris@ontologicon.com>  Sent: Monday, January 21, 2002 4:02 PM  Subject: Re: Parsing an XML from a String      > This list is devoted to the DOM Test Suite, and is therefore not the  > right forum for your question. Please send your inquiry to www-  > dom@w3.org, details on http://www.w3.org/DOM  >  > Thanks,  >  > /Dimitris  >  > On Thursday, January 17, 2002, at 06:24 , Ravi Kiran wrote:  >  > >  > > Somebody Answer this...  > >  > >    I want to parse an XML from a String. i.e., i have an XML obtained  > > in the form of a String and i want to parse it. How can i do that, as  > > the DocumentBuilder class has methods to parse from a File,  > > InputStream, InputSourse, etc, but not with a String. Please help me...  > >  > > Ravi.  > >  > >  >        

      Copying xalan.jar, xerces.jar, xml-apis.jar and xsltc.jar to the Ant 1.4.1  bin directory allowed the style task to run, but it still fails for  alltests.xml and for random other tests either with a can't load document or  Unknown error in XPath.    The Unknown error in XPath thing (delete tests/level1/core/alltests.xml to  move to other tests) is strange in that it does not occur when invoking  Xalan from the command line, but does occur from Ant.    The build process is a good stress test for Xalan, but currently 2.2D14 is  not a viable option for domts building.        

      I've added three files to the xmlconf CVS that I'm contributing to the DOM TS effort:    dom-to-dtd.xsl - generates an DTD from a DOM spec  wd-dom.patch - adds the missing xmlns:xlink attribute to wd-dom.xml when applied with CVS's patch utility.  build.xml - Ant build file    These can be downloaded from    http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/build.xml  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/dom-to-dtd.xsl  http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/www-dom-ts/wd-dom.patch    Ant's <style> task had problems with external entities, however using an Ant nightly build and the last Xalan release and the accompaning Xerces parser, seemed to work.    To set up Ant:    Download a recent nightly binary and optional task jar of Ant 1.4 from http://jakarta.apache.org/builds/jakarta-ant/nightly/2001-06-27/      Expand Ant and rename top level directory from jakarta-ant-1.4alpha to ant1.4    Place *optional.jar in /ant1.4/lib directory and remove jaxp.jar and crimson.jar    Download Xalan-J 2.1 from http://xml.apache.org/dist/xalan-j/    Extract xalan.jar and xerces.jar and place in /ant1.4/lib    Add jdk1.x/bin, /ant1.4/bin and cvs or wincvs to path    Set ANT_HOME=x:/ant1.4  SET JAVA_HOME=x:/jdk1.x    Running Ant    c:/>ant dom1-init    Will download dom1.zip, extract xml sources and add missing xmlns:xlink attribute.  Will be run automatically by any of the following tasks.    c:/>ant dom1-schema  c:/>ant dom1-dtd    Will generate dom1.xsd or dom1.dtd in ./build directory    c:/>ant dom1-interfaces    Will generate dom1-interfaces.xml in ./build directory    c:/>ant dom1-subjects    Will generate dom1-subjects.rdf in ./build directory        

      > > The name seems inconsistent with the names for other Document related  > > interfaces.  Other specs typically use Document[SpecName],  > > DocumentEvent, DocumentRange, DocumentViews, DocumentTraversal, for  > > their augmentation of the Document.   Though it may not be the most  > > intuitive naming convention, naming the interface DocumentXPath would  > > be consistent with the other DOM specs.  > >  > The evaluation of XPath expressions is available in XPathEvaluator . A  > Document which implements the XPath module will be castable using  > language-specific mechanisms to XPathEvaluator, which will provide  > evaluation of XPath expressions with no special extension functions or  > variables. XPathEvaluator implementations may be available from other  > sources that provide extension functions or variables.    Not a big issue, but did seem to be a departure from the other DOM specs.    > > a) Types corresponding to the 19 primitive XML Schema data types be  > > defined for each of the bindings.  For example, that for the Java  > > binding, xs:dateTime be represented by java.util.Date for the Java  > > binding, that xs:date be represented by the starting instant in a  > > java.util.Date.  Since the identity of the 19 types are fixed since  > > XML Schema datatypes is a recommendation, these bindings could be  > > defined now, though it would not be possible to get a java.util.Date  > > from evaluate without an XPath 2.0 compatible query.  > >  > It is not clear to me that there is a real advantage in forcing people  > to invent so many different new types (in most cases) to handle all  > these different schema types in Java, ECMAScript, etc.  Where there are  > not already native language types created to handle them, I do not  > believe it does much good to map them to anything.  Many, for example,  > work much better as string or the specific application may have some  > specific type it wants to put them into.  >  > If we are going to go to all the trouble of converting the text which is  > in the DOM into 19 different objects representing schema types, I would  > think this should be done in a library outside of DOM XPath.  We have  > the 1.0 common types covered as  conveniences for XPath 1.0, but I say  > let additional XPath 2.0 simple types just evaluate as a String and then  > call some schema conversion routine if something else is desired, that  > can also be called by those not using XPath.    If I have an XPath expression like "number(@val)"  and an appropriate object  is returned, then I can do formatting appropriate to the type.  For example,  do locale-sensitive number or date formatting.  If I have no way of knowing  what the type of the query result is, then I have to treat everything as a  generic string.    An XPath 2.0 will have to have these conversions as part of its  implementation since comparisions would be type aware.  For example:    xs:date(@time1) = xs:date(@time2)    would return true as long as the times values were identical even though  their lexical representation could be radically different.  The type of the  expression would be known within the XPath evaluator, converting it back to  String would just toss the information.    However, defining the mapping between schema types to platform types is  probably better done somewhere else.  For XPath 1.0, all you would need is  to state the obvious mapping for XPath 1.0, number == Double, string ==  String, boolean == Boolean    > > b) That feature strings are specified so that you can determine the  > > version of XPath expression supported.  > >  > Possibly, but I am not yet confident enough that XPath 2.0 can even be  > evaluated using these interfaces, given significant differences.    I would think that any query that was expressed as a string and operated on  a node could be be evaluated using these interfaces.    >  > > Use Case 1: Immediate evaluation with static result or node set  > >  >  ....  > Again, on the implementation side, there is a great advantage in getting  > this result incrementally, because a list can be huge.  Wrapping an  > object that implemented NodeSet could turn out to be much less  > efficient, because case 1 has to still have a snapshot after mutation,  > whereas case 2 does not.    What I was trying to communicate here is that applications have an essential  requirement, eventually getting the results of the query, but also a desire  to remain responsive which the could be better fulfilled if the query  processor knew a little bit more about how it app was going to be accessing  the data.    It is definitely tolerable that an implementation only implement one  execution strategy.  However, if an implementation wanted to support  multiple execution strategies, then it would be extremely helpful if the  caller was able to suggest what strategy would be best for its use.    Actually, thinking about is some more me realize that I still wanted more,  like a timeout (say if the query was against a remote data store and might  stall) or a limit to the return set.  That got me looking at classes like  java.sql.Command and how they approached the same problems.    The following snippets basically remove the evaluationStrategy and  invalidate flags from the evaluateAsNodeSet and createExpression methods and  add properties to the XPathExpression patterned after those in  java.sql.Command.  This allows apps that don't want to bother tailoring the  executation to use the XPathEvaluator interface calls and apps that do want  to suggest how the query should be executed can create an XPathExpression  and set properties to appropriate values.      public interface XPathEvaluator {      public NodeSet evaluateAsNodeSet(String queryLanguage,                                                         String expression,                                                         Node contextNode,                                                         NamespaceResolver  namespaceResolver,                                                         XPathSortCriteria  sort)                                                         throws  XPathException;  ...        public XPathExpression createExpression(String queryLanguage,                                                         String expression,                                                         NamespaceResolver  namespaceResolver,                                                         XPathSortCriteria  sort)                                                         throws  XPathException;  }    public interface XPathExpression {      //      //   roughly equivalent to properties of java.sql.statement      //        //      //    nodes beyond the max node could get truncated      public int getMaxNodes();      public void setMaxNodes(int maxNodes);        //      //   Double.INF for no timeout, 0 for immediate return if no result  present      //      set throws an exception if implementation can't      //            execute asynchronously      public double getTimeout();      public void setTimeout(double seconds) throw XPathException;        //      //   a small fetch size (1) would suggest lazy eval, large immediate  eval      //      public int getFetchSize();      public void setFetchSize(int nodeCount);        public static final short FETCH_UNKNOWN = 0;      public static final short FETCH_FORWARD = 1;      public static final short FETCH_REVERSE = 2;        public short getFetchDirection();      public void setFetchDirection(short ordered);        //      //   allows specification of mutation policy      //      set would throw exception if data source (like an remote  database)      //          can't notify of changes after the query is executed      //      public static final short CAN_INVALIDATE = 0;      public static final short MUST_INVALIDATE = 1;      public static final short STATIC = 2;      public short getMutationBehavior();      public void setMutationBehavior(short flag) throws XPathException;          //      //   the previous evaluate methods      //      public NodeSet evaluateAsNodeSet(Node contextNode) throws  XPathException;      ...    }    > Having this expressed as a specific interface is not equivalent to a  > NodeSet and an EventListener, because there is no way for an interface  > to specify that it needs a NodeSet that is not stale but reflects an  > expression evaluated on the current hierarchy, as is essential for many  > use cases unless this constraint is expressible as an interface.    I'm in favor of being able to declaratively state that you want the result  set to be invalidated since the processor can optimize its behavior based on  that information.  However, if that capability wasn't provided and Events  was implemented, something like the following would produce the same effect    class MyActiveNodeSet implements NodeSet, EventListener {     public MyActiveNodeSet(Node contextNode, NodeSet resultSet) {        this.resultSet = resultSet;        Document doc = contextNode.getDocument();        //   capture any mutation events in the document        ((DocumentEvent) doc).addListener("DOMSubtreeModified",this,true);     }     public void handleEvent(Event evt) {        resultSet = null;     }     public Node item(int index) throws DOMException {         if(resultSet == null) {            throw new DOMException(INVALID_NODESET);         }         return resultSet.item(index);      }      ...  }    However, not all implementations can implement result set validation (or at  least can't do it economically).  Maybe it needs to be tri-state, one  setting requires the result set to be available indefinitely, one setting  requiring the result set to be invalidated on any document mutation and a  third that can invalidate the result set but isn't required to.    > This is implementation, which should produce the same behavior, so  > making it a hint is OK, but I am not sure why the application should  > care much at all how the implementation chooses to do it.  It seems to  > me that the application is very likely to make the wrong choice.  >  >  Combine that likelyhood with the likelyhood that the implementation  > does not give the application a choice and I don't see the point.  The  > application's primary concern is that it gets the result, and the  > implementation's concern is to make it available as efficiently as  > possible balancing various factors.  >  > The issue of a stateful has been discussed and typically hasn't seemed  > to be a big concern to many people.  In your example, you created a  > state object anyway -- although if the code is supposed to be Java, last  > time I checked, Integer was an immutable class.  Try an integer array  > size 1 instead.  I think it is simpler to keep the state in the iterator  > if we want to control order of access and not worry about what happens  > if someone keeps a random key value around and tries to use it later.    It was the C++ programmer in me that wanted to do the Java equivalent of    Node* iterator(int*);    I was trying to avoid    Node iterator(Node prevNode);    which I thought might be too expensive if you had to marshall the prevNode  to a remote machine.    > > Interface NamespaceResolver:  > >  >  In an earlier version of the API, we used an Element instead of a  > NamespaceResolver.  For many, getting it from the context node will be  > the only use case (whenever the XPath string comes from a document, such  > as XSL, XLink XPointers, etc.)  Creating a custom factory for various  > bindings is a convenience of value for some applications, but it is not  > clear to me how many.  Many applications may prefer to just parse a  > namespace definition tag from a constant string that has all the desired  > namespaces letting DOM supply the map or write a very small wrapper on  > their own favorite object.  I think it is not burdensome to leave  > alternative map creation up to the application, which was the point of  > having the interface, so the application could do it in any way it  > needed to.    Two different use cases here    a) query is interpreted in the context of a node    For example, evaluating a query from an XML document    b) query is expressed independently of a node    For example, finding every {http://www.w3.org/2001/XMLSchema}:element node  in a collection of documents regardless of the prefix used in those  documents.    For use (a), the most convienient method would be just to pass the context  Node into the function.   For use (b), the most convienient method would be  to pass a platform appropriate map interface (java.lang.Map or  System.Collection.IDictionary).    My personal take was that use case (b) would be more prevalent.    These don't have a common ancestor, you could use an Object parameter and  let the implementation sort out how to construct its internal resolver.    Case a: query based on document prefixes    //   counts complexType elements from whatever namespace is associated  //      with xsd in the document  double count =  xeval.evaluateAsNumber("XPath","count(//xsd:complexType[@name]"),doc,doc);    //  //   counts complexType elements from schema namespace  //       regardless of document prefix mapping  Map nsMap = new HashMap();  nsMap.put("xsd","http://www.w3.org/2001/XMLSchema");  double elementCount =  xeval.evaluateAsNumber("XPath","count(//xsd:element[@name])",doc,nsMap);    The code inside of the implementation of the evaluate methods could do  something like:    double evaluateAsNumber(String lang,String query,Node context,Object  nsResolver) {  Map nsMap;  if(nsResolver instanceof Map) {     nsMap = (Map) nsResolver;  }  else {     if(nsResolver instanceof Node) {         nsMap = new NsMapOnNode((Node) nsResolver);     }  }  ...  String nsurl = nsMap.get(nsPrefix);  }    public class NsMapOnNode implements Map {      public NsMapOnNode(Node node) {         this.node = node;     }     public Object get(Object key) {         return node.lookupNamespacePrefix((String) key);     }  }    > We need the invalid error.  I think any asynchronous implementation must  > behave as though it is synchronous, blocking until the necessary data is  > available.    Blocking would be the dominant case, but there would also be cases where you  want to peek if something is ready and if not continue to doing something  else and check again.  With the java.sql.Command type approach, this would  be accomplished by setting the timeout to a small or zero value (+INF would  be for indefinite waits) and if the node isn't ready in time then you would  get a timeout code in the DOMException.    > It is not clear to me that in most cases the application should care how  > the evaluation occurs.  The implementation should always do its best.  I  > would forget these for now.    Maybe not in most cases, but in some cases, it would be critical to the  responsiveness of the application.    > I do not fully understand your intent with "PREVENT" but I find many  > problems with the idea.  I know of no language where you can "force a  > garbage collect to make sure that an unused NodeSet is not blocking  > them."  Java only permits hints, and if you have ever monitored what it  > does, it seldom collects all or even most of the available objects, even  > after dozens of calls in a tight loop.  It is also historically  > ill-fated to try to tie anything to the garbage collector because it can  > cause bizarre deadlocks and other problems.    PREVENT came from trying to achieve symmettry with INVALIDATE, there are two  ways that you could keep the result set from being out of synch with the  document (when that is important to you), either invalidate the result set  or prevent the document from changing.  However, if you write-locked the  document, unreferenced but unreclaimed result sets could keep the document  locked longer than appropriate, hence the GC comment.    I didn't want to add an explicit Close() command since that would not make  sense for NodeList and other things that are conceptually NodeSets.  However, that suggests that we might clear things up by using distinguishing  XPath query result sets from existing interfaces like NodeList and  NamedNodeMap that are conceptually Node set and NodeIterator in DOM 2  Traversal and Range.    //  patterned after java.sql.ResultSet  //  public interface XPathResultSet {       public Node absolute(int index);       public void afterLast();       public void beforeFirst();       void close();       public Node first();       public int getIndex();       public boolean isAfterLast();       public boolean isBeforeFirst();       public boolean isLast();       public boolean isFirst();       public Node last();       public Node next();       public Node previous();       public Node relative(int offset);  }    > Let's use different interfaces for different query languages -- even  > perhaps for XPath 2.0.  It will be simpler for users rather than trying  > to overload this API with things it doesn't need trying to anticipate.    Creating duplicate implementations of result set processing  code depending on the language that I used to formulate the query  would not be a good thing.  If different API are used to build the  queries, they should at least share the same result sets interfaces.    However, compared with the complexity of parsing the XPath  or other query, checking if the queryLanguage is recognized  seems trivial, especially if null indicates XPath.    > If there isn't a single document order most are happy with, then let's  > leave sorting up to some other layer.  The reasons for supporting  > sorting is that it seems common so having it easily available is good  > and the implementation might be able to produce the nodes in that order  > anyway.  Making the order user defined seems to make it not easy for the  > user and very unlikely that the implementation could know it was  > naturally producing them in an order that matched the order.    Doing it in the XPath processor seems the appropriate place since it would  typically involve ordering by the value of the result of an XPath expression  on each member of the result set, would require a substantial amount of code  and could be considerably less efficient if done in the application and the  logic is already available if the XPath engine is lifted from an XSLT  processor.        

        I've added targets to build.xml which will allow schema validation of   tests using Xerces-J, for example, dom3-ls-schema-validate-tests.  I had   been using MSV to validate the tests.  I had to make changes to   dom-to-xsd since MSV accepted schemas that Xerces-J flagged as violating   schema constraints.    I also added targets (dom1-gump, dom2-gump, dom3-gump) that generate the   DTD and schema for the corresponding level, validate the tests against   both and generate the jars.  I'm following up with Stefan Bodewig to see   if we can get added to Gump's (http://jakarta.apache.org/gump) automated   build system, so that build breakages get flagged early.        

      > Actually EntityReferences doesn't exist in the XPath data model, so I  think  > it's puposly left out. However the entityreferences children are inlined  > (and merged with andjecent textnodes) so _they_ still exist in the tree.  The  > EntityReference it self doesn't exist though.    Entity References are normalized out (as are CDATASections) of the XPath  data model, but they may be represented as distinct nodes in a DOM.  If I  have a fragment like:    <Description>&boilerplate;<!CDATA[[ >>>]]>Some Text</Description>    and entity references and CDATASections are not normalized, then I don't  have a single node that corresponds to Description/text(), so DOM XPath  allows any of child nodes of Description to represent the entire XPath text  node.  However, Entity Reference's were not listed in the list of acceptible  context nodes, so if you passed descriptionElement.firstChild as the context  node, the query would execute if entity references were expanded, but fail  if they were preserved.    > This is exactly how TransforMiiX is designed (the XSLT/XPath engine used  in  > mozilla). We have one common interface similar to XPathResult and separate  > implementations for each result type.  >  > What we have had to do (Peter van der Beken has made a preliminary  > implementation of DOM XPath) is to have a wrapper that holds an internal  > object which can be of any result type. However this defeats the entire  > purpose of reuse it's only the wrapper that gets reused, the internal  object  > is dropped and recreated on every evaulation.  >  > One way to help this situation without dropping support for reuseing of  > XPathResult objects would be to allow the implementations to return a new  > XPathResult if it is not able to reuse the supplied XPathResult. OTOH this  > might create interopability problems.    I've just got to think that the true performance benefit of explicit  XPathResult recycling is either negligible or imaginary.    If you have a preliminary implementation, we could look at starting the test  suite.  Is it accessible from ECMAScript in your experiemental build.    > I think that this sounds like a really good idea. We are just about to  make  > our XPath engine to produce sorted nodeset instead of unsorted ones, since  > much time can be saved if the nodeset is sorted during evaluation rather  > then after. This save would be totally lost if we are not told if the  > nodeset is to be sorted until after evaluation.    The ORDERED / UNORDERED were about preserving document order in a query  since fabricating a document order in a datastore that doesn't have a  structural order (like a query against a database) might be expensive or  multiple threads could be querying the tree and the first found might not be  the first in document order.    I had mentioned in an earlier post but forgotten that a sort parameter  (along the lines of xsl:sort) in an XPathExpression would be greatly  desired.  If such a sort parameter were added, then UNORDERED would skip  evaluation of the sort clause.    > While I don't like the getSetIterator or getSetSnapshot functions either,  I  > don't think putting it all in the same interface is ideal either. I  propose  > that XPathSetSnapshot and XPathSetIterator iterator inherit XPathResult:    There seemed to be a design philosophy to avoid interface coersion, hence  the putting all the result types in one monolythic XPathResult set.  If  avoiding interface casting was not a design goal, then the appropriate  approach is to put all type specific functions into distinct interfaces,  like :    interface XPathResult  {  readonly attribute short       type;  }    interface XPathResultNumber : XPathResult  {  readonly attribute double numberValue;  }    interface XPathResultString : XPathResult  {  readonly attribute DOMString stringValue;  }    interface XPathResultBoolean : XPathResult  {  readonly attribute boolean booleanValue;  }    > interface XPathSetIterator : XPathResult {  >   Node               nextNode()  >                                         raises(DOMException);       readonly attribute boolean valid;  > };  >  > interface XPathSetSnapshot : XPathResult {  >   Node               item(in unsigned long index);  >   readonly attribute unsigned long   length;  > };    It seems like an interface coercion has to be cheap compared to an XPath  evaluation, so the desire to have one big interface may be misguided.    >  > On a separate issue, I think that XPathSetIterator need some way to detect  > if it still is valid without causing an exception to to be thrown. I  propose  > that an isStillValid() function is added to the iterator. The function  > returns a boolean indicating if the nodeset is still valid. The function  > returns false if a call to nextNode() would throw an INVALID_STATE_ERR  > exception. The function does not indicate if a subsequent call to  nextNode()  > would return a non-null value or not.    I'd agree on that, though probably a "valid"  boolean attribute on  XPathSetIterator would be better than a method.        

        Benjamin C. Chang wrote:    >  >>In the description of continuousValidityChecking, "the implementation if  >>free" should read "the implementation is free".  >>      >>  >  >Changed.  >    >    Satisified    >    >  >>In addition several parts of that description are awkward.  "continuous  >>checking ... is enforced" might be better as "the validity of the  >>document is continuously enforced".  "If the document is invalid" seems  >>to have gotten separated from the sentence on setting the attribute.  >>      >>  >  >Changed to read:  >"AN ATTRIBUTE SPECIFYING WHETHER THE VALIDITY  >OF THE DOCUMENT IS CONTINUOUSLY ENFORCED.  WHEN THE ATTRIBUTE IS SET TO  >TRUE, THE IMPLEMENTATION MAY RAISE CERTAIN EXCEPTIONS, DEPENDING ON THE  >SITUATION (SEE THE FOLLOWING).  THIS ATTRIBUTE IS FALSE BY DEFAULT."  A  >listing of the exceptions on setting  >follo  >    Satisified    >ws the description.  >  >    >  >>getDefinedElementTypes:  >>  >>In the description of DocumentVAL.getDefinedElementTypes, "element's  >>namespace" appears repeatedly, but no clear definition of what element  >>might be involved.  There is an explicit namespaceURI parameter and  >>there might be a document element that has a namespace, but not quite  >>sure what element's namespace would be.  >>      >>  >  >The description for getDefinedElements now reads:  >"RETURNS LIST OF ALL ELEMENT INFORMATION ITEM NAMES  >OF GLOBAL DECLARATION BELONGING TO THE SPECIFIED  >NAMES  >    Satisified    >PACE".  >  >    >  >>validateDocument:  >>  >>How would warnings be issued?  There appears to be an interface name  >>missing between "[DOM Level 3 Core]" and "interface"  >>      >>  >  >The method makes use of the passed-in error handler, as described  >in the DOM L3 CORE DOMConfiguration interface; warnings are  >handled through this exception handler.  There is a link to this  >interface now.  >    >    A return value from the validation would be useful when the only   interest was if the document was schema or DTD valid.  Without an   explicit return value, it might be inferred that validation could be   asynchronous.    >    >  >>isNodeValid:  >>  >>      >>  >>>Determines if the Node is valid relative to the grammar.  >>>It doesn't normalize before checking if the document is valid.  >>>        >>>  >>"document" in the second sentence looks like a typo.  >>      >>  >  >Corrected.  >  Satisified    >>allowedChildren:  >>  >> > Note that if no context of this element exists, then this is NULL; it  >>is an empty list if the element is not in the document tree.  >>  >>Not clear on the distinction between "no context" and "not in the  >>document tree".  >>      >>  >  >They are the same; only "no context" is now referred to.  >    >    Satisified    >>canSetAttributeNS:  >>  >>Uses a qualifiedName parameter when similar methods use localName.  >>      >>  >  >This is modeled after setAttributeNS, so it will remain "qualifiedName".  >    >  Satisified    >>canSetAttributeNode:  >>  >>"with respect to the validity check level" is unique to this method.  >>      >>  >  >This phrase was deleted.  >    >    Satisified    >    >  >>contentType:  >>  >>The values for EMPTY_CONTENTTYPE etc are not defined.  An underscore  >>between EMPTY_CONTENT_TYPE would be more readable.  >>      >>  >  >A definition group ContentTypeVAL with all the defined constants  >was added.  VAL_EMPTY_CONTENTTYPE is one of them; we decided  >not to add the extra underscore.  >    Satisified    >>isElementDefined and isElementDefinedNS:  >>  >>Neither method depends on the target element.  Wouldn't these be better  >>on NodeVAL?  >>      >>  >  >No, an example of such a dependency would be the root element of a  >document.  >    >    I guess they could depend on the target element for locally scoped   element names.  However, I don't see an obvious reason these could not   be implemented on Node.  Calling Document.isElementDefinedNS(ns, "foo")   would be slightly different that    doc.documentElement.isElementDefinedNS(ns, "foo") as the later would   include elements defined in the scope of the document element.      Alternatively, maybe a methods on the NameList's returned from   allowableChildren et al would be better.  Would it be useful to   determine if an element was defined in the grammar but not a potential   child of the element?  Would isElementDefined[NS] return true if the   name was defined as a locally scoped child element of some potential   descendant of the current element?    I'm uneasy about this one.    >    >  >>allowedNextSiblings, allowedPreviousSiblings:  >>  >>There aren't parallel methods that would determine if a character node  >>could be a previous or next sibling unless there is a special element  >>name for character nodes.  >>      >>  >  >These could be done for character nodes via the canInsertBefore operation.  >    >    Satisified    >>canDeleteData, canReplaceData, canInsertData:  >>  >>Would assume that this could throw the same exceptions as deleteData,  >>replaceData and insertData  if the offset or count parameters are out of  >>range.  >>      >>  >  >Yes, they throw the same DOMException; this is listed now.  >    >  Satisified    >>NameList:  >>  >>I could not locate a definition for NameList.  If it is defined in  >>another DOM spec, it should have a reference.  If not, then it is  >>underdefined.  How do you represent a namespace qualified name in a  >>namelist?  >>      >>  >  >Yes, a link to DOM L3 has been added.  >    As previously mentioned, there is not yet a public definition of   NameList and it is not possible to fully review or implement this spec   without a provisional definition.        

        I've updated the test suite for the recent L3 Core and LS drafts.  The   LS tests now DTD and schema validate and successfully Java compile.        

        I believe that the transform just assumes that whatever you put in for a  literal can be directly copied into the Java source and that it only  generates cast operators when there is a mismatch between a variable type  and parameter type.  Introducing a variable to hold the mode value would  probably result in the proper code being generated since assignment of a  integer literal to a short does not need an explicit cast and if the  variable is is typed as an int, it would trigger the existing casting logic.  It is a bit of a kludge, but it might keep Jeroen rolling until I can look  at modifying the transform.  I don't think it is anything L3 specific, just  there are very few places in the Java binding where short parameters are  used.        

      Subject says it all.  The generated dom3.dtd and dom3.xsd appear to be reasonable.        

        Sander Bos wrote:    >Hi there,  >  >here are some more issues with tests that I found. Sorry if they are  >duplicates, but I figured the CVS version of saturday that I used would have  >most reported issues removed (plus, it should be easy enough to ignore  >them....):  >  >files/test7.xml:  >  has reference to files/text5.xml in it, but that one is in the same  >directory, and named differently (test5.xml).  >    >  test7.xml only loaded in DOMBuilderFilterTest1 which checks that entity,   notation, document, document type and attribute nodes are not passed to   acceptNode.  The test does expect the document to be successfully   loaded.  test7.xml should be corrected since an implementation is free   to resolve the entity references which would cause the test to fail.    >DOMImplementationLSTest1  >  Should be optional test, should test for LS-ASync support before creating  >parser?  >    >  The test has a commented out precondition that hasFeature("LS-Async",   null) == true.  It is commented out since the only implementation that I   have access to that even partially supports LS-Async does not return   true on the hasFeature call and if I left the precondition in, I would   never be able to run the test.  I'll change it since two people have   mentioned it and find another way that will allow me to actually run the   test on the available implementation.    >DOMInputSourceTest3  >  resource resolver should not give back null result, then parser will look  >for 'new_system' file on filesystem.  >    >    Current DOMInputSourceTest3 does not have an resource resolver.  Haven't   checked history.    >DOMInputSourceTest6  >  <characterStream obj="inputSource" var="myReader" interface="LSInput"/>  >  in Java becomes  >  myReader = inputSource.getCharacterStream();  >  so stream is not set on input (input is empty).  >    >  Will be fixed.    >DOMWriterFilterTest0:  >  <getAttribute var="attr1" obj="elt1" name='"attr1"'/>  >discovered during implementation that this does not test whether the whole  >attribute is 'accidentally'  >removed (getAttribute returns empty string for non-existing attributes).  >Since I think most impls are likely to get this wrong at first may be idea  >to add extra check that attr1 is present (but empty), also to distinguish it  >from next test.  >DOMWriterFilterTest1:  >  The check at the end should verify that the attribute is now gone, not  >that it is still there as it does now.  >    >  Will review tomorrow.    >SystemId1/SystemId2:  >  Parser should be made synchronous, not constant 0. Elena reported that  >these tests were wrong in other ways but they are running for me now (so  >maybe our impl does the wrong thing there?).  >    >    Mode should be 1 not 0.  That error slipped by since everything I ran   that test against grossly failed before then.    Elena's issue with the URL returned from createTempFileURI() (which   affects SystemId1) is specific to Windows and possibly specific JDK's.    SystemId2 requires a running HTTP server that allows you to HTTP PUT to   http://localhost:8080/domts/temp/{random integer}.xml.  The base URI   should eventually be configurable.  However checking the ability to   write to an http URL will always require some appropriately configured   server.        

      Just to refresh on the back ground for those who tuned in.  The impetus for  the initial question was that the NIST tests had code like:    boolean hasFeature = impl.hasFeature("XML","");    but didn't test:    boolean hasFeature = impl.hasFeature("XML",null);    I can't justify that the first as a valid test based on the original text,  "" isn't unspecified, it is an empty string.    I think that the majority of Java developers would look at the second form  and the spec and say it should return true if the processor supports any  version of XML.  However, I believe at least one processor threw an  exception when passed a null.    If the NIST test form and only the NIST test form is correct, then  "unspecified" should be "empty string"    MSXML 3.0's documentation for IXMLDOMImplement.hasFeature (  http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk30/ht  m/xmmthhasfeature.asp) and System.Xml.XmlImplementation  (http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html  /frlrfsystemxmlxmlimplementationclasshasfeaturetopic.asp)  interpreted unspecified == null    >Version number to test, or, if Null, tests for implementation of the  feature  >in any version. In Level 1, "1.0" is the only valid version value.    I think an errata is necessary because different people have looked at that  statement and come up with different interpretations.    So the options are:    1. Change "unspecified" to "empty string".  The NIST test stands, and the  behavior using null is unspecified.    2. Change "unspecified" to "null".  Behavior using empty string is  unspecified.    3. Change "unspecified" to "null or empty string".  The NIST test stands  (but an additional test should be added) and the behavior using null is  specified.    4. Change "unspecified" to "undefined, null or empty string" or "undefined  or null"    This would definitely be the most desireable from a usage standpoint and  might possibly reflect the behavior of deployed ECMAScript implementations.  I will try to check the MSXML behavior when I finally get to the office.  If  someone could quickly check Netscape 6/Mozilla, I'd be grateful.    Basically, you would want to results of:    impl.hasFeature("XML","1.0");  impl.hasFeature("XML","");  impl.hasFeature("XML",null);  impl.hasFeature("XML",undefined);  impl.hasFeature("XML");    If both browsers return true for all the cases, or for all the cases except  "", then I'd change it to "undefined, null, or empty string".    If Microsoft fails the last two, then "undefined" would not be acceptible.  The hasFeature method is defined as a BSTR which doesn't have a distinct  value for "undefined".  JScript will either coerce undefined to a null BSTR  or throws an exception before it invokes the implementation.  If it throws  an exception on the coercsion, then it would require a change of their  version parameter to a VARIANT to prevent to coercsion and that would be  unacceptibly distruptive.    I'll try to get the results for at least the MSXML tests within the hour.        

      I've updated build.xml to point to the recent candidate recommendation and actually build dom2-html.jar.  Needed to fix up some of the HTMLTableRowElement tests since the test names were missing the "Row".    I don't know any way to run it yet since Xerces-J only supports HTML L1, but should be able to copy the Xerces-J HTML L1 implementation and make the appropriate changes in a few days.        

      [ca]  >> Some minor notes:  >>  >> I think the package attribute on the <test> and <suite> elements is  >> extraneous and expect to remove it from the generated schemas and DTD's  and  >> ignore it in the transforms.  If you are going to commit  >> tests, you may go ahead and strip it out now.  The package name will be  >> based on the location of the test.  >  > [dd] The location of the test once we've decided it's ready to form part  of  > the suite, I presume?    [dd] (in a different message)  > think separate directories are preferrable, since we may want to build  >suites that consist of different subsets, except if we explicitly remove  the  > files we don't want to use. Provided we can't solve it with another  mechanis  > that is. Can ANT look into xml-files without including them in the build?  I  > realise that would take lots of extra time, but then we could instruct ANT  > to include only tests that have an explicit value on the test "status"  > attribute.    [ca]  I don't believe that you can adequately judge the validity of a test without  being able to run it.  My take is that, at least in the development phase,  every test submitted that is well-formed goes into the CVS, is translated  into appropriate code and can be invoked.    During the review cycle a subset of all submitted tests would developed that  would be the conformance suite.  I don't think it is essential to remove the  rejected tests from the CVS or the build and it would actually better  preserve the history if we left the rejected tests in (but they wouldn't be  run unless you explicitly requested one).    Moving the tests, changing the target URI's or package names would all tend  to break the continuity of the review cycle.    My preference would be that the definition of the test suite be explicit,  that is a <suite> element listing the accepted tests, and that the metadata  about the review process (links to comments on particular tests, approvals  and rejections) be stored externally to the tests.    [dd] Definitely. Curt, do you have anything handy on the build process?    [ca] It is more complicated that it should be due to the unreleased state of  Ant 1.4 and problems with either crimson.jar or xalan.jar in the current  nightly build.  I will make an attempt to isolate the issues and make them  known to the Ant team so that they might be able to provide an Ant version  that works out of the box.    The mailing list search is down and I don't have time to find the previous  message that I described everything, but basically the steps are:    1. put patch (part of CVS) and sed (part of most linux distributions and  downloadable from http://www.cornerstonemag.com/sed/sed3028a.zip   for  win32) on the path  2. download a nightly build of ant and the optional tasks jar  3. Remove jaxp.jar, crimson.jar and xalan.jar from the ant /lib directory  and replace with Xalan.jar and xerces.jar from the Xalan 2.1 distribution.    Until there are tests in the CVS, nobody who doesn't have there own test  definitions can building anything, so it is too early to document anything  more than just information emails.  Once we have something buildable in the  CVS, then we can write up an appropriate documentation and hopefully it will  be less messy.    > [dd] Do we solce this if we wrap it in a CDATA section like Fred  indicated?    Using CDATA sections should allow &, < and ?> to appear in CVS commit  comments.  Guess you couldn't put a ]]>< into a CVS commit commit.  Fred and  my take was that there is no harm in adding log elements at a later time and  to defer any action on that.    [dd]  One reason to avoid 8.3 is the test's names as they currently stand, take a  look at the NIST matrix...    Perhaps x.3 is a better way to go if we want to avoid long suffixes.    .domtest would also work, so that's mainly a design issue. I'd go for .tst  personally.    [ca]  I was never intending to try to limit the test name of 8 characters.  I was  trying to explain that by still primarily thinking in terms of three letter  extensions (the 3 part of 8.3), I proposed a extension that might conflict  with the test definitions from some other testing tool and that a longer  file extension might should avoid that potential conflict.        

        Benjamin C. Chang wrote:    >Responses are below.  >  >Thanks,  >Ben  >  >Curt Arnold wrote:  >  >    >  >>ElementEditVal.allowedChildren isn't all that useful.  What you really  >>would want is a list of all the element names (and maybe #text if  >>character content would be allowed) that could appear as the initial  >>child of the element.  If you had a content model like (j,  >>(a|b|c|d|e|f|g|h|i|k|m|n|o|p)) you would want to guide the user to start  >>a <j> element.  Once you had that inserted, you could use  >>NodeEditVal.allowableNextSiblings to guide through the rest of the  >>content model.  >>      >>  >  >allowedChildren is very flexible; subsequent operations would achieve  >your desired results.  Your suggestion of having a convenience attribute  >(the allowed* are all attributes) allowedFirstChildElements was  >incorporated.  >  >    >  >>ElementEditVal.allowedAttributes is good, but it would also be helpful  >>for have an ElementEditVal.requiredAttributes and maybe an  >>ElementEditVal.fixedAttributes.  >>      >>  >  >requiredAttributes was already there; you must have missed it.  We decided  >against adding a fixedAttributes attribute for now.  >  >    >  >>It would be useful if DocumentEditVal had a method that took a value  >>from a NameList from  allowedChildren, allowedNextSiblings, et al and  >>created the corresponding node.  The format of the NameList entries is  >>not described, but without such a method, it would be necessary to parse  >>the entry into the namespace and local name and then call the  >>corresponding CreateElement or CreateElementNS.  >>  >>Something like:  >>  >>Node CreateNode(string nameListName)  >>  >>where if nameListName was '@foo', you'd get an attribute, if  >>nameListName was #text, you'd get a CharacterDataNode and if  >>'transform:http://www.w3.org/1999/XSL/Transform", an XSLT transform  >>element and if "foo" a DOM L1 element.  >>  >>That would suggest that allowedAttributes should return the attribute  >>values starting with a "@".  You'd also need to specify how you'd  >>represent namespace qualified attributes.  >>      >>  >  >If you take a look at the DOM L3 CORE NameList description, these  >are not needed.  >  >  >  >    >  The proposed name allowedFirstChildElements seems inconsistent with name   allowedChildren.  Other than that, I am satisified with the resolution.    Apparently I did overlook requiredAttributes.  I agree that   fixedAttributes is excessive,    The current public working draft of L3 Core does not define NameList.  I   assume that it is defined in the current working group draft.  If   NameList has a provision to creation of nodes from a name entry, then I   would be satisified with the resolution.     I do believe it would be essential to have a coordinated release of a   Core public draft with the next public working draft of L3 validation.        

        If you have been developing tests for inclusion in the DOM L3 test suite   that have not been added to the public CVS, could you please send a   message to www-dom-ts (preferrably) or w3c-dom-ig indicating the nature   of the tests and any issues that need to be resolved before they are   committed.    Hopefully, we can get any existing private tests into the CVS in fairly   short order and then start walking through the spec and filling in   additional tests.  If there is anything that I can do to help, please   let me know.        

        Robert Clary wrote:  >> It might be better to organize the components by sub-spec (Core, HTML,   >> Events, LS, XPath) than by level.  The Level 1 owner isn't going to   >> have much to do.  >>  >   > The question is would  >   > DOM Level 1  > DOM Level 2 Core  > DOM Level 2 HTML  > ....  >   > be acceptable or would this create too many components?    I don't have a problem with that.    > The process to date has been for myself and others to raise points,   > provide demonstrations of ideas, and solicit feedback. However you make   > the final decisions as to the exact changes to the ECMAScript binding   > and commit them to CVS without any discussion or approval of what those   > specific changes will be.    Committing stuff to the CVS (on a branch if appropriate) in my opinion   is a precondition for discussion and collaboration, not an attempt to   preempt discussion.  It is in no way final since there is more than one   committer and any ill-considered change could readily be reversed if   there were complaints.    In this particular instance, the prototype was branched (apparently   unintentionally) from the CVS sometime before July 2002, it would have   been error prone to reconcile your prototype with the current CVS.   Instead I attempted to incorporate the novel concepts from your   prototype and the followup discussion into modifications of the current   CVS to provide a path forward to which all could contribute.    If there had been any complaints, the 3 files that were changed easily   could have been rolled back or split off into a branch.    It is counterproductive to do substantial work off-CVS.  It was   unavoidable during the development of X-Hive's submission of Load/Save   tests since it was based on a non-public draft, but knowing there was   work going on but not being able to see it would strongly discourage   anyone else from building LS tests for contribution.  If the test suite   development had been done on CVS, other interested parties could be able   to contribute since they would know there contributions did not   duplicate X-Hive's efforts.  It also made it very difficult for me to   modify the transforms to address problems with tests to which I did not   have access.    > Under no circumstances would I feel that it is ok to check in a change   > to CVS if there has been disagreement with either the Component owner,   > the DOM TS chair or the DOM WG.    In regards to controversial tests, the following example might be   helpful.  A couple of years ago David Brownell raised an issue   (http://lists.w3.org/Archives/Public/www-dom-ts/2001Nov/0025.html) where   Crimson alone implemented a particular reasonable interpretation of a   passage of a DOM spec and every other parser known to man implemented a   behavior that seemed contrary to the spec.  A well-known WG member said   in a communication that I can't find something like "it kind of says   that but it really means..." and referred to non-public WG communication   to support his interpretation.    A definitive way to have resolved the conflict would have been to put   one test for each of the behaviors into the CVS and petition the WG to   explicitly reject one or the other.  If we attempted to avoid   controversy, neither test would have added to the CVS and there would be   nothing to compel resolution to this issue.    As long as a test is schema-valid, is consistent with a somewhat   reasonable reading of the spec and doesn't have IP issues, the TS task   force should not suppress a controversial test but should add the test   to the CVS, survey the usual implementations and petition the WG to   accept or reject the test.    I know Dimitris spent a huge amount of time with the QA team and maybe   he can elaborate.  I think it is a good thing for the TS force to seek   out potential controversy, crystalize it into potentially inconsistent   test cases, survey the implementations and petition the WG for   resolution and not to suppress controversy or preempt the WG's judicial   role.    In regard to framework issues, there may be efforts like the enhancement   of the ECMAScript harness that may extend for a substantial period of   time.  I'd prefer to avoid it, but these types of efforts could be   isolated in development branches in the CVS and only integrated to the   stable branch when everybody is happy.  Totally locking down the CVS   would encourage development to occur elsewhere, either in isolation or   on some non-W3C CVS server.        

         From    http://www.w3.org/TR/2004/PR-DOM-Level-3-Core-20040205/core#parameter-   entities    > Only  EntityReference nodes to non-defined entities are kept in the    > document, with their  associated Entity nodes if any.    The phrase "with their associated Entity nodes if any" is a hold-over    from the previous definition of "entities" and should be eliminated.        

      Over the last couple of hours, I've committed changes to many of the level 2 tests that fix bugs in the tests.  Xerces-J 1.4.3 now passes all tests when preserving entity references and fails 8 when expanding entity references (the same underlying problem that caused the level 1 *EE tests to fail).    I took the time to write a custom log message for each file, but the changes fell into a couple of basic categories.    1) tests that required a namespace aware parser to load the test file    Added an <implementionAttribute name="namespaceAware" value="true"/> immediately after the metadata on those tests.  That forces the test to be run either namespaceAware or not at all.    2) tests that depended on entity reference preservation    Added conditional sections that called createEntityReference to create an equivalent entity reference node    3) tests that loaded staff.xml but were written for staffNS.xml    Most of the import*.xml tests loaded staff.xml but expected the DTD to be staffNS.DTD    4) Tests that used ignorable whitespace to check Text node behavior    Changed these to use significant text content without changing the essence of the test    5) Replaced list assertions with equivalent individual assertions    List assertions should only be used for comparisons that involve a loop of some sort    I changed build.xml to build the jars with debug info, so now the tracebacks have line numbers and fixed a problem that resulted in unnecessary casts in test-to-java.xsl    Will need to update the test-to-jsunit before you can build DOM L2 for ECMAScript, but Java is runnable.        

      I believe that it should be a two character string containing "Y" and "\u03B1".  Since HTML does not provide a mechanism for defining entities other than parameter entities, I mapped ent1 to alpha, ent2 to beta, etc which are predefined for HTML and can be defined for XML.      The use of non-ASCII characters might make things interesting when generating code for older languages.  The Java tasks should generate and compile UTF-8 encoded documents, so you could use "Yα", "Yα",  or "Y\u03B1" for the value of the expected attribute and get consistent results.  I'd lean toward "Y\u03B1" since it might make generating code for languages that only support source code in ASCII a little easier.    What are the existing baseline XML processors reporting when they fail the test as originally written?        

        Jeroen van Rotterdam wrote:  > In interface DOMBuilderFilter  >   >      readonly attribute unsigned long   whatToShow;  >   >      <whatToShow interface="DOMBuilderFilter">  >         <return value="SHOW_ELEMENT"/>  >      </whatToShow>  >   > still delivers a  >   >      public void setWhatToShow() {  >      }  >   >   > instead of a getter in test-to-java.xsl.  > The dtd is ok now but the stylesheet not.    Actually, it was the other way around.  The generated schema and   transform expected the accessor to be written as:    <whatToShow>        <get>             <return value="SHOW_ELEMENT"/>        </get>  </whatToShow>    The DTD's content model wasn't in synch with the schema.  I've modified   dom-to-dtd.xsl to change the content model of user-implemented   properties.  The interface attribute should only be specified when   calling whatToShow, it would cause the schema validation to fail.    I also reworked the generation of exception code elements   (<NO_MODIFICATION_ALLOWED_ERR>) and the like in the DTD so that   identically named codes in different interfaces only produce one element   with a combined content model.  This should enable using the   dom3-ls-validate-tests target to validate the tests against the dom3.dtd.    p.s. I also modified dom2-combine.xsl to add a few missing exceptions   from the errata list to allow dom2-core-validate-tests to pass all tests.        

        The current L/S draft appears close but insufficient to invoke SOAP or   WebDAV methods.  I think it would be very beneficial if it could.  I   believe two additional parameters to parseURI could be sufficient:    Document parseURI(DOMString uri, DOMString method, Document body)    Where method and body could be null.        

      I was trying to encourage someone else to play with ant's regexp task.    http://www.student.northpark.edu/pemente/sed/sed3028a.zip is the SED implementation that I have been using.    The SED task is used to fix up the generated schemas since the XSLT transform can't generate dynamic xmlns attributes so _xmlns attributes are generated instead and SED removes the underscore.  SED is also used to fix up some missing entity references in the SVG spec.    Patch is used to change the name param to tagname for Element.getElementsByTagName so the two forms are consistant and making other small changes to the spec sources.  The task is essential to produce the interface summary file which is used by everything else.    The earliest doxygen task did download it, but since the site wasn't always responsive and it would only get the Windows version.  It isn't essential, but it is helpful for browsing the tests.      ----- Original Message -----     From: Dimitris Dimitriadis     To: Dimitris Dimitriadis     Cc: www-dom-ts@w3.org     Sent: Thursday, November 29, 2001 1:51 PM    Subject: Re: Build notes        About Ant's possible forthcoming regexp capabilities, I won't incorporate any changes in the build helper until that issue gets resolved. Curt, since you seem to keep an eye on what gets added to Ant, once regexp is there, please advise the list.      /Dimitris      On Thursday, November 29, 2001, at 06:50 PM, Dimitris Dimitriadis wrote:          comments inlined        On Thursday, November 29, 2001, at 06:13 PM, Curt Arnold wrote:            The need for SED and Patch might be eliminated in the forthcoming Ant 1.5.  There is a regexp replacement task that might be able to do what we are doing with SED and Patch.                 I believe the Ant 1.4 optional.jar needs to be downloaded (and renamed)?          [dd] right, I forgot. Thanks.              The discussion on removing Crimson and replacing with Xalan-J might be prefaced with an explanation that the transforms have been observed to break various XSLT processors and the following combination works well.          [dd] Will do.              URL's should be provided for Ant, Xalan.  A URL for a Windows version of SED should be provided.          [dd] I'm using a Unix variant, so I have no idea where to find the Windows version (Mac OS X have them already). Do you have a relevant pointer?              xerces and xalan do not need to be on the path or classpath to build.                 Should mention the junit-run task that will download JUnit and build an adapter.                   dom1-core-gen-jsunit should be mentioned instead of dom1-core-gen-ecmascript.  gen-jsunit generates tests that can be used from JSUnit, gen-ecmascript generates the raw .js files but there isn't a framework to run them from.  The generated .js files might be useful from a Javascript compiler, but we haven't done any work on that.          [dd] Correct, I omitted the -gen-jsunit thinking that people may just want to look at the .js files. They will obviously want to run them as well.              Doxygen will NOT be downloaded by Ant (unless there has been a change that I missed).  If you want to build the Doxygen documentation of the Java tests, you need to download Doxygen and place it on your path.          [dd] I was actually under the impression that it did. OK, I'll check an update the document as necessary.              The discussion of an off-line mode is probably distracting.  We really won't need a different mode, we will just avoid making a network connection if the files are already available in a subsequent version of build.xml.                   Running the JUnit test suite requires that you have a JAXP-compliant parser on the classpath or Xerces.jar, crimson.jar, or xmlparserv2.jar in the same directory.                 

      Per http://lists.w3.org/Archives/Public/www-dom-ts/2002Mar/0002.html, I just marked 9 tests (listed below) that depend on nodes being inserted for default attibutes to only be applicable when the processor under test is validating.   If a processor supports validation, the existing validation setting will be overriden for these tests.  If a processor does not support validation, the test will be skipped.    Currently, the ECMAScript harness does not implement support for implementationAttributes so it does not immediately remove the 9 tests from the reported failures for Mozilla.  However, that will be corrected as part of the development of the new test runner.    To determine the tests affected, I (temporarily) removed the default attributes from staff.dtd and logged the tests that then failed with Xerces-J 2.      The tests that will now only run with validation = true are: attrdefaultvalue.xml, attrnotspecifiedvalue.xml, attrspecifiedvalueremove.xml, documentcreateelementdefaultattr.xml, elementremoveattribute.xml, elementremoveattributerestoredefaultvalue.xml, elementretrieveallattributes.xml, namednodemapremovenameditem.xml, namednodemapremovenameditemgetvalue.xml;        

      While you're preparing the Level 2 tests, could you insert the W3C Software license notice.  I just realized that they were not on the Level 1 tests.        

        Sander Bos wrote:    >Dear Curt,  >  >    >  >>>DOMInputSourceTest3  >>> resource resolver should not give back null result, then   >>>        >>>  >>parser will look  >>      >>  >>>for 'new_system' file on filesystem.  >>>        >>>  >>Current DOMInputSourceTest3 does not have an resource   >>resolver.  Haven't   >>checked history.  >>      >>  >  >My bad, I meant DOMInputSourceTest5.  >    >    The test apparently was intended to make assertions about the parameters   on the call to resolveResource, however resolveResource is not involved   in resolving the document entity.  The inner class method is never   invoked, the test is effectively a unnecessarily complex test that an   unresolved URL results in a null return value for document.  The test   needs to be rewritten.    >    >  >>>DOMWriterFilterTest0:  >>> <getAttribute var="attr1" obj="elt1" name='"attr1"'/>  >>>discovered during implementation that this does not test whether the whole  >>>        >>>  >>>attribute is 'accidentally' removed (getAttribute returns empty string for non-existing attributes).  Since I think most impls are likely to get this wrong at first may be idea  >>>        >>>  >>>to add extra check that attr1 is present (but empty), also to distinguish it  >>>>from next test.  >>>        >>>    I do not see any attributes in the parsed string and there is no DTD   that would provide default attributes.    >>>DOMWriterFilterTest1:  >>> The check at the end should verify that the attribute is now gone, not that it is still there as it does now.  >>>        >>>    The comment in the test is emphatic that the attribute should be   preserved, but my reading agrees with yours that the attribute should   have been stripped.        

        Jeroen van Rotterdam wrote:  > Hi,  >   > As a workaround I tried to locally declare variables within the inner  > class by doing:  >   >   ---- lines omitted  >   > The problem with this workaround is that the variables that are passed to  > the constructor of the inner class are not properly typed.  >   >      DOMBuilderFilter myfilter = new DOMBuilderFilterN1E(this, 1, 1, 2, 3 );  >   > should be:  >   >      DOMBuilderFilter myfilter = new DOMBuilderFilterN1E(this, (int)1,  > (short)1, (short)2, (short)3 ); >  >   > Since 1 is by default int.  >   >   > Jeroen    That is not a workaround, that was the intended use of that construct.   They only issue is that I did not anticipate the need to cast integer   literals to shorts on the constructor.  I'll update the transform.  In   the interim, if you define the class variables as 'int', you should   avoid the inner class constructor issue and any casting to short inside   the inner class body should occur automatically.  Alternatively, you   could assign literals to test scoped variables before the inner class   definition and use the test scoped variables as the values for the inner   class variables.         <var name="SHOW_ELEMENT" type="int" value="1"/>       <var name="FILTER_ELEMENT" type="short" value="1"/>   >   <var name="myfilter"         type="DOMBuilderFilter">   >      <var name="name"            type="DOMString"/>   >      <var name='SHOW_ELEMENT'    type='int'    value='SHOW_ELEMENT'/>   >      <var name='FILTER_ELEMENT'    type='short'   value='FILTER_ELEMENT'/>        

      nodereplacechildnewchilddiffdocument.xml is a strange case.      It calls Node.replaceChild with a old node that is not a child of the target node and attempts to replace it with a node that isn't part of this document.  So it could conceivable throw either NOT_FOUND_ERR or WRONG_DOCUMENT_ERR depending on which condition it tested first.  I don't believe there is anything in the DOM spec that would prescribe which exception code should take precedence and DOMTSML doesn't have a construct to support an ambiguous exception code.    The test is internally inconsistant since the description says  The "replaceChild(newChild,oldChild)" method raises a   WRONG_DOCUMENT_ERR DOMException if the "newChild" was  created from a different document than the one that   created this node.    But the test checks for NOT_FOUND_ERR.  I'm going to make the body consistent with the description.        

      I removed the external script elements from test-to-jsunit.js, eliminated debugging alerts and fixed a function name messup in the Mozilla loading implementation in DOMTestCase.js, and removed mozsafe from the tests since Mozilla 0.9.7 no longer crashes on bogus string offsets.    With these changes and integrating the JSUnit changes I just sent, hopefully Dimitris can finally run the ECMAScript suite on his Mac.    I don't know what the performance would be, but it should now be possible to run the ECMAScript suite on the web.        

        Philippe Le Hegaret wrote:    >FYI, Peter found a few bugs with the DOM Level 1 tests/framework:  >http://www.w3.org/Bugs/Public/buglist.cgi?short_desc_type=allwordssubstr&short_desc=&product=DOM+TS&long_desc_type=allwordssubstr&long_desc=&bug_file_loc_type=allwordssubstr&bug_file_loc=&keywords_type=allwords&keywords=&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED&emailassigned_to1=1&emailtype1=substring&email1=&emailassigned_to2=1&emailreporter2=1&emailcc2=1&emailtype2=substring&email2=&bugidtype=include&bug_id=&votes=&changedin=&chfieldfrom=&chfieldto=Now&chfieldvalue=&cmdtype=doit&order=Bug+Number&field0-0-0=noop&type0-0-0=noop  >If someone can have a look at them, that would be nice,  >  >Philippe  >  >  >  >    >  I've closed all three bugs as fixed.  One was a stray attribute in the   build.xml file, another was an description that was not consistent with   the body of the the test.    The third bug, http://www.w3.org/Bugs/Public/show_bug.cgi?id=261,   involved hc_nodeinsertbefore.xml which was a transliteration of the   XML-specific test nodeinsertnode.xml.  The setup of the test depended on   the preservation of the whitespace between the p and em elements in the   following fragment:     <p>    <em>EMP0002</em>    XML processors and Mozilla's HTML implementation would preserve the   whitespace node, Konqueror and IE would eliminate the whitespace node.    I've changed the test so it not affected by elimination of the   whitespace node.    If eliminating the whitespace node should be considered non-conformant,   then a distinct test should be written to check for the behavior.    However, it would appear to be a reasonable application-specific   optimization of the content.        

      From reading the conference call log, it seems like Ray and Philippe are  getting all the right people together and share my issues with the current  working draft.    Comments inline:    > >So, say you had an SVG drawing embedded in an HTML page that connected  > mouse  > >over in the drawing events with a Java applet and a .NET applet, you'd  > >expect one accessibility tool to figure out what type of mouse movement  > you  > >would need to fake at bring up a specific dialog embedded in one of the  > >applets.  >  > My primary concern is JavaScript. JavaScript is probably the single most  > frustrating problem for disabled users today and it is on almost every web  > page you go to. The scenario you are talking about is so remote I can't  > fathom why you would want to bring it up. I can't remember the last time I  > used an SVG viewer on the web much less a .NET applet.    Yes, but DOM is more general than just JavaScript and HTML.  Though the  scenario is contrived, it is definitely not far off from things I'm doing  embedding SVG in desktop applications.    > However, long term, there needs to be a mechanism for describing what the  > function is that you are trying to do. When I co-architected the Java  > Accessibility API with sun we provided a mechanism for listing the  > accessible actions of an object in Java. Each action had a description and  > a pre-defined action. We extended this to a document to be able to  > enumerate the list of links available in a document and their description.  > The Self Voicing Kit we developed at IBM allowed us to pop up a dialog box  > of the functions and have the user select the one they wanted to execute.  > It wran outside the application being spoken but the API provision allowed  > us to extract the options and allow the user to activate them.    That approach where a document discloses actions seems a lot more practical  than trying to decipher the intent of potentially compiled or remote code.    >  > Specifying exactly how you implement each solution (SVG, .NET applet, Java  > applet) requires a great deal of long term work that you are not going to  > solve today.  >  > >The mutation events contain both the old and new value, spurious mutation  > >events could have serious side-effects.  >  > Fair enough. But to be honest, I don't know why anyone would want to  > intentionally fire a mutation event and if they did then let them suffer  > the consequences.    But as an application developer using DOM primarily with Java and generally  not for UI issues, now I would have to program much more defensively when  there are obvious ways that a hostile agent could be attacking my app.  For  example, I'd might feel the need to repeatedly add my event listener back  since being able to enumerate the listeners would allow external code remove  my listener without my approval or knowledge.    > >a) Is the desire to make it possible for an accessibility tool to make  > >behavior embedded in hostile web content accessible?  Or is it sufficient  > to  > >enable web content that discloses information that can be used by an  > >accessibility tool?  >  > I am not sure what you mean by hostile. The problem with "disclosing  > information" is that content authors seldom disclose information. Just  > getting developers to produce alt-text in documents is difficult.    Probably should have said "unfriendly".  Basically a web page that was not  trying to be accessible.    >  > >b) Is the DOM the right place to do this?  Accessibility tools will still  > >have to mine the HTML content to find content that implies non-script  > >actions (like submit buttons).  Would it be reasonable to have content  > >provide non-visible elements that provide accessibility clues?  >  > Yes, the DOM is the right place to do this. The WAI User Agents Group as  > the central mechanism to gain access to accessibility information. The  word  > "clues" implies that an assistive technology needs to make a guess. I  don't  > think that's what you mean. You need to explain more about what you mean  by  > non-visible elements.    If the content is going to describe actions that could be performed, there  would appear to be two ways: either code could respond to an event that  requests descriptions of available "commands", or the document could contain  elements that declare commands that could be invoked from an accessibility  tool.  An example of the second approach would be something like:    <svg width="100%" height="100%"...>      <script type="text/ecmascript">...</script>      <rect x="10" y="10" height="10" width="10" fill="red"  onmouseover="describeRedBox(evt)"/>      <otherns:command onexecute="describeRedBox(evt)">          <description>Describe Red Box</description>      </otherns:command>  </svg>    The otherns:command element is what I, as someone way out of my domain,  would call an non-visible accessibility clue.  It doesn't show up in the  rendering of the drawing, but an accessibility tool could locate it and  either voice the describe, fabricate a menu for a selection device, or some  other appropriate rendering.        

      Phillipe Le Hegaret wrote:  > I got 3/4 javascript warnings in the console but it worked.    Unfortunately, that was the only way I could find to fake a synchronous  parse with Mozilla.    >  > Running the Java tests:  >  > - add "junit-run.jar is in dist/"  >   (java -jar dist/junit-run.jar)  >  > - if I run java -jar junit-run.jar in dist/, the program output:  >  Exception in thread "main" java.lang.NoClassDefFoundError:  > org/w3c/dom/DOMImplementation    That should be described as an expected exception if you don't have a parser  in the classpath.    >  >   move the sentence "The parser must be put in the dist directory"  >  before the command line.  >  > - Once I got the interface, I don't see anything to select. If I put  > org.w3c.domts.level1.core.TestXerces or ...AltConfig, it keeps saying  > "failed to invoke suite():java.lang.NoSuchMethodError". I do have  > xerces.jar in dist/ ...  >  I looked into dom1-core.jar and this class doesn't seem to exist?    The first way described to run the tests should be:    java -jar dom1-core.jar    Which will run all tests in two modes on the default JAXP parser and print  results to the console.    The "TestXerces" and other classes are JUnit specific and therefore are  located in junit-run.jar.  JUnit's GUIs don't populate the combo box (at  least for us), but do remember previous entries.    I haven't seem that message before, it would indicate that the class was  loaded, but the suite method doesn't exist which should not be the case.  Any more diagnosis you could provide would be appreciated.    >  >  > Copyight: (s/Copyight/Copyright)  >  > please provide a link to  > http://www.w3.org/Consortium/Legal/copyright-software-19980720  > a copy of this file in the package? (similar to the one included  > in the DOM specs packages)  >  > missing section "How to contribute"?  >  >  >        

